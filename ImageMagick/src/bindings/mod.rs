pub mod bindings {
/* automatically generated by rust-bindgen */

extern crate libc;

pub const __llvm__ : libc :: c_uint = 1 ; pub const __clang__ : libc :: c_uint = 1 ; pub const __clang_major__ : libc :: c_uint = 7 ; pub const __clang_minor__ : libc :: c_uint = 0 ; pub const __clang_patchlevel__ : libc :: c_uint = 1 ; pub const __clang_version__ : & 'static [ u8 ; 31usize ] = b"7.0.1 (tags/RELEASE_701/final)\0" ; pub const __GNUC_MINOR__ : libc :: c_uint = 2 ; pub const __GNUC_PATCHLEVEL__ : libc :: c_uint = 1 ; pub const __GNUC__ : libc :: c_uint = 4 ; pub const __GXX_ABI_VERSION : libc :: c_uint = 1002 ; pub const __ATOMIC_RELAXED : libc :: c_uint = 0 ; pub const __ATOMIC_CONSUME : libc :: c_uint = 1 ; pub const __ATOMIC_ACQUIRE : libc :: c_uint = 2 ; pub const __ATOMIC_RELEASE : libc :: c_uint = 3 ; pub const __ATOMIC_ACQ_REL : libc :: c_uint = 4 ; pub const __ATOMIC_SEQ_CST : libc :: c_uint = 5 ; pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM : libc :: c_uint = 0 ; pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP : libc :: c_uint = 1 ; pub const __OPENCL_MEMORY_SCOPE_DEVICE : libc :: c_uint = 2 ; pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES : libc :: c_uint = 3 ; pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP : libc :: c_uint = 4 ; pub const __PRAGMA_REDEFINE_EXTNAME : libc :: c_uint = 1 ; pub const __VERSION__ : & 'static [ u8 ; 54usize ] = b"4.2.1 Compatible Clang 7.0.1 (tags/RELEASE_701/final)\0" ; pub const __OBJC_BOOL_IS_BOOL : libc :: c_uint = 0 ; pub const __CONSTANT_CFSTRINGS__ : libc :: c_uint = 1 ; pub const __ORDER_LITTLE_ENDIAN__ : libc :: c_uint = 1234 ; pub const __ORDER_BIG_ENDIAN__ : libc :: c_uint = 4321 ; pub const __ORDER_PDP_ENDIAN__ : libc :: c_uint = 3412 ; pub const __BYTE_ORDER__ : libc :: c_uint = 1234 ; pub const __LITTLE_ENDIAN__ : libc :: c_uint = 1 ; pub const _LP64 : libc :: c_uint = 1 ; pub const __LP64__ : libc :: c_uint = 1 ; pub const __CHAR_BIT__ : libc :: c_uint = 8 ; pub const __SCHAR_MAX__ : libc :: c_uint = 127 ; pub const __SHRT_MAX__ : libc :: c_uint = 32767 ; pub const __INT_MAX__ : libc :: c_uint = 2147483647 ; pub const __LONG_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __LONG_LONG_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __WCHAR_MAX__ : libc :: c_uint = 2147483647 ; pub const __WINT_MAX__ : libc :: c_uint = 4294967295 ; pub const __INTMAX_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __SIZE_MAX__ : libc :: c_int = -1 ; pub const __UINTMAX_MAX__ : libc :: c_int = -1 ; pub const __PTRDIFF_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __INTPTR_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __UINTPTR_MAX__ : libc :: c_int = -1 ; pub const __SIZEOF_DOUBLE__ : libc :: c_uint = 8 ; pub const __SIZEOF_FLOAT__ : libc :: c_uint = 4 ; pub const __SIZEOF_INT__ : libc :: c_uint = 4 ; pub const __SIZEOF_LONG__ : libc :: c_uint = 8 ; pub const __SIZEOF_LONG_DOUBLE__ : libc :: c_uint = 16 ; pub const __SIZEOF_LONG_LONG__ : libc :: c_uint = 8 ; pub const __SIZEOF_POINTER__ : libc :: c_uint = 8 ; pub const __SIZEOF_SHORT__ : libc :: c_uint = 2 ; pub const __SIZEOF_PTRDIFF_T__ : libc :: c_uint = 8 ; pub const __SIZEOF_SIZE_T__ : libc :: c_uint = 8 ; pub const __SIZEOF_WCHAR_T__ : libc :: c_uint = 4 ; pub const __SIZEOF_WINT_T__ : libc :: c_uint = 4 ; pub const __SIZEOF_INT128__ : libc :: c_uint = 16 ; pub const __INTMAX_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INTMAX_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINTMAX_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINTMAX_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINTMAX_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINTMAX_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __INTMAX_WIDTH__ : libc :: c_uint = 64 ; pub const __PTRDIFF_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __PTRDIFF_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __PTRDIFF_WIDTH__ : libc :: c_uint = 64 ; pub const __INTPTR_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INTPTR_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __INTPTR_WIDTH__ : libc :: c_uint = 64 ; pub const __SIZE_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __SIZE_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __SIZE_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __SIZE_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __SIZE_WIDTH__ : libc :: c_uint = 64 ; pub const __WCHAR_WIDTH__ : libc :: c_uint = 32 ; pub const __WINT_WIDTH__ : libc :: c_uint = 32 ; pub const __SIG_ATOMIC_WIDTH__ : libc :: c_uint = 32 ; pub const __SIG_ATOMIC_MAX__ : libc :: c_uint = 2147483647 ; pub const __UINTMAX_WIDTH__ : libc :: c_uint = 64 ; pub const __UINTPTR_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINTPTR_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINTPTR_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINTPTR_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __UINTPTR_WIDTH__ : libc :: c_uint = 64 ; pub const __FLT16_HAS_DENORM__ : libc :: c_uint = 1 ; pub const __FLT16_DIG__ : libc :: c_uint = 3 ; pub const __FLT16_DECIMAL_DIG__ : libc :: c_uint = 5 ; pub const __FLT16_HAS_INFINITY__ : libc :: c_uint = 1 ; pub const __FLT16_HAS_QUIET_NAN__ : libc :: c_uint = 1 ; pub const __FLT16_MANT_DIG__ : libc :: c_uint = 11 ; pub const __FLT16_MAX_10_EXP__ : libc :: c_uint = 4 ; pub const __FLT16_MAX_EXP__ : libc :: c_uint = 15 ; pub const __FLT16_MIN_10_EXP__ : libc :: c_int = -13 ; pub const __FLT16_MIN_EXP__ : libc :: c_int = -14 ; pub const __FLT_HAS_DENORM__ : libc :: c_uint = 1 ; pub const __FLT_DIG__ : libc :: c_uint = 6 ; pub const __FLT_DECIMAL_DIG__ : libc :: c_uint = 9 ; pub const __FLT_HAS_INFINITY__ : libc :: c_uint = 1 ; pub const __FLT_HAS_QUIET_NAN__ : libc :: c_uint = 1 ; pub const __FLT_MANT_DIG__ : libc :: c_uint = 24 ; pub const __FLT_MAX_10_EXP__ : libc :: c_uint = 38 ; pub const __FLT_MAX_EXP__ : libc :: c_uint = 128 ; pub const __FLT_MIN_10_EXP__ : libc :: c_int = -37 ; pub const __FLT_MIN_EXP__ : libc :: c_int = -125 ; pub const __DBL_HAS_DENORM__ : libc :: c_uint = 1 ; pub const __DBL_DIG__ : libc :: c_uint = 15 ; pub const __DBL_DECIMAL_DIG__ : libc :: c_uint = 17 ; pub const __DBL_HAS_INFINITY__ : libc :: c_uint = 1 ; pub const __DBL_HAS_QUIET_NAN__ : libc :: c_uint = 1 ; pub const __DBL_MANT_DIG__ : libc :: c_uint = 53 ; pub const __DBL_MAX_10_EXP__ : libc :: c_uint = 308 ; pub const __DBL_MAX_EXP__ : libc :: c_uint = 1024 ; pub const __DBL_MIN_10_EXP__ : libc :: c_int = -307 ; pub const __DBL_MIN_EXP__ : libc :: c_int = -1021 ; pub const __LDBL_HAS_DENORM__ : libc :: c_uint = 1 ; pub const __LDBL_DIG__ : libc :: c_uint = 18 ; pub const __LDBL_DECIMAL_DIG__ : libc :: c_uint = 21 ; pub const __LDBL_HAS_INFINITY__ : libc :: c_uint = 1 ; pub const __LDBL_HAS_QUIET_NAN__ : libc :: c_uint = 1 ; pub const __LDBL_MANT_DIG__ : libc :: c_uint = 64 ; pub const __LDBL_MAX_10_EXP__ : libc :: c_uint = 4932 ; pub const __LDBL_MAX_EXP__ : libc :: c_uint = 16384 ; pub const __LDBL_MIN_10_EXP__ : libc :: c_int = -4931 ; pub const __LDBL_MIN_EXP__ : libc :: c_int = -16381 ; pub const __POINTER_WIDTH__ : libc :: c_uint = 64 ; pub const __BIGGEST_ALIGNMENT__ : libc :: c_uint = 16 ; pub const __WINT_UNSIGNED__ : libc :: c_uint = 1 ; pub const __INT8_FMTd__ : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const __INT8_FMTi__ : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const __INT16_FMTd__ : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const __INT16_FMTi__ : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const __INT32_FMTd__ : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const __INT32_FMTi__ : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const __INT64_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INT64_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINT8_FMTo__ : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const __UINT8_FMTu__ : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const __UINT8_FMTx__ : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const __UINT8_FMTX__ : & 'static [ u8 ; 4usize ] = b"hhX\0" ; pub const __UINT8_MAX__ : libc :: c_uint = 255 ; pub const __INT8_MAX__ : libc :: c_uint = 127 ; pub const __UINT16_FMTo__ : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const __UINT16_FMTu__ : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const __UINT16_FMTx__ : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const __UINT16_FMTX__ : & 'static [ u8 ; 3usize ] = b"hX\0" ; pub const __UINT16_MAX__ : libc :: c_uint = 65535 ; pub const __INT16_MAX__ : libc :: c_uint = 32767 ; pub const __UINT32_FMTo__ : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const __UINT32_FMTu__ : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const __UINT32_FMTx__ : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const __UINT32_FMTX__ : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const __UINT32_MAX__ : libc :: c_uint = 4294967295 ; pub const __INT32_MAX__ : libc :: c_uint = 2147483647 ; pub const __UINT64_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINT64_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINT64_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINT64_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __UINT64_MAX__ : libc :: c_int = -1 ; pub const __INT64_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __INT_LEAST8_MAX__ : libc :: c_uint = 127 ; pub const __INT_LEAST8_FMTd__ : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const __INT_LEAST8_FMTi__ : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const __UINT_LEAST8_MAX__ : libc :: c_uint = 255 ; pub const __UINT_LEAST8_FMTo__ : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const __UINT_LEAST8_FMTu__ : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const __UINT_LEAST8_FMTx__ : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const __UINT_LEAST8_FMTX__ : & 'static [ u8 ; 4usize ] = b"hhX\0" ; pub const __INT_LEAST16_MAX__ : libc :: c_uint = 32767 ; pub const __INT_LEAST16_FMTd__ : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const __INT_LEAST16_FMTi__ : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const __UINT_LEAST16_MAX__ : libc :: c_uint = 65535 ; pub const __UINT_LEAST16_FMTo__ : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const __UINT_LEAST16_FMTu__ : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const __UINT_LEAST16_FMTx__ : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const __UINT_LEAST16_FMTX__ : & 'static [ u8 ; 3usize ] = b"hX\0" ; pub const __INT_LEAST32_MAX__ : libc :: c_uint = 2147483647 ; pub const __INT_LEAST32_FMTd__ : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const __INT_LEAST32_FMTi__ : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const __UINT_LEAST32_MAX__ : libc :: c_uint = 4294967295 ; pub const __UINT_LEAST32_FMTo__ : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const __UINT_LEAST32_FMTu__ : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const __UINT_LEAST32_FMTx__ : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const __UINT_LEAST32_FMTX__ : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const __INT_LEAST64_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __INT_LEAST64_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INT_LEAST64_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINT_LEAST64_MAX__ : libc :: c_int = -1 ; pub const __UINT_LEAST64_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINT_LEAST64_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINT_LEAST64_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINT_LEAST64_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __INT_FAST8_MAX__ : libc :: c_uint = 127 ; pub const __INT_FAST8_FMTd__ : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const __INT_FAST8_FMTi__ : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const __UINT_FAST8_MAX__ : libc :: c_uint = 255 ; pub const __UINT_FAST8_FMTo__ : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const __UINT_FAST8_FMTu__ : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const __UINT_FAST8_FMTx__ : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const __UINT_FAST8_FMTX__ : & 'static [ u8 ; 4usize ] = b"hhX\0" ; pub const __INT_FAST16_MAX__ : libc :: c_uint = 32767 ; pub const __INT_FAST16_FMTd__ : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const __INT_FAST16_FMTi__ : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const __UINT_FAST16_MAX__ : libc :: c_uint = 65535 ; pub const __UINT_FAST16_FMTo__ : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const __UINT_FAST16_FMTu__ : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const __UINT_FAST16_FMTx__ : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const __UINT_FAST16_FMTX__ : & 'static [ u8 ; 3usize ] = b"hX\0" ; pub const __INT_FAST32_MAX__ : libc :: c_uint = 2147483647 ; pub const __INT_FAST32_FMTd__ : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const __INT_FAST32_FMTi__ : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const __UINT_FAST32_MAX__ : libc :: c_uint = 4294967295 ; pub const __UINT_FAST32_FMTo__ : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const __UINT_FAST32_FMTu__ : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const __UINT_FAST32_FMTx__ : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const __UINT_FAST32_FMTX__ : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const __INT_FAST64_MAX__ : libc :: c_ulonglong = 9223372036854775807 ; pub const __INT_FAST64_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INT_FAST64_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINT_FAST64_MAX__ : libc :: c_int = -1 ; pub const __UINT_FAST64_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINT_FAST64_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINT_FAST64_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINT_FAST64_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __FINITE_MATH_ONLY__ : libc :: c_uint = 0 ; pub const __GNUC_STDC_INLINE__ : libc :: c_uint = 1 ; pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : libc :: c_uint = 1 ; pub const __CLANG_ATOMIC_BOOL_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_CHAR_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_SHORT_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_INT_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_LONG_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_LLONG_LOCK_FREE : libc :: c_uint = 2 ; pub const __CLANG_ATOMIC_POINTER_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_BOOL_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_CHAR_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_SHORT_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_INT_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_LONG_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_LLONG_LOCK_FREE : libc :: c_uint = 2 ; pub const __GCC_ATOMIC_POINTER_LOCK_FREE : libc :: c_uint = 2 ; pub const __NO_INLINE__ : libc :: c_uint = 1 ; pub const __FLT_EVAL_METHOD__ : libc :: c_uint = 0 ; pub const __FLT_RADIX__ : libc :: c_uint = 2 ; pub const __DECIMAL_DIG__ : libc :: c_uint = 21 ; pub const __amd64__ : libc :: c_uint = 1 ; pub const __amd64 : libc :: c_uint = 1 ; pub const __x86_64 : libc :: c_uint = 1 ; pub const __x86_64__ : libc :: c_uint = 1 ; pub const __k8 : libc :: c_uint = 1 ; pub const __k8__ : libc :: c_uint = 1 ; pub const __tune_k8__ : libc :: c_uint = 1 ; pub const __NO_MATH_INLINES : libc :: c_uint = 1 ; pub const __FXSR__ : libc :: c_uint = 1 ; pub const __SSE2__ : libc :: c_uint = 1 ; pub const __SSE2_MATH__ : libc :: c_uint = 1 ; pub const __SSE__ : libc :: c_uint = 1 ; pub const __SSE_MATH__ : libc :: c_uint = 1 ; pub const __MMX__ : libc :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 : libc :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 : libc :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 : libc :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 : libc :: c_uint = 1 ; pub const __SIZEOF_FLOAT128__ : libc :: c_uint = 16 ; pub const unix : libc :: c_uint = 1 ; pub const __unix : libc :: c_uint = 1 ; pub const __unix__ : libc :: c_uint = 1 ; pub const linux : libc :: c_uint = 1 ; pub const __linux : libc :: c_uint = 1 ; pub const __linux__ : libc :: c_uint = 1 ; pub const __gnu_linux__ : libc :: c_uint = 1 ; pub const __ELF__ : libc :: c_uint = 1 ; pub const __FLOAT128__ : libc :: c_uint = 1 ; pub const __STDC__ : libc :: c_uint = 1 ; pub const __STDC_HOSTED__ : libc :: c_uint = 1 ; pub const __STDC_VERSION__ : libc :: c_uint = 201112 ; pub const __STDC_UTF_16__ : libc :: c_uint = 1 ; pub const __STDC_UTF_32__ : libc :: c_uint = 1 ; pub const _MAGICKCORE_MAGICK_BASECONFIG_H : libc :: c_uint = 1 ; pub const MAGICKCORE_BZLIB_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_CIPHER_SUPPORT : libc :: c_uint = 1 ; pub const MAGICKCORE_CODER_DIRNAME : & 'static [ u8 ; 7usize ] = b"coders\0" ; pub const MAGICKCORE_CONFIGURE_PATH : & 'static [ u8 ; 30usize ] = b"/usr/local/etc/ImageMagick-7/\0" ; pub const MAGICKCORE_CONFIGURE_RELATIVE_PATH : & 'static [ u8 ; 14usize ] = b"ImageMagick-7\0" ; pub const MAGICKCORE_DJVU_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_DOCUMENTATION_PATH : & 'static [ u8 ; 36usize ] = b"/usr/local/share/doc/ImageMagick-7/\0" ; pub const MAGICKCORE_EXECUTABLE_PATH : & 'static [ u8 ; 16usize ] = b"/usr/local/bin/\0" ; pub const MAGICKCORE_FILTER_DIRNAME : & 'static [ u8 ; 8usize ] = b"filters\0" ; pub const MAGICKCORE_FONTCONFIG_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_FREETYPE_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ACOSH : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ARPA_INET_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ASINH : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ATANH : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ATEXIT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ATOLL : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CABS : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CARG : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CIMAG : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CLOCK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CLOCK_GETRES : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CLOCK_GETTIME : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CLOCK_REALTIME : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_COMPLEX_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CREAL : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_CTIME_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_DECL_PREAD : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_DECL_PWRITE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_DECL_STRERROR_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_DECL_STRLCPY : libc :: c_uint = 0 ; pub const MAGICKCORE_HAVE_DECL_VSNPRINTF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_DIRENT_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_DLFCN_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ERF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ERRNO_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_EXECVP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FCHMOD : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FCNTL_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FLOOR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FORK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FSEEKO : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FTIME : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_FTRUNCATE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETCWD : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETC_UNLOCKED : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETDTABLESIZE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETPAGESIZE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETPID : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETPWNAM_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETRLIMIT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETRUSAGE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GETTIMEOFDAY : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_GMTIME_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_INTMAX_T : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_INTPTR_T : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_INTTYPES_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_ISNAN : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_J0 : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_J1 : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LCMS2_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LIMITS_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LINUX_UNISTD_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LOCALE_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LOCALTIME_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LONG_LONG_INT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_LSTAT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MBSTATE_T : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MEMMOVE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MEMORY_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MEMSET : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MKSTEMP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MMAP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_MUNMAP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_NANOSLEEP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_NETINET_IN_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_NEWLOCALE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_PCLOSE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POLL : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POPEN : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POSIX_FADVISE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POSIX_FALLOCATE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POSIX_MADVISE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POSIX_MEMALIGN : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POSIX_SPAWNP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_POW : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_PREAD : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_PTHREAD : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_PTHREAD_PRIO_INHERIT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_PWRITE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_QSORT_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_RAISE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_RAND_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_READLINK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_REALPATH : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SEEKDIR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SELECT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SENDFILE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SETLOCALE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SETVBUF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SHAPE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SHARED_MEMORY : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SIGACTION : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SIGEMPTYSET : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SOCKET : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SQRT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STAT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STDARG_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STDBOOL_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STDINT_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STDLIB_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRCASECMP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRCASESTR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRCHR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRCSPN : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRDUP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRERROR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRERROR_R : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRINGIZE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRINGS_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRING_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRNCASECMP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRPBRK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRRCHR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRSPN : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRSTR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRTOD : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRTOD_L : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRTOL : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRTOUL : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_STRUCT_TM_TM_ZONE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYMLINK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYSCONF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_IPC_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_MMAN_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_PARAM_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_RESOURCE_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_SELECT_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_SENDFILE_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_SOCKET_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_STAT_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_TIMEB_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_TIMES_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_TIME_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_TYPES_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_SYS_WAIT_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TELLDIR : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TEMPNAM : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFCONF_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFISBIGENDIAN : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFISCODECCONFIGURED : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFMERGEFIELDINFO : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFREADEXIFDIRECTORY : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFSETERRORHANDLEREXT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFSETTAGEXTENDER : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFSETWARNINGHANDLEREXT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIFFSWABARRAYOFTRIPLES : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TIMES : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_TM_ZONE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_UINTMAX_T : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_UINTPTR_T : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_UNISTD_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_UNSIGNED_LONG_LONG_INT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_USELOCALE : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_USLEEP : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_UTIME : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_UTIME_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_VFORK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_VFPRINTF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_VPRINTF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_VSNPRINTF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_VSPRINTF : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_WAITPID : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_WCHAR_H : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_WORKING_FORK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE_WORKING_VFORK : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE__BOOL : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE__EXIT : libc :: c_uint = 1 ; pub const MAGICKCORE_HAVE___ATTRIBUTE__ : libc :: c_uint = 1 ; pub const MAGICKCORE_HDRI_ENABLE_OBSOLETE_IN_H : libc :: c_uint = 1 ; pub const MAGICKCORE_INCLUDEARCH_PATH : & 'static [ u8 ; 34usize ] = b"/usr/local/include/ImageMagick-7/\0" ; pub const MAGICKCORE_INCLUDE_PATH : & 'static [ u8 ; 34usize ] = b"/usr/local/include/ImageMagick-7/\0" ; pub const MAGICKCORE_INSTALLED_SUPPORT : libc :: c_uint = 1 ; pub const MAGICKCORE_JBIG_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_JPEG_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_LCMS_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_LIBOPENJP2_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_LIBRARY_PATH : & 'static [ u8 ; 34usize ] = b"/usr/local/lib/ImageMagick-7.0.9/\0" ; pub const MAGICKCORE_LIBRARY_RELATIVE_PATH : & 'static [ u8 ; 18usize ] = b"ImageMagick-7.0.9\0" ; pub const MAGICKCORE_LIB_BIN_BASEDIRNAME : & 'static [ u8 ; 4usize ] = b"bin\0" ; pub const MAGICKCORE_LQR_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_LT_OBJDIR : & 'static [ u8 ; 7usize ] = b".libs/\0" ; pub const MAGICKCORE_LZMA_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_MODULES_BASEDIRNAME : & 'static [ u8 ; 8usize ] = b"modules\0" ; pub const MAGICKCORE_OPENEXR_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_PACKAGE : & 'static [ u8 ; 12usize ] = b"ImageMagick\0" ; pub const MAGICKCORE_PACKAGE_BUGREPORT : & 'static [ u8 ; 50usize ] = b"https://github.com/ImageMagick/ImageMagick/issues\0" ; pub const MAGICKCORE_PACKAGE_NAME : & 'static [ u8 ; 12usize ] = b"ImageMagick\0" ; pub const MAGICKCORE_PACKAGE_STRING : & 'static [ u8 ; 21usize ] = b"ImageMagick 7.0.9-25\0" ; pub const MAGICKCORE_PACKAGE_TARNAME : & 'static [ u8 ; 12usize ] = b"ImageMagick\0" ; pub const MAGICKCORE_PACKAGE_URL : & 'static [ u8 ; 24usize ] = b"https://imagemagick.org\0" ; pub const MAGICKCORE_PACKAGE_VERSION : & 'static [ u8 ; 9usize ] = b"7.0.9-25\0" ; pub const MAGICKCORE_PNG_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_QUANTUM_DEPTH_OBSOLETE_IN_H : libc :: c_uint = 16 ; pub const MAGICKCORE_SHAREARCH_BASEDIRNAME : & 'static [ u8 ; 7usize ] = b"config\0" ; pub const MAGICKCORE_SHARE_PATH : & 'static [ u8 ; 32usize ] = b"/usr/local/share/ImageMagick-7/\0" ; pub const MAGICKCORE_SHARE_RELATIVE_PATH : & 'static [ u8 ; 14usize ] = b"ImageMagick-7\0" ; pub const MAGICKCORE_SIZEOF_DOUBLE : libc :: c_uint = 8 ; pub const MAGICKCORE_SIZEOF_DOUBLE_T : libc :: c_uint = 8 ; pub const MAGICKCORE_SIZEOF_FLOAT : libc :: c_uint = 4 ; pub const MAGICKCORE_SIZEOF_FLOAT_T : libc :: c_uint = 4 ; pub const MAGICKCORE_SIZEOF_LONG_DOUBLE : libc :: c_uint = 16 ; pub const MAGICKCORE_SIZEOF_UNSIGNED_LONG_LONG : libc :: c_uint = 8 ; pub const MAGICKCORE_SIZEOF_VOID_P : libc :: c_uint = 8 ; pub const MAGICKCORE_STDC_HEADERS : libc :: c_uint = 1 ; pub const MAGICKCORE_STRERROR_R_CHAR_P : libc :: c_uint = 1 ; pub const MAGICKCORE_THREAD_SUPPORT : libc :: c_uint = 1 ; pub const MAGICKCORE_TIFF_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_TIME_WITH_SYS_TIME : libc :: c_uint = 1 ; pub const _ALL_SOURCE : libc :: c_uint = 1 ; pub const _GNU_SOURCE : libc :: c_uint = 1 ; pub const _POSIX_PTHREAD_SEMANTICS : libc :: c_uint = 1 ; pub const _TANDEM_SOURCE : libc :: c_uint = 1 ; pub const __EXTENSIONS__ : libc :: c_uint = 1 ; pub const MAGICKCORE_VERSION : & 'static [ u8 ; 9usize ] = b"7.0.9-25\0" ; pub const MAGICKCORE_WEBPMUX_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_WEBP_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_WMF_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_X11_CONFIGURE_PATH : & 'static [ u8 ; 1usize ] = b"\0" ; pub const MAGICKCORE_X11_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_XML_DELEGATE : libc :: c_uint = 1 ; pub const MAGICKCORE_ZLIB_DELEGATE : libc :: c_uint = 1 ; pub const _DARWIN_USE_64_BIT_INODE : libc :: c_uint = 1 ; pub const MAGICKCORE_QUANTUM_DEPTH : libc :: c_uint = 16 ; pub const MAGICKCORE_HDRI_ENABLE : libc :: c_uint = 1 ; pub const MAGICKCORE_HDRI_SUPPORT : libc :: c_uint = 1 ; pub const MAGICKCORE_DIR_SEPARATOR_CHAR : u8 = 47u8 ; pub const MAGICKCORE_DIR_SEPARATOR : & 'static [ u8 ; 2usize ] = b"/\0" ; pub const MAGICKCORE_PATH_SEPARATOR_CHAR : u8 = 58u8 ; pub const MAGICKCORE_PATH_SEPARATOR : & 'static [ u8 ; 2usize ] = b":\0" ; pub const _STDIO_H : libc :: c_uint = 1 ; pub const _FEATURES_H : libc :: c_uint = 1 ; pub const _ISOC95_SOURCE : libc :: c_uint = 1 ; pub const _ISOC99_SOURCE : libc :: c_uint = 1 ; pub const _ISOC11_SOURCE : libc :: c_uint = 1 ; pub const _POSIX_SOURCE : libc :: c_uint = 1 ; pub const _POSIX_C_SOURCE : libc :: c_uint = 200809 ; pub const _XOPEN_SOURCE : libc :: c_uint = 700 ; pub const _XOPEN_SOURCE_EXTENDED : libc :: c_uint = 1 ; pub const _LARGEFILE64_SOURCE : libc :: c_uint = 1 ; pub const _DEFAULT_SOURCE : libc :: c_uint = 1 ; pub const _ATFILE_SOURCE : libc :: c_uint = 1 ; pub const __USE_ISOC11 : libc :: c_uint = 1 ; pub const __USE_ISOC99 : libc :: c_uint = 1 ; pub const __USE_ISOC95 : libc :: c_uint = 1 ; pub const __USE_POSIX : libc :: c_uint = 1 ; pub const __USE_POSIX2 : libc :: c_uint = 1 ; pub const __USE_POSIX199309 : libc :: c_uint = 1 ; pub const __USE_POSIX199506 : libc :: c_uint = 1 ; pub const __USE_XOPEN2K : libc :: c_uint = 1 ; pub const __USE_XOPEN2K8 : libc :: c_uint = 1 ; pub const __USE_XOPEN : libc :: c_uint = 1 ; pub const __USE_XOPEN_EXTENDED : libc :: c_uint = 1 ; pub const __USE_UNIX98 : libc :: c_uint = 1 ; pub const _LARGEFILE_SOURCE : libc :: c_uint = 1 ; pub const __USE_XOPEN2K8XSI : libc :: c_uint = 1 ; pub const __USE_XOPEN2KXSI : libc :: c_uint = 1 ; pub const __USE_LARGEFILE : libc :: c_uint = 1 ; pub const __USE_LARGEFILE64 : libc :: c_uint = 1 ; pub const __USE_MISC : libc :: c_uint = 1 ; pub const __USE_ATFILE : libc :: c_uint = 1 ; pub const __USE_GNU : libc :: c_uint = 1 ; pub const __USE_FORTIFY_LEVEL : libc :: c_uint = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : libc :: c_uint = 0 ; pub const _STDC_PREDEF_H : libc :: c_uint = 1 ; pub const __STDC_IEC_559__ : libc :: c_uint = 1 ; pub const __STDC_IEC_559_COMPLEX__ : libc :: c_uint = 1 ; pub const __STDC_ISO_10646__ : libc :: c_uint = 201706 ; pub const __GNU_LIBRARY__ : libc :: c_uint = 6 ; pub const __GLIBC__ : libc :: c_uint = 2 ; pub const __GLIBC_MINOR__ : libc :: c_uint = 28 ; pub const _SYS_CDEFS_H : libc :: c_uint = 1 ; pub const __glibc_c99_flexarr_available : libc :: c_uint = 1 ; pub const __WORDSIZE : libc :: c_uint = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : libc :: c_uint = 1 ; pub const __SYSCALL_WORDSIZE : libc :: c_uint = 64 ; pub const __HAVE_GENERIC_SELECTION : libc :: c_uint = 1 ; pub const __GLIBC_USE_LIB_EXT2 : libc :: c_uint = 1 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT : libc :: c_uint = 1 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT : libc :: c_uint = 1 ; pub const __GLIBC_USE_IEC_60559_TYPES_EXT : libc :: c_uint = 1 ; pub const __GNUC_VA_LIST : libc :: c_uint = 1 ; pub const _BITS_TYPES_H : libc :: c_uint = 1 ; pub const _BITS_TYPESIZES_H : libc :: c_uint = 1 ; pub const __OFF_T_MATCHES_OFF64_T : libc :: c_uint = 1 ; pub const __INO_T_MATCHES_INO64_T : libc :: c_uint = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : libc :: c_uint = 1 ; pub const __FD_SETSIZE : libc :: c_uint = 1024 ; pub const _____fpos_t_defined : libc :: c_uint = 1 ; pub const ____mbstate_t_defined : libc :: c_uint = 1 ; pub const _____fpos64_t_defined : libc :: c_uint = 1 ; pub const ____FILE_defined : libc :: c_uint = 1 ; pub const __FILE_defined : libc :: c_uint = 1 ; pub const __struct_FILE_defined : libc :: c_uint = 1 ; pub const _IO_EOF_SEEN : libc :: c_uint = 16 ; pub const _IO_ERR_SEEN : libc :: c_uint = 32 ; pub const _IO_USER_LOCK : libc :: c_uint = 32768 ; pub const __cookie_io_functions_t_defined : libc :: c_uint = 1 ; pub const _IOFBF : libc :: c_uint = 0 ; pub const _IOLBF : libc :: c_uint = 1 ; pub const _IONBF : libc :: c_uint = 2 ; pub const BUFSIZ : libc :: c_uint = 8192 ; pub const EOF : libc :: c_int = -1 ; pub const SEEK_SET : libc :: c_uint = 0 ; pub const SEEK_CUR : libc :: c_uint = 1 ; pub const SEEK_END : libc :: c_uint = 2 ; pub const SEEK_DATA : libc :: c_uint = 3 ; pub const SEEK_HOLE : libc :: c_uint = 4 ; pub const P_tmpdir : & 'static [ u8 ; 5usize ] = b"/tmp\0" ; pub const _BITS_STDIO_LIM_H : libc :: c_uint = 1 ; pub const L_tmpnam : libc :: c_uint = 20 ; pub const TMP_MAX : libc :: c_uint = 238328 ; pub const FILENAME_MAX : libc :: c_uint = 4096 ; pub const L_ctermid : libc :: c_uint = 9 ; pub const L_cuserid : libc :: c_uint = 9 ; pub const FOPEN_MAX : libc :: c_uint = 16 ; pub const RENAME_NOREPLACE : libc :: c_uint = 1 ; pub const RENAME_EXCHANGE : libc :: c_uint = 2 ; pub const RENAME_WHITEOUT : libc :: c_uint = 4 ; pub const _STDLIB_H : libc :: c_uint = 1 ; pub const WNOHANG : libc :: c_uint = 1 ; pub const WUNTRACED : libc :: c_uint = 2 ; pub const WSTOPPED : libc :: c_uint = 2 ; pub const WEXITED : libc :: c_uint = 4 ; pub const WCONTINUED : libc :: c_uint = 8 ; pub const WNOWAIT : libc :: c_uint = 16777216 ; pub const __WNOTHREAD : libc :: c_uint = 536870912 ; pub const __WALL : libc :: c_uint = 1073741824 ; pub const __WCLONE : libc :: c_uint = 2147483648 ; pub const __ENUM_IDTYPE_T : libc :: c_uint = 1 ; pub const __W_CONTINUED : libc :: c_uint = 65535 ; pub const __WCOREFLAG : libc :: c_uint = 128 ; pub const __HAVE_FLOAT128 : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT128 : libc :: c_uint = 0 ; pub const __HAVE_FLOAT64X : libc :: c_uint = 1 ; pub const __HAVE_FLOAT64X_LONG_DOUBLE : libc :: c_uint = 1 ; pub const __HAVE_FLOAT16 : libc :: c_uint = 0 ; pub const __HAVE_FLOAT32 : libc :: c_uint = 1 ; pub const __HAVE_FLOAT64 : libc :: c_uint = 1 ; pub const __HAVE_FLOAT32X : libc :: c_uint = 1 ; pub const __HAVE_FLOAT128X : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT16 : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT32 : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT64 : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT32X : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT64X : libc :: c_uint = 0 ; pub const __HAVE_DISTINCT_FLOAT128X : libc :: c_uint = 0 ; pub const __HAVE_FLOATN_NOT_TYPEDEF : libc :: c_uint = 0 ; pub const __ldiv_t_defined : libc :: c_uint = 1 ; pub const __lldiv_t_defined : libc :: c_uint = 1 ; pub const RAND_MAX : libc :: c_uint = 2147483647 ; pub const EXIT_FAILURE : libc :: c_uint = 1 ; pub const EXIT_SUCCESS : libc :: c_uint = 0 ; pub const _BITS_TYPES_LOCALE_T_H : libc :: c_uint = 1 ; pub const _BITS_TYPES___LOCALE_T_H : libc :: c_uint = 1 ; pub const _SYS_TYPES_H : libc :: c_uint = 1 ; pub const __clock_t_defined : libc :: c_uint = 1 ; pub const __clockid_t_defined : libc :: c_uint = 1 ; pub const __time_t_defined : libc :: c_uint = 1 ; pub const __timer_t_defined : libc :: c_uint = 1 ; pub const _BITS_STDINT_INTN_H : libc :: c_uint = 1 ; pub const __BIT_TYPES_DEFINED__ : libc :: c_uint = 1 ; pub const _ENDIAN_H : libc :: c_uint = 1 ; pub const __LITTLE_ENDIAN : libc :: c_uint = 1234 ; pub const __BIG_ENDIAN : libc :: c_uint = 4321 ; pub const __PDP_ENDIAN : libc :: c_uint = 3412 ; pub const __BYTE_ORDER : libc :: c_uint = 1234 ; pub const __FLOAT_WORD_ORDER : libc :: c_uint = 1234 ; pub const LITTLE_ENDIAN : libc :: c_uint = 1234 ; pub const BIG_ENDIAN : libc :: c_uint = 4321 ; pub const PDP_ENDIAN : libc :: c_uint = 3412 ; pub const BYTE_ORDER : libc :: c_uint = 1234 ; pub const _BITS_BYTESWAP_H : libc :: c_uint = 1 ; pub const _BITS_UINTN_IDENTITY_H : libc :: c_uint = 1 ; pub const _SYS_SELECT_H : libc :: c_uint = 1 ; pub const __FD_ZERO_STOS : & 'static [ u8 ; 6usize ] = b"stosq\0" ; pub const __sigset_t_defined : libc :: c_uint = 1 ; pub const __timeval_defined : libc :: c_uint = 1 ; pub const _STRUCT_TIMESPEC : libc :: c_uint = 1 ; pub const FD_SETSIZE : libc :: c_uint = 1024 ; pub const _BITS_PTHREADTYPES_COMMON_H : libc :: c_uint = 1 ; pub const _THREAD_SHARED_TYPES_H : libc :: c_uint = 1 ; pub const _BITS_PTHREADTYPES_ARCH_H : libc :: c_uint = 1 ; pub const __SIZEOF_PTHREAD_MUTEX_T : libc :: c_uint = 40 ; pub const __SIZEOF_PTHREAD_ATTR_T : libc :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_RWLOCK_T : libc :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_BARRIER_T : libc :: c_uint = 32 ; pub const __SIZEOF_PTHREAD_MUTEXATTR_T : libc :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_COND_T : libc :: c_uint = 48 ; pub const __SIZEOF_PTHREAD_CONDATTR_T : libc :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_RWLOCKATTR_T : libc :: c_uint = 8 ; pub const __SIZEOF_PTHREAD_BARRIERATTR_T : libc :: c_uint = 4 ; pub const __PTHREAD_MUTEX_LOCK_ELISION : libc :: c_uint = 1 ; pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND : libc :: c_uint = 0 ; pub const __PTHREAD_MUTEX_USE_UNION : libc :: c_uint = 0 ; pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED : libc :: c_uint = 1 ; pub const __PTHREAD_MUTEX_HAVE_PREV : libc :: c_uint = 1 ; pub const __have_pthread_attr_t : libc :: c_uint = 1 ; pub const _ALLOCA_H : libc :: c_uint = 1 ; pub const _STDINT_H : libc :: c_uint = 1 ; pub const _BITS_WCHAR_H : libc :: c_uint = 1 ; pub const __WCHAR_MAX : libc :: c_uint = 2147483647 ; pub const __WCHAR_MIN : libc :: c_int = -2147483648 ; pub const _BITS_STDINT_UINTN_H : libc :: c_uint = 1 ; pub const INT8_MIN : libc :: c_int = -128 ; pub const INT16_MIN : libc :: c_int = -32768 ; pub const INT32_MIN : libc :: c_int = -2147483648 ; pub const INT8_MAX : libc :: c_uint = 127 ; pub const INT16_MAX : libc :: c_uint = 32767 ; pub const INT32_MAX : libc :: c_uint = 2147483647 ; pub const UINT8_MAX : libc :: c_uint = 255 ; pub const UINT16_MAX : libc :: c_uint = 65535 ; pub const UINT32_MAX : libc :: c_uint = 4294967295 ; pub const INT_LEAST8_MIN : libc :: c_int = -128 ; pub const INT_LEAST16_MIN : libc :: c_int = -32768 ; pub const INT_LEAST32_MIN : libc :: c_int = -2147483648 ; pub const INT_LEAST8_MAX : libc :: c_uint = 127 ; pub const INT_LEAST16_MAX : libc :: c_uint = 32767 ; pub const INT_LEAST32_MAX : libc :: c_uint = 2147483647 ; pub const UINT_LEAST8_MAX : libc :: c_uint = 255 ; pub const UINT_LEAST16_MAX : libc :: c_uint = 65535 ; pub const UINT_LEAST32_MAX : libc :: c_uint = 4294967295 ; pub const INT_FAST8_MIN : libc :: c_int = -128 ; pub const INT_FAST16_MIN : libc :: c_longlong = -9223372036854775808 ; pub const INT_FAST32_MIN : libc :: c_longlong = -9223372036854775808 ; pub const INT_FAST8_MAX : libc :: c_uint = 127 ; pub const INT_FAST16_MAX : libc :: c_ulonglong = 9223372036854775807 ; pub const INT_FAST32_MAX : libc :: c_ulonglong = 9223372036854775807 ; pub const UINT_FAST8_MAX : libc :: c_uint = 255 ; pub const UINT_FAST16_MAX : libc :: c_int = -1 ; pub const UINT_FAST32_MAX : libc :: c_int = -1 ; pub const INTPTR_MIN : libc :: c_longlong = -9223372036854775808 ; pub const INTPTR_MAX : libc :: c_ulonglong = 9223372036854775807 ; pub const UINTPTR_MAX : libc :: c_int = -1 ; pub const PTRDIFF_MIN : libc :: c_longlong = -9223372036854775808 ; pub const PTRDIFF_MAX : libc :: c_ulonglong = 9223372036854775807 ; pub const SIG_ATOMIC_MIN : libc :: c_int = -2147483648 ; pub const SIG_ATOMIC_MAX : libc :: c_uint = 2147483647 ; pub const SIZE_MAX : libc :: c_int = -1 ; pub const WCHAR_MIN : libc :: c_int = -2147483648 ; pub const WCHAR_MAX : libc :: c_uint = 2147483647 ; pub const WINT_MIN : libc :: c_uint = 0 ; pub const WINT_MAX : libc :: c_uint = 4294967295 ; pub const INT8_WIDTH : libc :: c_uint = 8 ; pub const UINT8_WIDTH : libc :: c_uint = 8 ; pub const INT16_WIDTH : libc :: c_uint = 16 ; pub const UINT16_WIDTH : libc :: c_uint = 16 ; pub const INT32_WIDTH : libc :: c_uint = 32 ; pub const UINT32_WIDTH : libc :: c_uint = 32 ; pub const INT64_WIDTH : libc :: c_uint = 64 ; pub const UINT64_WIDTH : libc :: c_uint = 64 ; pub const INT_LEAST8_WIDTH : libc :: c_uint = 8 ; pub const UINT_LEAST8_WIDTH : libc :: c_uint = 8 ; pub const INT_LEAST16_WIDTH : libc :: c_uint = 16 ; pub const UINT_LEAST16_WIDTH : libc :: c_uint = 16 ; pub const INT_LEAST32_WIDTH : libc :: c_uint = 32 ; pub const UINT_LEAST32_WIDTH : libc :: c_uint = 32 ; pub const INT_LEAST64_WIDTH : libc :: c_uint = 64 ; pub const UINT_LEAST64_WIDTH : libc :: c_uint = 64 ; pub const INT_FAST8_WIDTH : libc :: c_uint = 8 ; pub const UINT_FAST8_WIDTH : libc :: c_uint = 8 ; pub const INT_FAST16_WIDTH : libc :: c_uint = 64 ; pub const UINT_FAST16_WIDTH : libc :: c_uint = 64 ; pub const INT_FAST32_WIDTH : libc :: c_uint = 64 ; pub const UINT_FAST32_WIDTH : libc :: c_uint = 64 ; pub const INT_FAST64_WIDTH : libc :: c_uint = 64 ; pub const UINT_FAST64_WIDTH : libc :: c_uint = 64 ; pub const INTPTR_WIDTH : libc :: c_uint = 64 ; pub const UINTPTR_WIDTH : libc :: c_uint = 64 ; pub const INTMAX_WIDTH : libc :: c_uint = 64 ; pub const UINTMAX_WIDTH : libc :: c_uint = 64 ; pub const PTRDIFF_WIDTH : libc :: c_uint = 64 ; pub const SIG_ATOMIC_WIDTH : libc :: c_uint = 32 ; pub const SIZE_WIDTH : libc :: c_uint = 64 ; pub const WCHAR_WIDTH : libc :: c_uint = 32 ; pub const WINT_WIDTH : libc :: c_uint = 32 ; pub const _MATH_H : libc :: c_uint = 1 ; pub const _BITS_LIBM_SIMD_DECL_STUBS_H : libc :: c_uint = 1 ; pub const __GLIBC_FLT_EVAL_METHOD : libc :: c_uint = 0 ; pub const __FP_LOGB0_IS_MIN : libc :: c_uint = 1 ; pub const __FP_LOGBNAN_IS_MIN : libc :: c_uint = 1 ; pub const FP_ILOGB0 : libc :: c_int = -2147483648 ; pub const FP_ILOGBNAN : libc :: c_int = -2147483648 ; pub const __FP_LONG_MAX : libc :: c_ulonglong = 9223372036854775807 ; pub const FP_LLOGB0 : libc :: c_longlong = -9223372036854775808 ; pub const FP_LLOGBNAN : libc :: c_longlong = -9223372036854775808 ; pub const __MATH_DECLARING_DOUBLE : libc :: c_uint = 1 ; pub const __MATH_DECLARING_FLOATN : libc :: c_uint = 0 ; pub const __MATH_DECLARE_LDOUBLE : libc :: c_uint = 1 ; pub const MATH_ERRNO : libc :: c_uint = 1 ; pub const MATH_ERREXCEPT : libc :: c_uint = 2 ; pub const math_errhandling : libc :: c_uint = 3 ; pub const M_E : f64 = 2.718281828459045 ; pub const M_LOG2E : f64 = 1.4426950408889634 ; pub const M_LOG10E : f64 = 0.4342944819032518 ; pub const M_LN2 : f64 = 0.6931471805599453 ; pub const M_LN10 : f64 = 2.302585092994046 ; pub const M_PI : f64 = 3.141592653589793 ; pub const M_PI_2 : f64 = 1.5707963267948966 ; pub const M_PI_4 : f64 = 0.7853981633974483 ; pub const M_1_PI : f64 = 0.3183098861837907 ; pub const M_2_PI : f64 = 0.6366197723675814 ; pub const M_2_SQRTPI : f64 = 1.1283791670955126 ; pub const M_SQRT2 : f64 = 1.4142135623730951 ; pub const M_SQRT1_2 : f64 = 0.7071067811865476 ; pub const M_El : f64 = 2.718281828459045 ; pub const M_LOG2El : f64 = 1.4426950408889634 ; pub const M_LOG10El : f64 = 0.4342944819032518 ; pub const M_LN2l : f64 = 0.6931471805599453 ; pub const M_LN10l : f64 = 2.302585092994046 ; pub const M_PIl : f64 = 3.141592653589793 ; pub const M_PI_2l : f64 = 1.5707963267948966 ; pub const M_PI_4l : f64 = 0.7853981633974483 ; pub const M_1_PIl : f64 = 0.3183098861837907 ; pub const M_2_PIl : f64 = 0.6366197723675814 ; pub const M_2_SQRTPIl : f64 = 1.1283791670955126 ; pub const M_SQRT2l : f64 = 1.4142135623730951 ; pub const M_SQRT1_2l : f64 = 0.7071067811865476 ; pub const _TIME_H : libc :: c_uint = 1 ; pub const _BITS_TIME_H : libc :: c_uint = 1 ; pub const CLOCK_REALTIME : libc :: c_uint = 0 ; pub const CLOCK_MONOTONIC : libc :: c_uint = 1 ; pub const CLOCK_PROCESS_CPUTIME_ID : libc :: c_uint = 2 ; pub const CLOCK_THREAD_CPUTIME_ID : libc :: c_uint = 3 ; pub const CLOCK_MONOTONIC_RAW : libc :: c_uint = 4 ; pub const CLOCK_REALTIME_COARSE : libc :: c_uint = 5 ; pub const CLOCK_MONOTONIC_COARSE : libc :: c_uint = 6 ; pub const CLOCK_BOOTTIME : libc :: c_uint = 7 ; pub const CLOCK_REALTIME_ALARM : libc :: c_uint = 8 ; pub const CLOCK_BOOTTIME_ALARM : libc :: c_uint = 9 ; pub const CLOCK_TAI : libc :: c_uint = 11 ; pub const TIMER_ABSTIME : libc :: c_uint = 1 ; pub const _BITS_TIMEX_H : libc :: c_uint = 1 ; pub const ADJ_OFFSET : libc :: c_uint = 1 ; pub const ADJ_FREQUENCY : libc :: c_uint = 2 ; pub const ADJ_MAXERROR : libc :: c_uint = 4 ; pub const ADJ_ESTERROR : libc :: c_uint = 8 ; pub const ADJ_STATUS : libc :: c_uint = 16 ; pub const ADJ_TIMECONST : libc :: c_uint = 32 ; pub const ADJ_TAI : libc :: c_uint = 128 ; pub const ADJ_SETOFFSET : libc :: c_uint = 256 ; pub const ADJ_MICRO : libc :: c_uint = 4096 ; pub const ADJ_NANO : libc :: c_uint = 8192 ; pub const ADJ_TICK : libc :: c_uint = 16384 ; pub const ADJ_OFFSET_SINGLESHOT : libc :: c_uint = 32769 ; pub const ADJ_OFFSET_SS_READ : libc :: c_uint = 40961 ; pub const MOD_OFFSET : libc :: c_uint = 1 ; pub const MOD_FREQUENCY : libc :: c_uint = 2 ; pub const MOD_MAXERROR : libc :: c_uint = 4 ; pub const MOD_ESTERROR : libc :: c_uint = 8 ; pub const MOD_STATUS : libc :: c_uint = 16 ; pub const MOD_TIMECONST : libc :: c_uint = 32 ; pub const MOD_CLKB : libc :: c_uint = 16384 ; pub const MOD_CLKA : libc :: c_uint = 32769 ; pub const MOD_TAI : libc :: c_uint = 128 ; pub const MOD_MICRO : libc :: c_uint = 4096 ; pub const MOD_NANO : libc :: c_uint = 8192 ; pub const STA_PLL : libc :: c_uint = 1 ; pub const STA_PPSFREQ : libc :: c_uint = 2 ; pub const STA_PPSTIME : libc :: c_uint = 4 ; pub const STA_FLL : libc :: c_uint = 8 ; pub const STA_INS : libc :: c_uint = 16 ; pub const STA_DEL : libc :: c_uint = 32 ; pub const STA_UNSYNC : libc :: c_uint = 64 ; pub const STA_FREQHOLD : libc :: c_uint = 128 ; pub const STA_PPSSIGNAL : libc :: c_uint = 256 ; pub const STA_PPSJITTER : libc :: c_uint = 512 ; pub const STA_PPSWANDER : libc :: c_uint = 1024 ; pub const STA_PPSERROR : libc :: c_uint = 2048 ; pub const STA_CLOCKERR : libc :: c_uint = 4096 ; pub const STA_NANO : libc :: c_uint = 8192 ; pub const STA_MODE : libc :: c_uint = 16384 ; pub const STA_CLK : libc :: c_uint = 32768 ; pub const STA_RONLY : libc :: c_uint = 65280 ; pub const __struct_tm_defined : libc :: c_uint = 1 ; pub const __itimerspec_defined : libc :: c_uint = 1 ; pub const TIME_UTC : libc :: c_uint = 1 ; pub const MagickWandSignature : libc :: c_uint = 2880220587 ; pub const MagickPathExtent : libc :: c_uint = 4096 ; pub const MagickCoreSignature : libc :: c_uint = 2880220587 ; pub const MaxTextExtent : libc :: c_uint = 4096 ; pub const MaxColormapSize : libc :: c_uint = 65536 ; pub const MaxMap : libc :: c_uint = 65535 ; pub const QuantumRange : f64 = 65535. ; pub const QuantumFormat : & 'static [ u8 ; 3usize ] = b"%g\0" ; pub const MagickOffsetFormat : & 'static [ u8 ; 4usize ] = b"lld\0" ; pub const MagickSizeFormat : & 'static [ u8 ; 4usize ] = b"llu\0" ; pub const MagickMaxBufferExtent : libc :: c_uint = 81920 ; pub const MagickMinBufferExtent : libc :: c_uint = 16384 ; pub const MaxPixelChannels : libc :: c_uint = 32 ; pub const FLT_EVAL_METHOD : libc :: c_uint = 0 ; pub const FLT_RADIX : libc :: c_uint = 2 ; pub const FLT_MANT_DIG : libc :: c_uint = 24 ; pub const DBL_MANT_DIG : libc :: c_uint = 53 ; pub const LDBL_MANT_DIG : libc :: c_uint = 64 ; pub const DECIMAL_DIG : libc :: c_uint = 21 ; pub const FLT_DIG : libc :: c_uint = 6 ; pub const DBL_DIG : libc :: c_uint = 15 ; pub const LDBL_DIG : libc :: c_uint = 18 ; pub const FLT_MIN_EXP : libc :: c_int = -125 ; pub const DBL_MIN_EXP : libc :: c_int = -1021 ; pub const LDBL_MIN_EXP : libc :: c_int = -16381 ; pub const FLT_MIN_10_EXP : libc :: c_int = -37 ; pub const DBL_MIN_10_EXP : libc :: c_int = -307 ; pub const LDBL_MIN_10_EXP : libc :: c_int = -4931 ; pub const FLT_MAX_EXP : libc :: c_uint = 128 ; pub const DBL_MAX_EXP : libc :: c_uint = 1024 ; pub const LDBL_MAX_EXP : libc :: c_uint = 16384 ; pub const FLT_MAX_10_EXP : libc :: c_uint = 38 ; pub const DBL_MAX_10_EXP : libc :: c_uint = 308 ; pub const LDBL_MAX_10_EXP : libc :: c_uint = 4932 ; pub const FLT_DECIMAL_DIG : libc :: c_uint = 9 ; pub const DBL_DECIMAL_DIG : libc :: c_uint = 17 ; pub const LDBL_DECIMAL_DIG : libc :: c_uint = 21 ; pub const MagickLogFilename : & 'static [ u8 ; 8usize ] = b"log.xml\0" ; pub const _ERRNO_H : libc :: c_uint = 1 ; pub const _BITS_ERRNO_H : libc :: c_uint = 1 ; pub const EPERM : libc :: c_uint = 1 ; pub const ENOENT : libc :: c_uint = 2 ; pub const ESRCH : libc :: c_uint = 3 ; pub const EINTR : libc :: c_uint = 4 ; pub const EIO : libc :: c_uint = 5 ; pub const ENXIO : libc :: c_uint = 6 ; pub const E2BIG : libc :: c_uint = 7 ; pub const ENOEXEC : libc :: c_uint = 8 ; pub const EBADF : libc :: c_uint = 9 ; pub const ECHILD : libc :: c_uint = 10 ; pub const EAGAIN : libc :: c_uint = 11 ; pub const ENOMEM : libc :: c_uint = 12 ; pub const EACCES : libc :: c_uint = 13 ; pub const EFAULT : libc :: c_uint = 14 ; pub const ENOTBLK : libc :: c_uint = 15 ; pub const EBUSY : libc :: c_uint = 16 ; pub const EEXIST : libc :: c_uint = 17 ; pub const EXDEV : libc :: c_uint = 18 ; pub const ENODEV : libc :: c_uint = 19 ; pub const ENOTDIR : libc :: c_uint = 20 ; pub const EISDIR : libc :: c_uint = 21 ; pub const EINVAL : libc :: c_uint = 22 ; pub const ENFILE : libc :: c_uint = 23 ; pub const EMFILE : libc :: c_uint = 24 ; pub const ENOTTY : libc :: c_uint = 25 ; pub const ETXTBSY : libc :: c_uint = 26 ; pub const EFBIG : libc :: c_uint = 27 ; pub const ENOSPC : libc :: c_uint = 28 ; pub const ESPIPE : libc :: c_uint = 29 ; pub const EROFS : libc :: c_uint = 30 ; pub const EMLINK : libc :: c_uint = 31 ; pub const EPIPE : libc :: c_uint = 32 ; pub const EDOM : libc :: c_uint = 33 ; pub const ERANGE : libc :: c_uint = 34 ; pub const EDEADLK : libc :: c_uint = 35 ; pub const ENAMETOOLONG : libc :: c_uint = 36 ; pub const ENOLCK : libc :: c_uint = 37 ; pub const ENOSYS : libc :: c_uint = 38 ; pub const ENOTEMPTY : libc :: c_uint = 39 ; pub const ELOOP : libc :: c_uint = 40 ; pub const EWOULDBLOCK : libc :: c_uint = 11 ; pub const ENOMSG : libc :: c_uint = 42 ; pub const EIDRM : libc :: c_uint = 43 ; pub const ECHRNG : libc :: c_uint = 44 ; pub const EL2NSYNC : libc :: c_uint = 45 ; pub const EL3HLT : libc :: c_uint = 46 ; pub const EL3RST : libc :: c_uint = 47 ; pub const ELNRNG : libc :: c_uint = 48 ; pub const EUNATCH : libc :: c_uint = 49 ; pub const ENOCSI : libc :: c_uint = 50 ; pub const EL2HLT : libc :: c_uint = 51 ; pub const EBADE : libc :: c_uint = 52 ; pub const EBADR : libc :: c_uint = 53 ; pub const EXFULL : libc :: c_uint = 54 ; pub const ENOANO : libc :: c_uint = 55 ; pub const EBADRQC : libc :: c_uint = 56 ; pub const EBADSLT : libc :: c_uint = 57 ; pub const EDEADLOCK : libc :: c_uint = 35 ; pub const EBFONT : libc :: c_uint = 59 ; pub const ENOSTR : libc :: c_uint = 60 ; pub const ENODATA : libc :: c_uint = 61 ; pub const ETIME : libc :: c_uint = 62 ; pub const ENOSR : libc :: c_uint = 63 ; pub const ENONET : libc :: c_uint = 64 ; pub const ENOPKG : libc :: c_uint = 65 ; pub const EREMOTE : libc :: c_uint = 66 ; pub const ENOLINK : libc :: c_uint = 67 ; pub const EADV : libc :: c_uint = 68 ; pub const ESRMNT : libc :: c_uint = 69 ; pub const ECOMM : libc :: c_uint = 70 ; pub const EPROTO : libc :: c_uint = 71 ; pub const EMULTIHOP : libc :: c_uint = 72 ; pub const EDOTDOT : libc :: c_uint = 73 ; pub const EBADMSG : libc :: c_uint = 74 ; pub const EOVERFLOW : libc :: c_uint = 75 ; pub const ENOTUNIQ : libc :: c_uint = 76 ; pub const EBADFD : libc :: c_uint = 77 ; pub const EREMCHG : libc :: c_uint = 78 ; pub const ELIBACC : libc :: c_uint = 79 ; pub const ELIBBAD : libc :: c_uint = 80 ; pub const ELIBSCN : libc :: c_uint = 81 ; pub const ELIBMAX : libc :: c_uint = 82 ; pub const ELIBEXEC : libc :: c_uint = 83 ; pub const EILSEQ : libc :: c_uint = 84 ; pub const ERESTART : libc :: c_uint = 85 ; pub const ESTRPIPE : libc :: c_uint = 86 ; pub const EUSERS : libc :: c_uint = 87 ; pub const ENOTSOCK : libc :: c_uint = 88 ; pub const EDESTADDRREQ : libc :: c_uint = 89 ; pub const EMSGSIZE : libc :: c_uint = 90 ; pub const EPROTOTYPE : libc :: c_uint = 91 ; pub const ENOPROTOOPT : libc :: c_uint = 92 ; pub const EPROTONOSUPPORT : libc :: c_uint = 93 ; pub const ESOCKTNOSUPPORT : libc :: c_uint = 94 ; pub const EOPNOTSUPP : libc :: c_uint = 95 ; pub const EPFNOSUPPORT : libc :: c_uint = 96 ; pub const EAFNOSUPPORT : libc :: c_uint = 97 ; pub const EADDRINUSE : libc :: c_uint = 98 ; pub const EADDRNOTAVAIL : libc :: c_uint = 99 ; pub const ENETDOWN : libc :: c_uint = 100 ; pub const ENETUNREACH : libc :: c_uint = 101 ; pub const ENETRESET : libc :: c_uint = 102 ; pub const ECONNABORTED : libc :: c_uint = 103 ; pub const ECONNRESET : libc :: c_uint = 104 ; pub const ENOBUFS : libc :: c_uint = 105 ; pub const EISCONN : libc :: c_uint = 106 ; pub const ENOTCONN : libc :: c_uint = 107 ; pub const ESHUTDOWN : libc :: c_uint = 108 ; pub const ETOOMANYREFS : libc :: c_uint = 109 ; pub const ETIMEDOUT : libc :: c_uint = 110 ; pub const ECONNREFUSED : libc :: c_uint = 111 ; pub const EHOSTDOWN : libc :: c_uint = 112 ; pub const EHOSTUNREACH : libc :: c_uint = 113 ; pub const EALREADY : libc :: c_uint = 114 ; pub const EINPROGRESS : libc :: c_uint = 115 ; pub const ESTALE : libc :: c_uint = 116 ; pub const EUCLEAN : libc :: c_uint = 117 ; pub const ENOTNAM : libc :: c_uint = 118 ; pub const ENAVAIL : libc :: c_uint = 119 ; pub const EISNAM : libc :: c_uint = 120 ; pub const EREMOTEIO : libc :: c_uint = 121 ; pub const EDQUOT : libc :: c_uint = 122 ; pub const ENOMEDIUM : libc :: c_uint = 123 ; pub const EMEDIUMTYPE : libc :: c_uint = 124 ; pub const ECANCELED : libc :: c_uint = 125 ; pub const ENOKEY : libc :: c_uint = 126 ; pub const EKEYEXPIRED : libc :: c_uint = 127 ; pub const EKEYREVOKED : libc :: c_uint = 128 ; pub const EKEYREJECTED : libc :: c_uint = 129 ; pub const EOWNERDEAD : libc :: c_uint = 130 ; pub const ENOTRECOVERABLE : libc :: c_uint = 131 ; pub const ERFKILL : libc :: c_uint = 132 ; pub const EHWPOISON : libc :: c_uint = 133 ; pub const ENOTSUP : libc :: c_uint = 95 ; pub const __error_t_defined : libc :: c_uint = 1 ; pub const _ASSERT_H : libc :: c_uint = 1 ; pub const MagickPackageName : & 'static [ u8 ; 12usize ] = b"ImageMagick\0" ; pub const MagickCopyright : & 'static [ u8 ; 36usize ] = b"\xC2\xA9 1999-2020 ImageMagick Studio LLC\0" ; pub const MagickLibVersion : libc :: c_uint = 1801 ; pub const MagickLibVersionText : & 'static [ u8 ; 6usize ] = b"7.0.9\0" ; pub const MagickLibAddendum : & 'static [ u8 ; 4usize ] = b"-25\0" ; pub const MagickLibInterface : libc :: c_uint = 7 ; pub const MagickLibMinInterface : libc :: c_uint = 7 ; pub const MagickPlatform : & 'static [ u8 ; 7usize ] = b"x86_64\0" ; pub const MagickppLibVersionText : & 'static [ u8 ; 6usize ] = b"7.0.9\0" ; pub const MagickppLibAddendum : & 'static [ u8 ; 4usize ] = b"-25\0" ; pub const MagickppLibInterface : libc :: c_uint = 4 ; pub const MagickppLibMinInterface : libc :: c_uint = 4 ; pub const MagickReleaseDate : & 'static [ u8 ; 11usize ] = b"2020-02-23\0" ; pub const MagickAuthoritativeLicense : & 'static [ u8 ; 43usize ] = b"https://imagemagick.org/script/license.php\0" ; pub const MagickAuthoritativeURL : & 'static [ u8 ; 24usize ] = b"https://imagemagick.org\0" ; pub const MagickHomeURL : & 'static [ u8 ; 53usize ] = b"file:///usr/local/share/doc/ImageMagick-7/index.html\0" ; pub const MagickQuantumDepth : & 'static [ u8 ; 4usize ] = b"Q16\0" ; pub const MagickQuantumRange : & 'static [ u8 ; 6usize ] = b"65535\0" ; pub const MagickVersion : & 'static [ u8 ; 67usize ] = b"ImageMagick 7.0.9-25 Q16 x86_64 2020-02-23 https://imagemagick.org\0" ; pub const MaximumNumberOfImageMoments : libc :: c_uint = 8 ; pub const MaximumNumberOfPerceptualColorspaces : libc :: c_uint = 6 ; pub const MaximumNumberOfPerceptualHashes : libc :: c_uint = 7 ; pub const CCMaxMetrics : libc :: c_uint = 16 ; pub type va_list = __builtin_va_list ; pub type __gnuc_va_list = __builtin_va_list ; pub type __u_char = libc :: c_uchar ; pub type __u_short = libc :: c_ushort ; pub type __u_int = libc :: c_uint ; pub type __u_long = libc :: c_ulong ; pub type __int8_t = libc :: c_schar ; pub type __uint8_t = libc :: c_uchar ; pub type __int16_t = libc :: c_short ; pub type __uint16_t = libc :: c_ushort ; pub type __int32_t = libc :: c_int ; pub type __uint32_t = libc :: c_uint ; pub type __int64_t = libc :: c_long ; pub type __uint64_t = libc :: c_ulong ; pub type __int_least8_t = __int8_t ; pub type __uint_least8_t = __uint8_t ; pub type __int_least16_t = __int16_t ; pub type __uint_least16_t = __uint16_t ; pub type __int_least32_t = __int32_t ; pub type __uint_least32_t = __uint32_t ; pub type __int_least64_t = __int64_t ; pub type __uint_least64_t = __uint64_t ; pub type __quad_t = libc :: c_long ; pub type __u_quad_t = libc :: c_ulong ; pub type __intmax_t = libc :: c_long ; pub type __uintmax_t = libc :: c_ulong ; pub type __dev_t = libc :: c_ulong ; pub type __uid_t = libc :: c_uint ; pub type __gid_t = libc :: c_uint ; pub type __ino_t = libc :: c_ulong ; pub type __ino64_t = libc :: c_ulong ; pub type __mode_t = libc :: c_uint ; pub type __nlink_t = libc :: c_ulong ; pub type __off_t = libc :: c_long ; pub type __off64_t = libc :: c_long ; pub type __pid_t = libc :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ libc :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type __clock_t = libc :: c_long ; pub type __rlim_t = libc :: c_ulong ; pub type __rlim64_t = libc :: c_ulong ; pub type __id_t = libc :: c_uint ; pub type __time_t = libc :: c_long ; pub type __useconds_t = libc :: c_uint ; pub type __suseconds_t = libc :: c_long ; pub type __daddr_t = libc :: c_int ; pub type __key_t = libc :: c_int ; pub type __clockid_t = libc :: c_int ; pub type __timer_t = * mut libc :: c_void ; pub type __blksize_t = libc :: c_long ; pub type __blkcnt_t = libc :: c_long ; pub type __blkcnt64_t = libc :: c_long ; pub type __fsblkcnt_t = libc :: c_ulong ; pub type __fsblkcnt64_t = libc :: c_ulong ; pub type __fsfilcnt_t = libc :: c_ulong ; pub type __fsfilcnt64_t = libc :: c_ulong ; pub type __fsword_t = libc :: c_long ; pub type __ssize_t = libc :: c_long ; pub type __syscall_slong_t = libc :: c_long ; pub type __syscall_ulong_t = libc :: c_ulong ; pub type __loff_t = __off64_t ; pub type __caddr_t = * mut libc :: c_char ; pub type __intptr_t = libc :: c_long ; pub type __socklen_t = libc :: c_uint ; pub type __sig_atomic_t = libc :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __mbstate_t { pub __count : libc :: c_int , pub __value : __mbstate_t__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t__bindgen_ty_1 { pub __wch : libc :: c_uint , pub __wchb : [ libc :: c_char ; 4usize ] , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout___mbstate_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb ) ) ) ; } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos_t { pub __pos : __off_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type __fpos_t = _G_fpos_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _G_fpos64_t { pub __pos : __off64_t , pub __state : __mbstate_t , } # [ test ] fn bindgen_test_layout__G_fpos64_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _G_fpos64_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _G_fpos64_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _G_fpos64_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __pos ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" , stringify ! ( __state ) ) ) ; } pub type __fpos64_t = _G_fpos64_t ; pub type __FILE = _IO_FILE ; pub type FILE = _IO_FILE ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_marker { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_codecvt { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_wide_data { _unused : [ u8 ; 0 ] } pub type _IO_lock_t = libc :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_FILE { pub _flags : libc :: c_int , pub _IO_read_ptr : * mut libc :: c_char , pub _IO_read_end : * mut libc :: c_char , pub _IO_read_base : * mut libc :: c_char , pub _IO_write_base : * mut libc :: c_char , pub _IO_write_ptr : * mut libc :: c_char , pub _IO_write_end : * mut libc :: c_char , pub _IO_buf_base : * mut libc :: c_char , pub _IO_buf_end : * mut libc :: c_char , pub _IO_save_base : * mut libc :: c_char , pub _IO_backup_base : * mut libc :: c_char , pub _IO_save_end : * mut libc :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : libc :: c_int , pub _flags2 : libc :: c_int , pub _old_offset : __off_t , pub _cur_column : libc :: c_ushort , pub _vtable_offset : libc :: c_schar , pub _shortbuf : [ libc :: c_char ; 1usize ] , pub _lock : * mut _IO_lock_t , pub _offset : __off64_t , pub _codecvt : * mut _IO_codecvt , pub _wide_data : * mut _IO_wide_data , pub _freeres_list : * mut _IO_FILE , pub _freeres_buf : * mut libc :: c_void , pub __pad5 : usize , pub _mode : libc :: c_int , pub _unused2 : [ libc :: c_char ; 20usize ] , } # [ test ] fn bindgen_test_layout__IO_FILE ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_FILE > ( ) , 216usize , concat ! ( "Size of: " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_FILE > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_FILE ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_read_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_write_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_buf_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_backup_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _IO_save_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _markers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _chain ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _fileno ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _flags2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _old_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _cur_column ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const _ as usize } , 130usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _vtable_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as usize } , 131usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _shortbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _codecvt as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _codecvt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _wide_data as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _wide_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _freeres_list as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _freeres_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _freeres_buf as * const _ as usize } , 176usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _freeres_buf ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( __pad5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as usize } , 196usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" , stringify ! ( _unused2 ) ) ) ; } pub type cookie_read_function_t = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut libc :: c_void , __buf : * mut libc :: c_char , __nbytes : usize ) -> __ssize_t > ; pub type cookie_write_function_t = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut libc :: c_void , __buf : * const libc :: c_char , __nbytes : usize ) -> __ssize_t > ; pub type cookie_seek_function_t = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut libc :: c_void , __pos : * mut __off64_t , __w : libc :: c_int ) -> libc :: c_int > ; pub type cookie_close_function_t = :: std :: option :: Option < unsafe extern "C" fn ( __cookie : * mut libc :: c_void ) -> libc :: c_int > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _IO_cookie_io_functions_t { pub read : cookie_read_function_t , pub write : cookie_write_function_t , pub seek : cookie_seek_function_t , pub close : cookie_close_function_t , } # [ test ] fn bindgen_test_layout__IO_cookie_io_functions_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _IO_cookie_io_functions_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _IO_cookie_io_functions_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _IO_cookie_io_functions_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _IO_cookie_io_functions_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . read as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_cookie_io_functions_t ) , "::" , stringify ! ( read ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . write as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_cookie_io_functions_t ) , "::" , stringify ! ( write ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . seek as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_cookie_io_functions_t ) , "::" , stringify ! ( seek ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _IO_cookie_io_functions_t ) ) . close as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _IO_cookie_io_functions_t ) , "::" , stringify ! ( close ) ) ) ; } pub type cookie_io_functions_t = _IO_cookie_io_functions_t ; pub type off_t = __off_t ; pub type off64_t = __off64_t ; pub type fpos_t = __fpos_t ; pub type fpos64_t = __fpos64_t ; extern "C" {
 # [ link_name = "\u{1}stdin" ] 
 pub static mut  stdin  :  * mut FILE ;
} extern "C" {
 # [ link_name = "\u{1}stdout" ] 
 pub static mut  stdout  :  * mut FILE ;
} extern "C" {
 # [ link_name = "\u{1}stderr" ] 
 pub static mut  stderr  :  * mut FILE ;
} extern "C" {
 pub fn remove ( __filename : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn rename ( __old : * const libc :: c_char , __new : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn renameat ( __oldfd : libc :: c_int , __old : * const libc :: c_char , __newfd : libc :: c_int , __new : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn renameat2 ( __oldfd : libc :: c_int , __old : * const libc :: c_char , __newfd : libc :: c_int , __new : * const libc :: c_char , __flags : libc :: c_uint , ) -> libc :: c_int ; 
} extern "C" {
 pub fn tmpfile ( ) -> * mut FILE ; 
} extern "C" {
 pub fn tmpfile64 ( ) -> * mut FILE ; 
} extern "C" {
 pub fn tmpnam ( __s : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn tmpnam_r ( __s : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn tempnam ( __dir : * const libc :: c_char , __pfx : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn fclose ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fflush ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fflush_unlocked ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fcloseall ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn fopen ( __filename : * const libc :: c_char , __modes : * const libc :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn freopen ( __filename : * const libc :: c_char , __modes : * const libc :: c_char , __stream : * mut FILE , ) -> * mut FILE ; 
} extern "C" {
 pub fn fopen64 ( __filename : * const libc :: c_char , __modes : * const libc :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn freopen64 ( __filename : * const libc :: c_char , __modes : * const libc :: c_char , __stream : * mut FILE , ) -> * mut FILE ; 
} extern "C" {
 pub fn fdopen ( __fd : libc :: c_int , __modes : * const libc :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn fopencookie ( __magic_cookie : * mut libc :: c_void , __modes : * const libc :: c_char , __io_funcs : cookie_io_functions_t , ) -> * mut FILE ; 
} extern "C" {
 pub fn fmemopen ( __s : * mut libc :: c_void , __len : usize , __modes : * const libc :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn open_memstream ( __bufloc : * mut * mut libc :: c_char , __sizeloc : * mut usize , ) -> * mut FILE ; 
} extern "C" {
 pub fn setbuf ( __stream : * mut FILE , __buf : * mut libc :: c_char , ) ; 
} extern "C" {
 pub fn setvbuf ( __stream : * mut FILE , __buf : * mut libc :: c_char , __modes : libc :: c_int , __n : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setbuffer ( __stream : * mut FILE , __buf : * mut libc :: c_char , __size : usize , ) ; 
} extern "C" {
 pub fn setlinebuf ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn fprintf ( __stream : * mut FILE , __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn printf ( __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn sprintf ( __s : * mut libc :: c_char , __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn vfprintf ( __s : * mut FILE , __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn vprintf ( __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn vsprintf ( __s : * mut libc :: c_char , __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn snprintf ( __s : * mut libc :: c_char , __maxlen : usize , __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn vsnprintf ( __s : * mut libc :: c_char , __maxlen : usize , __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn vasprintf ( __ptr : * mut * mut libc :: c_char , __f : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __asprintf ( __ptr : * mut * mut libc :: c_char , __fmt : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn asprintf ( __ptr : * mut * mut libc :: c_char , __fmt : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn vdprintf ( __fd : libc :: c_int , __fmt : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn dprintf ( __fd : libc :: c_int , __fmt : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn fscanf ( __stream : * mut FILE , __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn scanf ( __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn sscanf ( __s : * const libc :: c_char , __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn vfscanf ( __s : * mut FILE , __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn vscanf ( __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn vsscanf ( __s : * const libc :: c_char , __format : * const libc :: c_char , __arg : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fgetc ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getc ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getchar ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn getc_unlocked ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getchar_unlocked ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn fgetc_unlocked ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fputc ( __c : libc :: c_int , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn putc ( __c : libc :: c_int , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn putchar ( __c : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fputc_unlocked ( __c : libc :: c_int , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn putc_unlocked ( __c : libc :: c_int , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn putchar_unlocked ( __c : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getw ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn putw ( __w : libc :: c_int , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fgets ( __s : * mut libc :: c_char , __n : libc :: c_int , __stream : * mut FILE , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn fgets_unlocked ( __s : * mut libc :: c_char , __n : libc :: c_int , __stream : * mut FILE , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn __getdelim ( __lineptr : * mut * mut libc :: c_char , __n : * mut usize , __delimiter : libc :: c_int , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn getdelim ( __lineptr : * mut * mut libc :: c_char , __n : * mut usize , __delimiter : libc :: c_int , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn getline ( __lineptr : * mut * mut libc :: c_char , __n : * mut usize , __stream : * mut FILE , ) -> __ssize_t ; 
} extern "C" {
 pub fn fputs ( __s : * const libc :: c_char , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn puts ( __s : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ungetc ( __c : libc :: c_int , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fread ( __ptr : * mut libc :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> libc :: c_ulong ; 
} extern "C" {
 pub fn fwrite ( __ptr : * const libc :: c_void , __size : usize , __n : usize , __s : * mut FILE , ) -> libc :: c_ulong ; 
} extern "C" {
 pub fn fputs_unlocked ( __s : * const libc :: c_char , __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fread_unlocked ( __ptr : * mut libc :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fwrite_unlocked ( __ptr : * const libc :: c_void , __size : usize , __n : usize , __stream : * mut FILE , ) -> usize ; 
} extern "C" {
 pub fn fseek ( __stream : * mut FILE , __off : libc :: c_long , __whence : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ftell ( __stream : * mut FILE , ) -> libc :: c_long ; 
} extern "C" {
 pub fn rewind ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn fseeko ( __stream : * mut FILE , __off : __off_t , __whence : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ftello ( __stream : * mut FILE , ) -> __off_t ; 
} extern "C" {
 pub fn fgetpos ( __stream : * mut FILE , __pos : * mut fpos_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fsetpos ( __stream : * mut FILE , __pos : * const fpos_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fseeko64 ( __stream : * mut FILE , __off : __off64_t , __whence : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ftello64 ( __stream : * mut FILE , ) -> __off64_t ; 
} extern "C" {
 pub fn fgetpos64 ( __stream : * mut FILE , __pos : * mut fpos64_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fsetpos64 ( __stream : * mut FILE , __pos : * const fpos64_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clearerr ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn feof ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ferror ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clearerr_unlocked ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn feof_unlocked ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ferror_unlocked ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn perror ( __s : * const libc :: c_char , ) ; 
} extern "C" {
 # [ link_name = "\u{1}sys_nerr" ] 
 pub static mut  sys_nerr  :  libc :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}sys_errlist" ] 
 pub static mut  sys_errlist  :  [ * const libc :: c_char ; 0usize ] ;
} extern "C" {
 # [ link_name = "\u{1}_sys_nerr" ] 
 pub static mut  _sys_nerr  :  libc :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}_sys_errlist" ] 
 pub static mut  _sys_errlist  :  [ * const libc :: c_char ; 0usize ] ;
} extern "C" {
 pub fn fileno ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fileno_unlocked ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn popen ( __command : * const libc :: c_char , __modes : * const libc :: c_char , ) -> * mut FILE ; 
} extern "C" {
 pub fn pclose ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ctermid ( __s : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn cuserid ( __s : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct obstack { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn obstack_printf ( __obstack : * mut obstack , __format : * const libc :: c_char , ... ) -> libc :: c_int ; 
} extern "C" {
 pub fn obstack_vprintf ( __obstack : * mut obstack , __format : * const libc :: c_char , __args : * mut __va_list_tag , ) -> libc :: c_int ; 
} extern "C" {
 pub fn flockfile ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn ftrylockfile ( __stream : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn funlockfile ( __stream : * mut FILE , ) ; 
} extern "C" {
 pub fn __uflow ( arg1 : * mut FILE , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __overflow ( arg1 : * mut FILE , arg2 : libc :: c_int , ) -> libc :: c_int ; 
} pub type wchar_t = libc :: c_int ; pub const idtype_t_P_ALL : idtype_t = 0 ; pub const idtype_t_P_PID : idtype_t = 1 ; pub const idtype_t_P_PGID : idtype_t = 2 ; pub type idtype_t = libc :: c_uint ; pub type _Float32 = f32 ; pub type _Float64 = f64 ; pub type _Float32x = f64 ; pub type _Float64x = f64 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct div_t { pub quot : libc :: c_int , pub rem : libc :: c_int , } # [ test ] fn bindgen_test_layout_div_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < div_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( div_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < div_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( div_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( div_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( div_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ldiv_t { pub quot : libc :: c_long , pub rem : libc :: c_long , } # [ test ] fn bindgen_test_layout_ldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lldiv_t { pub quot : libc :: c_longlong , pub rem : libc :: c_longlong , } # [ test ] fn bindgen_test_layout_lldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } extern "C" {
 pub fn __ctype_get_mb_cur_max ( ) -> usize ; 
} extern "C" {
 pub fn atof ( __nptr : * const libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn atoi ( __nptr : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn atol ( __nptr : * const libc :: c_char , ) -> libc :: c_long ; 
} extern "C" {
 pub fn atoll ( __nptr : * const libc :: c_char , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn strtod ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn strtof ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn strtold ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn strtof32 ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> _Float32 ; 
} extern "C" {
 pub fn strtof64 ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> _Float64 ; 
} extern "C" {
 pub fn strtof32x ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> _Float32x ; 
} extern "C" {
 pub fn strtof64x ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , ) -> _Float64x ; 
} extern "C" {
 pub fn strtol ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , ) -> libc :: c_long ; 
} extern "C" {
 pub fn strtoul ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , ) -> libc :: c_ulong ; 
} extern "C" {
 pub fn strtoq ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn strtouq ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , ) -> libc :: c_ulonglong ; 
} extern "C" {
 pub fn strtoll ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn strtoull ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , ) -> libc :: c_ulonglong ; 
} extern "C" {
 pub fn strfromd ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn strfromf ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn strfroml ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn strfromf32 ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn strfromf64 ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn strfromf32x ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn strfromf64x ( __dest : * mut libc :: c_char , __size : usize , __format : * const libc :: c_char , __f : _Float64x , ) -> libc :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __locale_struct { pub __locales : [ * mut __locale_data ; 13usize ] , pub __ctype_b : * const libc :: c_ushort , pub __ctype_tolower : * const libc :: c_int , pub __ctype_toupper : * const libc :: c_int , pub __names : [ * const libc :: c_char ; 13usize ] , } # [ test ] fn bindgen_test_layout___locale_struct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __locale_struct > ( ) , 232usize , concat ! ( "Size of: " , stringify ! ( __locale_struct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __locale_struct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __locale_struct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __locales as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __locales ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __ctype_b as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_b ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __ctype_tolower as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_tolower ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __ctype_toupper as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __ctype_toupper ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __locale_struct ) ) . __names as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( __locale_struct ) , "::" , stringify ! ( __names ) ) ) ; } pub type __locale_t = * mut __locale_struct ; pub type locale_t = __locale_t ; extern "C" {
 pub fn strtol_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , __loc : locale_t , ) -> libc :: c_long ; 
} extern "C" {
 pub fn strtoul_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , __loc : locale_t , ) -> libc :: c_ulong ; 
} extern "C" {
 pub fn strtoll_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , __loc : locale_t , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn strtoull_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __base : libc :: c_int , __loc : locale_t , ) -> libc :: c_ulonglong ; 
} extern "C" {
 pub fn strtod_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> f64 ; 
} extern "C" {
 pub fn strtof_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> f32 ; 
} extern "C" {
 pub fn strtold_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> f64 ; 
} extern "C" {
 pub fn strtof32_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> _Float32 ; 
} extern "C" {
 pub fn strtof64_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> _Float64 ; 
} extern "C" {
 pub fn strtof32x_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> _Float32x ; 
} extern "C" {
 pub fn strtof64x_l ( __nptr : * const libc :: c_char , __endptr : * mut * mut libc :: c_char , __loc : locale_t , ) -> _Float64x ; 
} extern "C" {
 pub fn l64a ( __n : libc :: c_long , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn a64l ( __s : * const libc :: c_char , ) -> libc :: c_long ; 
} pub type u_char = __u_char ; pub type u_short = __u_short ; pub type u_int = __u_int ; pub type u_long = __u_long ; pub type quad_t = __quad_t ; pub type u_quad_t = __u_quad_t ; pub type fsid_t = __fsid_t ; pub type loff_t = __loff_t ; pub type ino_t = __ino_t ; pub type ino64_t = __ino64_t ; pub type dev_t = __dev_t ; pub type gid_t = __gid_t ; pub type mode_t = __mode_t ; pub type nlink_t = __nlink_t ; pub type uid_t = __uid_t ; pub type pid_t = __pid_t ; pub type id_t = __id_t ; pub type daddr_t = __daddr_t ; pub type caddr_t = __caddr_t ; pub type key_t = __key_t ; pub type clock_t = __clock_t ; pub type clockid_t = __clockid_t ; pub type time_t = __time_t ; pub type timer_t = __timer_t ; pub type useconds_t = __useconds_t ; pub type suseconds_t = __suseconds_t ; pub type ulong = libc :: c_ulong ; pub type ushort = libc :: c_ushort ; pub type uint = libc :: c_uint ; pub type u_int8_t = libc :: c_uchar ; pub type u_int16_t = libc :: c_ushort ; pub type u_int32_t = libc :: c_uint ; pub type u_int64_t = libc :: c_ulong ; pub type register_t = libc :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sigset_t { pub __val : [ libc :: c_ulong ; 16usize ] , } # [ test ] fn bindgen_test_layout___sigset_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigset_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigset_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __sigset_t ) , "::" , stringify ! ( __val ) ) ) ; } pub type sigset_t = __sigset_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timespec { pub tv_sec : __time_t , pub tv_nsec : __syscall_slong_t , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ; } pub type __fd_mask = libc :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fd_set { pub fds_bits : [ __fd_mask ; 16usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const fd_set ) ) . fds_bits as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( fds_bits ) ) ) ; } pub type fd_mask = __fd_mask ; extern "C" {
 pub fn select ( __nfds : libc :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * mut timeval , ) -> libc :: c_int ; 
} extern "C" {
 pub fn pselect ( __nfds : libc :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * const timespec , __sigmask : * const __sigset_t , ) -> libc :: c_int ; 
} pub type blksize_t = __blksize_t ; pub type blkcnt_t = __blkcnt_t ; pub type fsblkcnt_t = __fsblkcnt_t ; pub type fsfilcnt_t = __fsfilcnt_t ; pub type blkcnt64_t = __blkcnt64_t ; pub type fsblkcnt64_t = __fsblkcnt64_t ; pub type fsfilcnt64_t = __fsfilcnt64_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_rwlock_arch_t { pub __readers : libc :: c_uint , pub __writers : libc :: c_uint , pub __wrphase_futex : libc :: c_uint , pub __writers_futex : libc :: c_uint , pub __pad3 : libc :: c_uint , pub __pad4 : libc :: c_uint , pub __cur_writer : libc :: c_int , pub __shared : libc :: c_int , pub __rwelision : libc :: c_schar , pub __pad1 : [ libc :: c_uchar ; 7usize ] , pub __pad2 : libc :: c_ulong , pub __flags : libc :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_rwlock_arch_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_rwlock_arch_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_rwlock_arch_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __readers as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __readers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __writers as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __wrphase_futex as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __wrphase_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __writers_futex as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad3 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad4 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __cur_writer as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __cur_writer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __shared as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __shared ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __rwelision as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __rwelision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad1 as * const _ as usize } , 33usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad2 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __flags as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __flags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_internal_list { pub __prev : * mut __pthread_internal_list , pub __next : * mut __pthread_internal_list , } # [ test ] fn bindgen_test_layout___pthread_internal_list ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_internal_list > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_internal_list > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __prev ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __next as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __next ) ) ) ; } pub type __pthread_list_t = __pthread_internal_list ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_mutex_s { pub __lock : libc :: c_int , pub __count : libc :: c_uint , pub __owner : libc :: c_int , pub __nusers : libc :: c_uint , pub __kind : libc :: c_int , pub __spins : libc :: c_short , pub __elision : libc :: c_short , pub __list : __pthread_list_t , } # [ test ] fn bindgen_test_layout___pthread_mutex_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_mutex_s > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_mutex_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __count as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __owner as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __nusers as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __nusers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __kind as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __spins as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __spins ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __elision as * const _ as usize } , 22usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __elision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __list as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __list ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __pthread_cond_s { pub __bindgen_anon_1 : __pthread_cond_s__bindgen_ty_1 , pub __bindgen_anon_2 : __pthread_cond_s__bindgen_ty_2 , pub __g_refs : [ libc :: c_uint ; 2usize ] , pub __g_size : [ libc :: c_uint ; 2usize ] , pub __g1_orig_size : libc :: c_uint , pub __wrefs : libc :: c_uint , pub __g_signals : [ libc :: c_uint ; 2usize ] , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __pthread_cond_s__bindgen_ty_1 { pub __wseq : libc :: c_ulonglong , pub __wseq32 : __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 { pub __low : libc :: c_uint , pub __high : libc :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1 ) ) . __wseq as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1 ) ) . __wseq32 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq32 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __pthread_cond_s__bindgen_ty_2 { pub __g1_start : libc :: c_ulonglong , pub __g1_start32 : __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 { pub __low : libc :: c_uint , pub __high : libc :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2 ) ) . __g1_start as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2 ) ) . __g1_start32 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start32 ) ) ) ; } # [ test ] fn bindgen_test_layout___pthread_cond_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_refs as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_refs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_size as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g1_orig_size as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g1_orig_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __wrefs as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __wrefs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_signals as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_signals ) ) ) ; } pub type pthread_t = libc :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutexattr_t { pub __size : [ libc :: c_char ; 4usize ] , pub __align : libc :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_condattr_t { pub __size : [ libc :: c_char ; 4usize ] , pub __align : libc :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type pthread_key_t = libc :: c_uint ; pub type pthread_once_t = libc :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_attr_t { pub __size : [ libc :: c_char ; 56usize ] , pub __align : libc :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_attr_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutex_t { pub __data : __pthread_mutex_s , pub __size : [ libc :: c_char ; 40usize ] , pub __align : libc :: c_long , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_cond_t { pub __data : __pthread_cond_s , pub __size : [ libc :: c_char ; 48usize ] , pub __align : libc :: c_longlong , _bindgen_union_align : [ u64 ; 6usize ] , } # [ test ] fn bindgen_test_layout_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlock_t { pub __data : __pthread_rwlock_arch_t , pub __size : [ libc :: c_char ; 56usize ] , pub __align : libc :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlockattr_t { pub __size : [ libc :: c_char ; 8usize ] , pub __align : libc :: c_long , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __align ) ) ) ; } pub type pthread_spinlock_t = libc :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrier_t { pub __size : [ libc :: c_char ; 32usize ] , pub __align : libc :: c_long , _bindgen_union_align : [ u64 ; 4usize ] , } # [ test ] fn bindgen_test_layout_pthread_barrier_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrier_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrier_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __align ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrierattr_t { pub __size : [ libc :: c_char ; 4usize ] , pub __align : libc :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_barrierattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __align ) ) ) ; } extern "C" {
 pub fn random ( ) -> libc :: c_long ; 
} extern "C" {
 pub fn srandom ( __seed : libc :: c_uint , ) ; 
} extern "C" {
 pub fn initstate ( __seed : libc :: c_uint , __statebuf : * mut libc :: c_char , __statelen : usize , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn setstate ( __statebuf : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct random_data { pub fptr : * mut i32 , pub rptr : * mut i32 , pub state : * mut i32 , pub rand_type : libc :: c_int , pub rand_deg : libc :: c_int , pub rand_sep : libc :: c_int , pub end_ptr : * mut i32 , } # [ test ] fn bindgen_test_layout_random_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < random_data > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( random_data ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < random_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( random_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . fptr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( fptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rptr as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . state as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rand_type as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rand_deg as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_deg ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . rand_sep as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_sep ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( random_data ) , "::" , stringify ! ( end_ptr ) ) ) ; } extern "C" {
 pub fn random_r ( __buf : * mut random_data , __result : * mut i32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn srandom_r ( __seed : libc :: c_uint , __buf : * mut random_data , ) -> libc :: c_int ; 
} extern "C" {
 pub fn initstate_r ( __seed : libc :: c_uint , __statebuf : * mut libc :: c_char , __statelen : usize , __buf : * mut random_data , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setstate_r ( __statebuf : * mut libc :: c_char , __buf : * mut random_data , ) -> libc :: c_int ; 
} extern "C" {
 pub fn rand ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn srand ( __seed : libc :: c_uint , ) ; 
} extern "C" {
 pub fn rand_r ( __seed : * mut libc :: c_uint , ) -> libc :: c_int ; 
} extern "C" {
 pub fn drand48 ( ) -> f64 ; 
} extern "C" {
 pub fn erand48 ( __xsubi : * mut libc :: c_ushort , ) -> f64 ; 
} extern "C" {
 pub fn lrand48 ( ) -> libc :: c_long ; 
} extern "C" {
 pub fn nrand48 ( __xsubi : * mut libc :: c_ushort , ) -> libc :: c_long ; 
} extern "C" {
 pub fn mrand48 ( ) -> libc :: c_long ; 
} extern "C" {
 pub fn jrand48 ( __xsubi : * mut libc :: c_ushort , ) -> libc :: c_long ; 
} extern "C" {
 pub fn srand48 ( __seedval : libc :: c_long , ) ; 
} extern "C" {
 pub fn seed48 ( __seed16v : * mut libc :: c_ushort , ) -> * mut libc :: c_ushort ; 
} extern "C" {
 pub fn lcong48 ( __param : * mut libc :: c_ushort , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct drand48_data { pub __x : [ libc :: c_ushort ; 3usize ] , pub __old_x : [ libc :: c_ushort ; 3usize ] , pub __c : libc :: c_ushort , pub __init : libc :: c_ushort , pub __a : libc :: c_ulonglong , } # [ test ] fn bindgen_test_layout_drand48_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < drand48_data > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( drand48_data ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < drand48_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( drand48_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __old_x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __c ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as usize } , 14usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __init ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __a ) ) ) ; } extern "C" {
 pub fn drand48_r ( __buffer : * mut drand48_data , __result : * mut f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn erand48_r ( __xsubi : * mut libc :: c_ushort , __buffer : * mut drand48_data , __result : * mut f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn lrand48_r ( __buffer : * mut drand48_data , __result : * mut libc :: c_long , ) -> libc :: c_int ; 
} extern "C" {
 pub fn nrand48_r ( __xsubi : * mut libc :: c_ushort , __buffer : * mut drand48_data , __result : * mut libc :: c_long , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mrand48_r ( __buffer : * mut drand48_data , __result : * mut libc :: c_long , ) -> libc :: c_int ; 
} extern "C" {
 pub fn jrand48_r ( __xsubi : * mut libc :: c_ushort , __buffer : * mut drand48_data , __result : * mut libc :: c_long , ) -> libc :: c_int ; 
} extern "C" {
 pub fn srand48_r ( __seedval : libc :: c_long , __buffer : * mut drand48_data , ) -> libc :: c_int ; 
} extern "C" {
 pub fn seed48_r ( __seed16v : * mut libc :: c_ushort , __buffer : * mut drand48_data , ) -> libc :: c_int ; 
} extern "C" {
 pub fn lcong48_r ( __param : * mut libc :: c_ushort , __buffer : * mut drand48_data , ) -> libc :: c_int ; 
} extern "C" {
 pub fn malloc ( __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn calloc ( __nmemb : usize , __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn realloc ( __ptr : * mut libc :: c_void , __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn reallocarray ( __ptr : * mut libc :: c_void , __nmemb : usize , __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn free ( __ptr : * mut libc :: c_void , ) ; 
} extern "C" {
 pub fn alloca ( __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn valloc ( __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn posix_memalign ( __memptr : * mut * mut libc :: c_void , __alignment : usize , __size : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn aligned_alloc ( __alignment : usize , __size : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn abort ( ) ; 
} extern "C" {
 pub fn atexit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > , ) -> libc :: c_int ; 
} extern "C" {
 pub fn at_quick_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > , ) -> libc :: c_int ; 
} extern "C" {
 pub fn on_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( __status : libc :: c_int , __arg : * mut libc :: c_void ) > , __arg : * mut libc :: c_void , ) -> libc :: c_int ; 
} extern "C" {
 pub fn exit ( __status : libc :: c_int , ) ; 
} extern "C" {
 pub fn quick_exit ( __status : libc :: c_int , ) ; 
} extern "C" {
 pub fn _Exit ( __status : libc :: c_int , ) ; 
} extern "C" {
 pub fn getenv ( __name : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn secure_getenv ( __name : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn putenv ( __string : * mut libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setenv ( __name : * const libc :: c_char , __value : * const libc :: c_char , __replace : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn unsetenv ( __name : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clearenv ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn mktemp ( __template : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn mkstemp ( __template : * mut libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkstemp64 ( __template : * mut libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkstemps ( __template : * mut libc :: c_char , __suffixlen : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkstemps64 ( __template : * mut libc :: c_char , __suffixlen : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkdtemp ( __template : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn mkostemp ( __template : * mut libc :: c_char , __flags : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkostemp64 ( __template : * mut libc :: c_char , __flags : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkostemps ( __template : * mut libc :: c_char , __suffixlen : libc :: c_int , __flags : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mkostemps64 ( __template : * mut libc :: c_char , __suffixlen : libc :: c_int , __flags : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn system ( __command : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalize_file_name ( __name : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn realpath ( __name : * const libc :: c_char , __resolved : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} pub type __compar_fn_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const libc :: c_void , arg2 : * const libc :: c_void ) -> libc :: c_int > ; pub type comparison_fn_t = __compar_fn_t ; pub type __compar_d_fn_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const libc :: c_void , arg2 : * const libc :: c_void , arg3 : * mut libc :: c_void ) -> libc :: c_int > ; extern "C" {
 pub fn bsearch ( __key : * const libc :: c_void , __base : * const libc :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn qsort ( __base : * mut libc :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t , ) ; 
} extern "C" {
 pub fn qsort_r ( __base : * mut libc :: c_void , __nmemb : usize , __size : usize , __compar : __compar_d_fn_t , __arg : * mut libc :: c_void , ) ; 
} extern "C" {
 pub fn abs ( __x : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn labs ( __x : libc :: c_long , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llabs ( __x : libc :: c_longlong , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn div ( __numer : libc :: c_int , __denom : libc :: c_int , ) -> div_t ; 
} extern "C" {
 pub fn ldiv ( __numer : libc :: c_long , __denom : libc :: c_long , ) -> ldiv_t ; 
} extern "C" {
 pub fn lldiv ( __numer : libc :: c_longlong , __denom : libc :: c_longlong , ) -> lldiv_t ; 
} extern "C" {
 pub fn ecvt ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn fcvt ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn gcvt ( __value : f64 , __ndigit : libc :: c_int , __buf : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn qecvt ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn qfcvt ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn qgcvt ( __value : f64 , __ndigit : libc :: c_int , __buf : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn ecvt_r ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , __buf : * mut libc :: c_char , __len : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fcvt_r ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , __buf : * mut libc :: c_char , __len : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn qecvt_r ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , __buf : * mut libc :: c_char , __len : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn qfcvt_r ( __value : f64 , __ndigit : libc :: c_int , __decpt : * mut libc :: c_int , __sign : * mut libc :: c_int , __buf : * mut libc :: c_char , __len : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mblen ( __s : * const libc :: c_char , __n : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mbtowc ( __pwc : * mut wchar_t , __s : * const libc :: c_char , __n : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn wctomb ( __s : * mut libc :: c_char , __wchar : wchar_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn mbstowcs ( __pwcs : * mut wchar_t , __s : * const libc :: c_char , __n : usize , ) -> usize ; 
} extern "C" {
 pub fn wcstombs ( __s : * mut libc :: c_char , __pwcs : * const wchar_t , __n : usize , ) -> usize ; 
} extern "C" {
 pub fn rpmatch ( __response : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getsubopt ( __optionp : * mut * mut libc :: c_char , __tokens : * const * const libc :: c_char , __valuep : * mut * mut libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn posix_openpt ( __oflag : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn grantpt ( __fd : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn unlockpt ( __fd : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ptsname ( __fd : libc :: c_int , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn ptsname_r ( __fd : libc :: c_int , __buf : * mut libc :: c_char , __buflen : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpt ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn getloadavg ( __loadavg : * mut f64 , __nelem : libc :: c_int , ) -> libc :: c_int ; 
} pub type int_least8_t = __int_least8_t ; pub type int_least16_t = __int_least16_t ; pub type int_least32_t = __int_least32_t ; pub type int_least64_t = __int_least64_t ; pub type uint_least8_t = __uint_least8_t ; pub type uint_least16_t = __uint_least16_t ; pub type uint_least32_t = __uint_least32_t ; pub type uint_least64_t = __uint_least64_t ; pub type int_fast8_t = libc :: c_schar ; pub type int_fast16_t = libc :: c_long ; pub type int_fast32_t = libc :: c_long ; pub type int_fast64_t = libc :: c_long ; pub type uint_fast8_t = libc :: c_uchar ; pub type uint_fast16_t = libc :: c_ulong ; pub type uint_fast32_t = libc :: c_ulong ; pub type uint_fast64_t = libc :: c_ulong ; pub type intmax_t = __intmax_t ; pub type uintmax_t = __uintmax_t ; pub type float_t = f32 ; pub type double_t = f64 ; pub const FP_INT_UPWARD : _bindgen_ty_1 = 0 ; pub const FP_INT_DOWNWARD : _bindgen_ty_1 = 1 ; pub const FP_INT_TOWARDZERO : _bindgen_ty_1 = 2 ; pub const FP_INT_TONEARESTFROMZERO : _bindgen_ty_1 = 3 ; pub const FP_INT_TONEAREST : _bindgen_ty_1 = 4 ; pub type _bindgen_ty_1 = libc :: c_uint ; extern "C" {
 pub fn __fpclassify ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __signbit ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __isinf ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __finite ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __isnan ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __iseqsig ( __x : f64 , __y : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __issignaling ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn acos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atan2 ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atan2 ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cos ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sin ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tan ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sincos ( __x : f64 , __sinx : * mut f64 , __cosx : * mut f64 , ) ; 
} extern "C" {
 pub fn __sincos ( __x : f64 , __sinx : * mut f64 , __cosx : * mut f64 , ) ; 
} extern "C" {
 pub fn acosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acosh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asinh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atanh ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn frexp ( __x : f64 , __exponent : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __frexp ( __x : f64 , __exponent : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ldexp ( __x : f64 , __exponent : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __ldexp ( __x : f64 , __exponent : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn log ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log10 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log10 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn modf ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn __modf ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp10 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp10 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn expm1 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __expm1 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log1p ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log1p ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn logb ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __logb ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log2 ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn pow ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __pow ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sqrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sqrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn hypot ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __hypot ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cbrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cbrt ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ceil ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __ceil ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fabs ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fabs ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn floor ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __floor ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmod ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmod ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn isinf ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn finite ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn drem ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __drem ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn significand ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __significand ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn copysign ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __copysign ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nan ( __tagb : * const libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn __nan ( __tagb : * const libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn isnan ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn j0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn j1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn jn ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __jn ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y0 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y1 ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn yn ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __yn ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erf ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erf ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erfc ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erfc ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __lgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tgamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn gamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __gamma ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgamma_r ( arg1 : f64 , __signgamp : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __lgamma_r ( arg1 : f64 , __signgamp : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn rint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __rint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextafter ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextafter ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nexttoward ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nexttoward ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextdown ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextdown ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextup ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextup ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remainder ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __remainder ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn scalbn ( __x : f64 , __n : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __scalbn ( __x : f64 , __n : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ilogb ( __x : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogb ( __x : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogb ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogb ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalbln ( __x : f64 , __n : libc :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn __scalbln ( __x : f64 , __n : libc :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn nearbyint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nearbyint ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn round ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __round ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn trunc ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __trunc ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remquo ( __x : f64 , __y : f64 , __quo : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __remquo ( __x : f64 , __y : f64 , __quo : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn lrint ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrint ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrint ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrint ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lround ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lround ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llround ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llround ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdim ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fdim ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmax ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmax ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmin ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmin ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fma ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fma ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn roundeven ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __roundeven ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fromfp ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfp ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfp ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfp ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpx ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpx ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpx ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpx ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmag ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmaxmag ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fminmag ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fminmag ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn totalorder ( __x : f64 , __y : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermag ( __x : f64 , __y : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalize ( __cx : * mut f64 , __x : * const f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayload ( __x : * const f64 , ) -> f64 ; 
} extern "C" {
 pub fn __getpayload ( __x : * const f64 , ) -> f64 ; 
} extern "C" {
 pub fn setpayload ( __x : * mut f64 , __payload : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsig ( __x : * mut f64 , __payload : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn scalb ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __scalb ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fpclassifyf ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __signbitf ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __isinff ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __finitef ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __isnanf ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __iseqsigf ( __x : f32 , __y : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __issignalingf ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn acosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __acosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn asinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __asinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn atanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __atanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn atan2f ( __y : f32 , __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __atan2f ( __y : f32 , __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn cosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __cosf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __sinf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn tanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __tanf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn coshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __coshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __sinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn tanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __tanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sincosf ( __x : f32 , __sinx : * mut f32 , __cosx : * mut f32 , ) ; 
} extern "C" {
 pub fn __sincosf ( __x : f32 , __sinx : * mut f32 , __cosx : * mut f32 , ) ; 
} extern "C" {
 pub fn acoshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __acoshf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn asinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __asinhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn atanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __atanhf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn expf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __expf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn frexpf ( __x : f32 , __exponent : * mut libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __frexpf ( __x : f32 , __exponent : * mut libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn ldexpf ( __x : f32 , __exponent : libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __ldexpf ( __x : f32 , __exponent : libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn logf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __logf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn log10f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __log10f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn modff ( __x : f32 , __iptr : * mut f32 , ) -> f32 ; 
} extern "C" {
 pub fn __modff ( __x : f32 , __iptr : * mut f32 , ) -> f32 ; 
} extern "C" {
 pub fn exp10f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __exp10f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn expm1f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __expm1f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn log1pf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __log1pf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn logbf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __logbf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn exp2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __exp2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn log2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __log2f ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn powf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __powf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn sqrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __sqrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn hypotf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __hypotf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn cbrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __cbrtf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn ceilf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __ceilf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fabsf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fabsf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn floorf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __floorf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fmodf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmodf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn isinff ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn finitef ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn dremf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __dremf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn significandf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __significandf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn copysignf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __copysignf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nanf ( __tagb : * const libc :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn __nanf ( __tagb : * const libc :: c_char , ) -> f32 ; 
} extern "C" {
 pub fn isnanf ( __value : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn j0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __j0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn j1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __j1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn jnf ( arg1 : libc :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __jnf ( arg1 : libc :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn y0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __y0f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn y1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __y1f ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn ynf ( arg1 : libc :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __ynf ( arg1 : libc :: c_int , arg2 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn erff ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __erff ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn erfcf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __erfcf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn lgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __lgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn tgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __tgammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn gammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __gammaf ( arg1 : f32 , ) -> f32 ; 
} extern "C" {
 pub fn lgammaf_r ( arg1 : f32 , __signgamp : * mut libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __lgammaf_r ( arg1 : f32 , __signgamp : * mut libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn rintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __rintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nextafterf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __nextafterf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nexttowardf ( __x : f32 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn __nexttowardf ( __x : f32 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn nextdownf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __nextdownf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn nextupf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __nextupf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn remainderf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __remainderf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn scalbnf ( __x : f32 , __n : libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __scalbnf ( __x : f32 , __n : libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn ilogbf ( __x : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogbf ( __x : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogbf ( __x : f32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogbf ( __x : f32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalblnf ( __x : f32 , __n : libc :: c_long , ) -> f32 ; 
} extern "C" {
 pub fn __scalblnf ( __x : f32 , __n : libc :: c_long , ) -> f32 ; 
} extern "C" {
 pub fn nearbyintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __nearbyintf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn roundf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __roundf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn truncf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __truncf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn remquof ( __x : f32 , __y : f32 , __quo : * mut libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn __remquof ( __x : f32 , __y : f32 , __quo : * mut libc :: c_int , ) -> f32 ; 
} extern "C" {
 pub fn lrintf ( __x : f32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrintf ( __x : f32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrintf ( __x : f32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrintf ( __x : f32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lroundf ( __x : f32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lroundf ( __x : f32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llroundf ( __x : f32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llroundf ( __x : f32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdimf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fdimf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fmaxf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmaxf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fminf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fminf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fmaf ( __x : f32 , __y : f32 , __z : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmaf ( __x : f32 , __y : f32 , __z : f32 , ) -> f32 ; 
} extern "C" {
 pub fn roundevenf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __roundevenf ( __x : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fromfpf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpxf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpxf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpxf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpxf ( __x : f32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmagf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fmaxmagf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn fminmagf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fminmagf ( __x : f32 , __y : f32 , ) -> f32 ; 
} extern "C" {
 pub fn totalorderf ( __x : f32 , __y : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermagf ( __x : f32 , __y : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalizef ( __cx : * mut f32 , __x : * const f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayloadf ( __x : * const f32 , ) -> f32 ; 
} extern "C" {
 pub fn __getpayloadf ( __x : * const f32 , ) -> f32 ; 
} extern "C" {
 pub fn setpayloadf ( __x : * mut f32 , __payload : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsigf ( __x : * mut f32 , __payload : f32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn scalbf ( __x : f32 , __n : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __scalbf ( __x : f32 , __n : f32 , ) -> f32 ; 
} extern "C" {
 pub fn __fpclassifyl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __signbitl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __isinfl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __finitel ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __isnanl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __iseqsigl ( __x : f64 , __y : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __issignalingl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn acosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atan2l ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atan2l ( __y : f64 , __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cosl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sinl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tanl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn coshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __coshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sincosl ( __x : f64 , __sinx : * mut f64 , __cosx : * mut f64 , ) ; 
} extern "C" {
 pub fn __sincosl ( __x : f64 , __sinx : * mut f64 , __cosx : * mut f64 , ) ; 
} extern "C" {
 pub fn acoshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __acoshl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn asinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __asinhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn atanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __atanhl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn expl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __expl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn frexpl ( __x : f64 , __exponent : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __frexpl ( __x : f64 , __exponent : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ldexpl ( __x : f64 , __exponent : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __ldexpl ( __x : f64 , __exponent : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn logl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __logl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log10l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log10l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn modfl ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn __modfl ( __x : f64 , __iptr : * mut f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp10l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp10l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn expm1l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __expm1l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log1pl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log1pl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn logbl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __logbl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn exp2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __exp2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn log2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __log2l ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn powl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __powl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn sqrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __sqrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn hypotl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __hypotl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn cbrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __cbrtl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ceill ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __ceill ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fabsl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fabsl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn floorl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __floorl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmodl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmodl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn isinfl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn finitel ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn dreml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __dreml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn significandl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __significandl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn copysignl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __copysignl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nanl ( __tagb : * const libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn __nanl ( __tagb : * const libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn isnanl ( __value : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn j0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn j1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __j1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn jnl ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __jnl ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y0l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn y1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __y1l ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ynl ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __ynl ( arg1 : libc :: c_int , arg2 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erfl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erfl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn erfcl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __erfcl ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __lgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn tgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __tgammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn gammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __gammal ( arg1 : f64 , ) -> f64 ; 
} extern "C" {
 pub fn lgammal_r ( arg1 : f64 , __signgamp : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __lgammal_r ( arg1 : f64 , __signgamp : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn rintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __rintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextafterl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextafterl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nexttowardl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nexttowardl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextdownl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextdownl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn nextupl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nextupl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remainderl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __remainderl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn scalbnl ( __x : f64 , __n : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __scalbnl ( __x : f64 , __n : libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn ilogbl ( __x : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogbl ( __x : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogbl ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogbl ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalblnl ( __x : f64 , __n : libc :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn __scalblnl ( __x : f64 , __n : libc :: c_long , ) -> f64 ; 
} extern "C" {
 pub fn nearbyintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __nearbyintl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn roundl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __roundl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn truncl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __truncl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn remquol ( __x : f64 , __y : f64 , __quo : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn __remquol ( __x : f64 , __y : f64 , __quo : * mut libc :: c_int , ) -> f64 ; 
} extern "C" {
 pub fn lrintl ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrintl ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrintl ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrintl ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lroundl ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lroundl ( __x : f64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llroundl ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llroundl ( __x : f64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdiml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fdiml ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmaxl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmaxl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fminl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fminl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fmal ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmal ( __x : f64 , __y : f64 , __z : f64 , ) -> f64 ; 
} extern "C" {
 pub fn roundevenl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __roundevenl ( __x : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fromfpl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpxl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpxl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpxl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpxl ( __x : f64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmagl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fmaxmagl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn fminmagl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __fminmagl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn totalorderl ( __x : f64 , __y : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermagl ( __x : f64 , __y : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalizel ( __cx : * mut f64 , __x : * const f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayloadl ( __x : * const f64 , ) -> f64 ; 
} extern "C" {
 pub fn __getpayloadl ( __x : * const f64 , ) -> f64 ; 
} extern "C" {
 pub fn setpayloadl ( __x : * mut f64 , __payload : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsigl ( __x : * mut f64 , __payload : f64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn scalbl ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn __scalbl ( __x : f64 , __n : f64 , ) -> f64 ; 
} extern "C" {
 pub fn acosf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __acosf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn asinf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __asinf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn atanf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __atanf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn atan2f32 ( __y : _Float32 , __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __atan2f32 ( __y : _Float32 , __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn cosf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __cosf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn sinf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __sinf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn tanf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __tanf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn coshf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __coshf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn sinhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __sinhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn tanhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __tanhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn sincosf32 ( __x : _Float32 , __sinx : * mut _Float32 , __cosx : * mut _Float32 , ) ; 
} extern "C" {
 pub fn __sincosf32 ( __x : _Float32 , __sinx : * mut _Float32 , __cosx : * mut _Float32 , ) ; 
} extern "C" {
 pub fn acoshf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __acoshf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn asinhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __asinhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn atanhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __atanhf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn expf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __expf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn frexpf32 ( __x : _Float32 , __exponent : * mut libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn __frexpf32 ( __x : _Float32 , __exponent : * mut libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn ldexpf32 ( __x : _Float32 , __exponent : libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn __ldexpf32 ( __x : _Float32 , __exponent : libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn logf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __logf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn log10f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __log10f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn modff32 ( __x : _Float32 , __iptr : * mut _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __modff32 ( __x : _Float32 , __iptr : * mut _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn exp10f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __exp10f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn expm1f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __expm1f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn log1pf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __log1pf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn logbf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __logbf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn exp2f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __exp2f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn log2f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __log2f32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn powf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __powf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn sqrtf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __sqrtf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn hypotf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __hypotf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn cbrtf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __cbrtf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn ceilf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __ceilf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fabsf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fabsf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn floorf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __floorf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fmodf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fmodf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn copysignf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __copysignf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn nanf32 ( __tagb : * const libc :: c_char , ) -> _Float32 ; 
} extern "C" {
 pub fn __nanf32 ( __tagb : * const libc :: c_char , ) -> _Float32 ; 
} extern "C" {
 pub fn j0f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __j0f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn j1f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __j1f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn jnf32 ( arg1 : libc :: c_int , arg2 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __jnf32 ( arg1 : libc :: c_int , arg2 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn y0f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __y0f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn y1f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __y1f32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn ynf32 ( arg1 : libc :: c_int , arg2 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __ynf32 ( arg1 : libc :: c_int , arg2 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn erff32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __erff32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn erfcf32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __erfcf32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn lgammaf32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __lgammaf32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn tgammaf32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __tgammaf32 ( arg1 : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn lgammaf32_r ( arg1 : _Float32 , __signgamp : * mut libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn __lgammaf32_r ( arg1 : _Float32 , __signgamp : * mut libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn rintf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __rintf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn nextafterf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __nextafterf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn nextdownf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __nextdownf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn nextupf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __nextupf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn remainderf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __remainderf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn scalbnf32 ( __x : _Float32 , __n : libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn __scalbnf32 ( __x : _Float32 , __n : libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn ilogbf32 ( __x : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogbf32 ( __x : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogbf32 ( __x : _Float32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogbf32 ( __x : _Float32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalblnf32 ( __x : _Float32 , __n : libc :: c_long , ) -> _Float32 ; 
} extern "C" {
 pub fn __scalblnf32 ( __x : _Float32 , __n : libc :: c_long , ) -> _Float32 ; 
} extern "C" {
 pub fn nearbyintf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __nearbyintf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn roundf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __roundf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn truncf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __truncf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn remquof32 ( __x : _Float32 , __y : _Float32 , __quo : * mut libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn __remquof32 ( __x : _Float32 , __y : _Float32 , __quo : * mut libc :: c_int , ) -> _Float32 ; 
} extern "C" {
 pub fn lrintf32 ( __x : _Float32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrintf32 ( __x : _Float32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrintf32 ( __x : _Float32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrintf32 ( __x : _Float32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lroundf32 ( __x : _Float32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lroundf32 ( __x : _Float32 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llroundf32 ( __x : _Float32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llroundf32 ( __x : _Float32 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdimf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fdimf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fmaxf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fmaxf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fminf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fminf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fmaf32 ( __x : _Float32 , __y : _Float32 , __z : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fmaf32 ( __x : _Float32 , __y : _Float32 , __z : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn roundevenf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __roundevenf32 ( __x : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fromfpf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpxf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpxf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpxf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpxf32 ( __x : _Float32 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmagf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fmaxmagf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn fminmagf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __fminmagf32 ( __x : _Float32 , __y : _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn totalorderf32 ( __x : _Float32 , __y : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermagf32 ( __x : _Float32 , __y : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalizef32 ( __cx : * mut _Float32 , __x : * const _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayloadf32 ( __x : * const _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn __getpayloadf32 ( __x : * const _Float32 , ) -> _Float32 ; 
} extern "C" {
 pub fn setpayloadf32 ( __x : * mut _Float32 , __payload : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsigf32 ( __x : * mut _Float32 , __payload : _Float32 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn acosf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __acosf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn asinf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __asinf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn atanf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __atanf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn atan2f64 ( __y : _Float64 , __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __atan2f64 ( __y : _Float64 , __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn cosf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __cosf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn sinf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __sinf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn tanf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __tanf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn coshf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __coshf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn sinhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __sinhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn tanhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __tanhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn sincosf64 ( __x : _Float64 , __sinx : * mut _Float64 , __cosx : * mut _Float64 , ) ; 
} extern "C" {
 pub fn __sincosf64 ( __x : _Float64 , __sinx : * mut _Float64 , __cosx : * mut _Float64 , ) ; 
} extern "C" {
 pub fn acoshf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __acoshf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn asinhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __asinhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn atanhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __atanhf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn expf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __expf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn frexpf64 ( __x : _Float64 , __exponent : * mut libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn __frexpf64 ( __x : _Float64 , __exponent : * mut libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn ldexpf64 ( __x : _Float64 , __exponent : libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn __ldexpf64 ( __x : _Float64 , __exponent : libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn logf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __logf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn log10f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __log10f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn modff64 ( __x : _Float64 , __iptr : * mut _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __modff64 ( __x : _Float64 , __iptr : * mut _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn exp10f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __exp10f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn expm1f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __expm1f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn log1pf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __log1pf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn logbf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __logbf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn exp2f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __exp2f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn log2f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __log2f64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn powf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __powf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn sqrtf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __sqrtf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn hypotf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __hypotf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn cbrtf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __cbrtf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn ceilf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __ceilf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fabsf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fabsf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn floorf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __floorf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fmodf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fmodf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn copysignf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __copysignf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn nanf64 ( __tagb : * const libc :: c_char , ) -> _Float64 ; 
} extern "C" {
 pub fn __nanf64 ( __tagb : * const libc :: c_char , ) -> _Float64 ; 
} extern "C" {
 pub fn j0f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __j0f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn j1f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __j1f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn jnf64 ( arg1 : libc :: c_int , arg2 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __jnf64 ( arg1 : libc :: c_int , arg2 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn y0f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __y0f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn y1f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __y1f64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn ynf64 ( arg1 : libc :: c_int , arg2 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __ynf64 ( arg1 : libc :: c_int , arg2 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn erff64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __erff64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn erfcf64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __erfcf64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn lgammaf64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __lgammaf64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn tgammaf64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __tgammaf64 ( arg1 : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn lgammaf64_r ( arg1 : _Float64 , __signgamp : * mut libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn __lgammaf64_r ( arg1 : _Float64 , __signgamp : * mut libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn rintf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __rintf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn nextafterf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __nextafterf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn nextdownf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __nextdownf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn nextupf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __nextupf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn remainderf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __remainderf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn scalbnf64 ( __x : _Float64 , __n : libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn __scalbnf64 ( __x : _Float64 , __n : libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn ilogbf64 ( __x : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogbf64 ( __x : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogbf64 ( __x : _Float64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogbf64 ( __x : _Float64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalblnf64 ( __x : _Float64 , __n : libc :: c_long , ) -> _Float64 ; 
} extern "C" {
 pub fn __scalblnf64 ( __x : _Float64 , __n : libc :: c_long , ) -> _Float64 ; 
} extern "C" {
 pub fn nearbyintf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __nearbyintf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn roundf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __roundf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn truncf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __truncf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn remquof64 ( __x : _Float64 , __y : _Float64 , __quo : * mut libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn __remquof64 ( __x : _Float64 , __y : _Float64 , __quo : * mut libc :: c_int , ) -> _Float64 ; 
} extern "C" {
 pub fn lrintf64 ( __x : _Float64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrintf64 ( __x : _Float64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrintf64 ( __x : _Float64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrintf64 ( __x : _Float64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lroundf64 ( __x : _Float64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lroundf64 ( __x : _Float64 , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llroundf64 ( __x : _Float64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llroundf64 ( __x : _Float64 , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdimf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fdimf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fmaxf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fmaxf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fminf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fminf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fmaf64 ( __x : _Float64 , __y : _Float64 , __z : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fmaf64 ( __x : _Float64 , __y : _Float64 , __z : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn roundevenf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __roundevenf64 ( __x : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fromfpf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpxf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpxf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpxf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpxf64 ( __x : _Float64 , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmagf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fmaxmagf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn fminmagf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __fminmagf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn totalorderf64 ( __x : _Float64 , __y : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermagf64 ( __x : _Float64 , __y : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalizef64 ( __cx : * mut _Float64 , __x : * const _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayloadf64 ( __x : * const _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn __getpayloadf64 ( __x : * const _Float64 , ) -> _Float64 ; 
} extern "C" {
 pub fn setpayloadf64 ( __x : * mut _Float64 , __payload : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsigf64 ( __x : * mut _Float64 , __payload : _Float64 , ) -> libc :: c_int ; 
} extern "C" {
 pub fn acosf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __acosf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn asinf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __asinf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn atanf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __atanf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn atan2f32x ( __y : _Float32x , __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __atan2f32x ( __y : _Float32x , __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn cosf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __cosf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn sinf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __sinf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn tanf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __tanf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn coshf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __coshf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn sinhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __sinhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn tanhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __tanhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn sincosf32x ( __x : _Float32x , __sinx : * mut _Float32x , __cosx : * mut _Float32x , ) ; 
} extern "C" {
 pub fn __sincosf32x ( __x : _Float32x , __sinx : * mut _Float32x , __cosx : * mut _Float32x , ) ; 
} extern "C" {
 pub fn acoshf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __acoshf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn asinhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __asinhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn atanhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __atanhf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn expf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __expf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn frexpf32x ( __x : _Float32x , __exponent : * mut libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn __frexpf32x ( __x : _Float32x , __exponent : * mut libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn ldexpf32x ( __x : _Float32x , __exponent : libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn __ldexpf32x ( __x : _Float32x , __exponent : libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn logf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __logf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn log10f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __log10f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn modff32x ( __x : _Float32x , __iptr : * mut _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __modff32x ( __x : _Float32x , __iptr : * mut _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn exp10f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __exp10f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn expm1f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __expm1f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn log1pf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __log1pf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn logbf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __logbf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn exp2f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __exp2f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn log2f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __log2f32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn powf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __powf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn sqrtf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __sqrtf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn hypotf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __hypotf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn cbrtf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __cbrtf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn ceilf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __ceilf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fabsf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fabsf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn floorf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __floorf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fmodf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fmodf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn copysignf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __copysignf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn nanf32x ( __tagb : * const libc :: c_char , ) -> _Float32x ; 
} extern "C" {
 pub fn __nanf32x ( __tagb : * const libc :: c_char , ) -> _Float32x ; 
} extern "C" {
 pub fn j0f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __j0f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn j1f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __j1f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn jnf32x ( arg1 : libc :: c_int , arg2 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __jnf32x ( arg1 : libc :: c_int , arg2 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn y0f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __y0f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn y1f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __y1f32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn ynf32x ( arg1 : libc :: c_int , arg2 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __ynf32x ( arg1 : libc :: c_int , arg2 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn erff32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __erff32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn erfcf32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __erfcf32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn lgammaf32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __lgammaf32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn tgammaf32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __tgammaf32x ( arg1 : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn lgammaf32x_r ( arg1 : _Float32x , __signgamp : * mut libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn __lgammaf32x_r ( arg1 : _Float32x , __signgamp : * mut libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn rintf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __rintf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn nextafterf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __nextafterf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn nextdownf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __nextdownf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn nextupf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __nextupf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn remainderf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __remainderf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn scalbnf32x ( __x : _Float32x , __n : libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn __scalbnf32x ( __x : _Float32x , __n : libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn ilogbf32x ( __x : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogbf32x ( __x : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogbf32x ( __x : _Float32x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogbf32x ( __x : _Float32x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalblnf32x ( __x : _Float32x , __n : libc :: c_long , ) -> _Float32x ; 
} extern "C" {
 pub fn __scalblnf32x ( __x : _Float32x , __n : libc :: c_long , ) -> _Float32x ; 
} extern "C" {
 pub fn nearbyintf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __nearbyintf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn roundf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __roundf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn truncf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __truncf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn remquof32x ( __x : _Float32x , __y : _Float32x , __quo : * mut libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn __remquof32x ( __x : _Float32x , __y : _Float32x , __quo : * mut libc :: c_int , ) -> _Float32x ; 
} extern "C" {
 pub fn lrintf32x ( __x : _Float32x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrintf32x ( __x : _Float32x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrintf32x ( __x : _Float32x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrintf32x ( __x : _Float32x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lroundf32x ( __x : _Float32x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lroundf32x ( __x : _Float32x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llroundf32x ( __x : _Float32x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llroundf32x ( __x : _Float32x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdimf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fdimf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fmaxf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fmaxf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fminf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fminf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fmaf32x ( __x : _Float32x , __y : _Float32x , __z : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fmaf32x ( __x : _Float32x , __y : _Float32x , __z : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn roundevenf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __roundevenf32x ( __x : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fromfpf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpxf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpxf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpxf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpxf32x ( __x : _Float32x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmagf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fmaxmagf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn fminmagf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __fminmagf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn totalorderf32x ( __x : _Float32x , __y : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermagf32x ( __x : _Float32x , __y : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalizef32x ( __cx : * mut _Float32x , __x : * const _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayloadf32x ( __x : * const _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn __getpayloadf32x ( __x : * const _Float32x , ) -> _Float32x ; 
} extern "C" {
 pub fn setpayloadf32x ( __x : * mut _Float32x , __payload : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsigf32x ( __x : * mut _Float32x , __payload : _Float32x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn acosf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __acosf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn asinf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __asinf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn atanf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __atanf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn atan2f64x ( __y : _Float64x , __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __atan2f64x ( __y : _Float64x , __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn cosf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __cosf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn sinf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __sinf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn tanf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __tanf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn coshf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __coshf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn sinhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __sinhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn tanhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __tanhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn sincosf64x ( __x : _Float64x , __sinx : * mut _Float64x , __cosx : * mut _Float64x , ) ; 
} extern "C" {
 pub fn __sincosf64x ( __x : _Float64x , __sinx : * mut _Float64x , __cosx : * mut _Float64x , ) ; 
} extern "C" {
 pub fn acoshf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __acoshf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn asinhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __asinhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn atanhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __atanhf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn expf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __expf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn frexpf64x ( __x : _Float64x , __exponent : * mut libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn __frexpf64x ( __x : _Float64x , __exponent : * mut libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn ldexpf64x ( __x : _Float64x , __exponent : libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn __ldexpf64x ( __x : _Float64x , __exponent : libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn logf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __logf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn log10f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __log10f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn modff64x ( __x : _Float64x , __iptr : * mut _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __modff64x ( __x : _Float64x , __iptr : * mut _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn exp10f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __exp10f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn expm1f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __expm1f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn log1pf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __log1pf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn logbf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __logbf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn exp2f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __exp2f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn log2f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __log2f64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn powf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __powf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn sqrtf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __sqrtf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn hypotf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __hypotf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn cbrtf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __cbrtf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn ceilf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __ceilf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fabsf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fabsf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn floorf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __floorf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fmodf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fmodf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn copysignf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __copysignf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn nanf64x ( __tagb : * const libc :: c_char , ) -> _Float64x ; 
} extern "C" {
 pub fn __nanf64x ( __tagb : * const libc :: c_char , ) -> _Float64x ; 
} extern "C" {
 pub fn j0f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __j0f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn j1f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __j1f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn jnf64x ( arg1 : libc :: c_int , arg2 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __jnf64x ( arg1 : libc :: c_int , arg2 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn y0f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __y0f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn y1f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __y1f64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn ynf64x ( arg1 : libc :: c_int , arg2 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __ynf64x ( arg1 : libc :: c_int , arg2 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn erff64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __erff64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn erfcf64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __erfcf64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn lgammaf64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __lgammaf64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn tgammaf64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __tgammaf64x ( arg1 : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn lgammaf64x_r ( arg1 : _Float64x , __signgamp : * mut libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn __lgammaf64x_r ( arg1 : _Float64x , __signgamp : * mut libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn rintf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __rintf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn nextafterf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __nextafterf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn nextdownf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __nextdownf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn nextupf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __nextupf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn remainderf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __remainderf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn scalbnf64x ( __x : _Float64x , __n : libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn __scalbnf64x ( __x : _Float64x , __n : libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn ilogbf64x ( __x : _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn __ilogbf64x ( __x : _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn llogbf64x ( __x : _Float64x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __llogbf64x ( __x : _Float64x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn scalblnf64x ( __x : _Float64x , __n : libc :: c_long , ) -> _Float64x ; 
} extern "C" {
 pub fn __scalblnf64x ( __x : _Float64x , __n : libc :: c_long , ) -> _Float64x ; 
} extern "C" {
 pub fn nearbyintf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __nearbyintf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn roundf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __roundf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn truncf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __truncf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn remquof64x ( __x : _Float64x , __y : _Float64x , __quo : * mut libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn __remquof64x ( __x : _Float64x , __y : _Float64x , __quo : * mut libc :: c_int , ) -> _Float64x ; 
} extern "C" {
 pub fn lrintf64x ( __x : _Float64x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lrintf64x ( __x : _Float64x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llrintf64x ( __x : _Float64x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llrintf64x ( __x : _Float64x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn lroundf64x ( __x : _Float64x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn __lroundf64x ( __x : _Float64x , ) -> libc :: c_long ; 
} extern "C" {
 pub fn llroundf64x ( __x : _Float64x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn __llroundf64x ( __x : _Float64x , ) -> libc :: c_longlong ; 
} extern "C" {
 pub fn fdimf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fdimf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fmaxf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fmaxf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fminf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fminf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fmaf64x ( __x : _Float64x , __y : _Float64x , __z : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fmaf64x ( __x : _Float64x , __y : _Float64x , __z : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn roundevenf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __roundevenf64x ( __x : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fromfpf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fromfpxf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn __fromfpxf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __intmax_t ; 
} extern "C" {
 pub fn ufromfpxf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn __ufromfpxf64x ( __x : _Float64x , __round : libc :: c_int , __width : libc :: c_uint , ) -> __uintmax_t ; 
} extern "C" {
 pub fn fmaxmagf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fmaxmagf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn fminmagf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __fminmagf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn totalorderf64x ( __x : _Float64x , __y : _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn totalordermagf64x ( __x : _Float64x , __y : _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn canonicalizef64x ( __cx : * mut _Float64x , __x : * const _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn getpayloadf64x ( __x : * const _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn __getpayloadf64x ( __x : * const _Float64x , ) -> _Float64x ; 
} extern "C" {
 pub fn setpayloadf64x ( __x : * mut _Float64x , __payload : _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn setpayloadsigf64x ( __x : * mut _Float64x , __payload : _Float64x , ) -> libc :: c_int ; 
} extern "C" {
 pub fn fadd ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn fdiv ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn fmul ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn fsub ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn faddl ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn fdivl ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn fmull ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn fsubl ( __x : f64 , __y : f64 , ) -> f32 ; 
} extern "C" {
 pub fn daddl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn ddivl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn dmull ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn dsubl ( __x : f64 , __y : f64 , ) -> f64 ; 
} extern "C" {
 pub fn f32addf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32divf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32mulf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32subf32x ( __x : _Float32x , __y : _Float32x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32addf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32 ; 
} extern "C" {
 pub fn f32divf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32 ; 
} extern "C" {
 pub fn f32mulf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32 ; 
} extern "C" {
 pub fn f32subf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32 ; 
} extern "C" {
 pub fn f32addf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32divf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32mulf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32subf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32 ; 
} extern "C" {
 pub fn f32xaddf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xdivf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xmulf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xsubf64 ( __x : _Float64 , __y : _Float64 , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xaddf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xdivf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xmulf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32x ; 
} extern "C" {
 pub fn f32xsubf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float32x ; 
} extern "C" {
 pub fn f64addf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64 ; 
} extern "C" {
 pub fn f64divf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64 ; 
} extern "C" {
 pub fn f64mulf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64 ; 
} extern "C" {
 pub fn f64subf64x ( __x : _Float64x , __y : _Float64x , ) -> _Float64 ; 
} extern "C" {
 # [ link_name = "\u{1}signgam" ] 
 pub static mut  signgam  :  libc :: c_int ;
} pub const FP_NAN : _bindgen_ty_2 = 0 ; pub const FP_INFINITE : _bindgen_ty_2 = 1 ; pub const FP_ZERO : _bindgen_ty_2 = 2 ; pub const FP_SUBNORMAL : _bindgen_ty_2 = 3 ; pub const FP_NORMAL : _bindgen_ty_2 = 4 ; pub type _bindgen_ty_2 = libc :: c_uint ; extern "C" {
 pub fn __iscanonicall ( __x : f64 , ) -> libc :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timex { pub modes : libc :: c_uint , pub offset : __syscall_slong_t , pub freq : __syscall_slong_t , pub maxerror : __syscall_slong_t , pub esterror : __syscall_slong_t , pub status : libc :: c_int , pub constant : __syscall_slong_t , pub precision : __syscall_slong_t , pub tolerance : __syscall_slong_t , pub time : timeval , pub tick : __syscall_slong_t , pub ppsfreq : __syscall_slong_t , pub jitter : __syscall_slong_t , pub shift : libc :: c_int , pub stabil : __syscall_slong_t , pub jitcnt : __syscall_slong_t , pub calcnt : __syscall_slong_t , pub errcnt : __syscall_slong_t , pub stbcnt : __syscall_slong_t , pub tai : libc :: c_int , pub _bitfield_1 : [ u32 ; 11usize ] , } # [ test ] fn bindgen_test_layout_timex ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timex > ( ) , 208usize , concat ! ( "Size of: " , stringify ! ( timex ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timex > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . modes as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( modes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . offset as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . freq as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( freq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . maxerror as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( maxerror ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . esterror as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( esterror ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . status as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( status ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . constant as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( constant ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . precision as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( precision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . tolerance as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( tolerance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . time as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . tick as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( tick ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . ppsfreq as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( ppsfreq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . jitter as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( jitter ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . shift as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( shift ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . stabil as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( stabil ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . jitcnt as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( jitcnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . calcnt as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( calcnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . errcnt as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( errcnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . stbcnt as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( stbcnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timex ) ) . tai as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( timex ) , "::" , stringify ! ( tai ) ) ) ; } extern "C" {
 pub fn clock_adjtime ( __clock_id : __clockid_t , __utx : * mut timex , ) -> libc :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct tm { pub tm_sec : libc :: c_int , pub tm_min : libc :: c_int , pub tm_hour : libc :: c_int , pub tm_mday : libc :: c_int , pub tm_mon : libc :: c_int , pub tm_year : libc :: c_int , pub tm_wday : libc :: c_int , pub tm_yday : libc :: c_int , pub tm_isdst : libc :: c_int , pub tm_gmtoff : libc :: c_long , pub tm_zone : * const libc :: c_char , } # [ test ] fn bindgen_test_layout_tm ( ) { assert_eq ! ( :: std :: mem :: size_of :: < tm > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( tm ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < tm > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( tm ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_min ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_hour ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mday ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mon ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_year ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_wday ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_yday ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_isdst ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_gmtoff ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_zone ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct itimerspec { pub it_interval : timespec , pub it_value : timespec , } # [ test ] fn bindgen_test_layout_itimerspec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < itimerspec > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( itimerspec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < itimerspec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( itimerspec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( itimerspec ) , "::" , stringify ! ( it_interval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( itimerspec ) , "::" , stringify ! ( it_value ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigevent { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn clock ( ) -> clock_t ; 
} extern "C" {
 pub fn time ( __timer : * mut time_t , ) -> time_t ; 
} extern "C" {
 pub fn difftime ( __time1 : time_t , __time0 : time_t , ) -> f64 ; 
} extern "C" {
 pub fn mktime ( __tp : * mut tm , ) -> time_t ; 
} extern "C" {
 pub fn strftime ( __s : * mut libc :: c_char , __maxsize : usize , __format : * const libc :: c_char , __tp : * const tm , ) -> usize ; 
} extern "C" {
 pub fn strptime ( __s : * const libc :: c_char , __fmt : * const libc :: c_char , __tp : * mut tm , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn strftime_l ( __s : * mut libc :: c_char , __maxsize : usize , __format : * const libc :: c_char , __tp : * const tm , __loc : locale_t , ) -> usize ; 
} extern "C" {
 pub fn strptime_l ( __s : * const libc :: c_char , __fmt : * const libc :: c_char , __tp : * mut tm , __loc : locale_t , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn gmtime ( __timer : * const time_t , ) -> * mut tm ; 
} extern "C" {
 pub fn localtime ( __timer : * const time_t , ) -> * mut tm ; 
} extern "C" {
 pub fn gmtime_r ( __timer : * const time_t , __tp : * mut tm , ) -> * mut tm ; 
} extern "C" {
 pub fn localtime_r ( __timer : * const time_t , __tp : * mut tm , ) -> * mut tm ; 
} extern "C" {
 pub fn asctime ( __tp : * const tm , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn ctime ( __timer : * const time_t , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn asctime_r ( __tp : * const tm , __buf : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn ctime_r ( __timer : * const time_t , __buf : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 # [ link_name = "\u{1}__tzname" ] 
 pub static mut  __tzname  :  [ * mut libc :: c_char ; 2usize ] ;
} extern "C" {
 # [ link_name = "\u{1}__daylight" ] 
 pub static mut  __daylight  :  libc :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}__timezone" ] 
 pub static mut  __timezone  :  libc :: c_long ;
} extern "C" {
 # [ link_name = "\u{1}tzname" ] 
 pub static mut  tzname  :  [ * mut libc :: c_char ; 2usize ] ;
} extern "C" {
 pub fn tzset ( ) ; 
} extern "C" {
 # [ link_name = "\u{1}daylight" ] 
 pub static mut  daylight  :  libc :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}timezone" ] 
 pub static mut  timezone  :  libc :: c_long ;
} extern "C" {
 pub fn stime ( __when : * const time_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timegm ( __tp : * mut tm , ) -> time_t ; 
} extern "C" {
 pub fn timelocal ( __tp : * mut tm , ) -> time_t ; 
} extern "C" {
 pub fn dysize ( __year : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn nanosleep ( __requested_time : * const timespec , __remaining : * mut timespec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clock_getres ( __clock_id : clockid_t , __res : * mut timespec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clock_gettime ( __clock_id : clockid_t , __tp : * mut timespec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clock_settime ( __clock_id : clockid_t , __tp : * const timespec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clock_nanosleep ( __clock_id : clockid_t , __flags : libc :: c_int , __req : * const timespec , __rem : * mut timespec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn clock_getcpuclockid ( __pid : pid_t , __clock_id : * mut clockid_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timer_create ( __clock_id : clockid_t , __evp : * mut sigevent , __timerid : * mut timer_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timer_delete ( __timerid : timer_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timer_settime ( __timerid : timer_t , __flags : libc :: c_int , __value : * const itimerspec , __ovalue : * mut itimerspec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timer_gettime ( __timerid : timer_t , __value : * mut itimerspec , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timer_getoverrun ( __timerid : timer_t , ) -> libc :: c_int ; 
} extern "C" {
 pub fn timespec_get ( __ts : * mut timespec , __base : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}getdate_err" ] 
 pub static mut  getdate_err  :  libc :: c_int ;
} extern "C" {
 pub fn getdate ( __string : * const libc :: c_char , ) -> * mut tm ; 
} extern "C" {
 pub fn getdate_r ( __string : * const libc :: c_char , __resbufp : * mut tm , ) -> libc :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MagickWand { _unused : [ u8 ; 0 ] } pub type MagickWand = _MagickWand ; pub type MagickFloatType = f32 ; pub type MagickDoubleType = f64 ; pub type Quantum = MagickFloatType ; pub type MagickRealType = MagickDoubleType ; pub type MagickStatusType = libc :: c_uint ; pub type MagickOffsetType = libc :: c_longlong ; pub type MagickSizeType = libc :: c_ulonglong ; pub type MagickAddressType = usize ; pub type QuantumAny = MagickSizeType ; pub const ClassType_UndefinedClass : ClassType = 0 ; pub const ClassType_DirectClass : ClassType = 1 ; pub const ClassType_PseudoClass : ClassType = 2 ; pub type ClassType = libc :: c_uint ; pub const MagickBooleanType_MagickFalse : MagickBooleanType = 0 ; pub const MagickBooleanType_MagickTrue : MagickBooleanType = 1 ; pub type MagickBooleanType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _BlobInfo { _unused : [ u8 ; 0 ] } pub type BlobInfo = _BlobInfo ; pub type ExceptionInfo = _ExceptionInfo ; pub type Image = _Image ; pub type ImageInfo = _ImageInfo ; extern "C" {
 pub fn AnimateImages ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const GeometryFlags_NoValue : GeometryFlags = 0 ; pub const GeometryFlags_XValue : GeometryFlags = 1 ; pub const GeometryFlags_XiValue : GeometryFlags = 1 ; pub const GeometryFlags_YValue : GeometryFlags = 2 ; pub const GeometryFlags_PsiValue : GeometryFlags = 2 ; pub const GeometryFlags_WidthValue : GeometryFlags = 4 ; pub const GeometryFlags_RhoValue : GeometryFlags = 4 ; pub const GeometryFlags_HeightValue : GeometryFlags = 8 ; pub const GeometryFlags_SigmaValue : GeometryFlags = 8 ; pub const GeometryFlags_ChiValue : GeometryFlags = 16 ; pub const GeometryFlags_XiNegative : GeometryFlags = 32 ; pub const GeometryFlags_XNegative : GeometryFlags = 32 ; pub const GeometryFlags_PsiNegative : GeometryFlags = 64 ; pub const GeometryFlags_YNegative : GeometryFlags = 64 ; pub const GeometryFlags_ChiNegative : GeometryFlags = 128 ; pub const GeometryFlags_PercentValue : GeometryFlags = 4096 ; pub const GeometryFlags_AspectValue : GeometryFlags = 8192 ; pub const GeometryFlags_NormalizeValue : GeometryFlags = 8192 ; pub const GeometryFlags_LessValue : GeometryFlags = 16384 ; pub const GeometryFlags_GreaterValue : GeometryFlags = 32768 ; pub const GeometryFlags_MinimumValue : GeometryFlags = 65536 ; pub const GeometryFlags_CorrelateNormalizeValue : GeometryFlags = 65536 ; pub const GeometryFlags_AreaValue : GeometryFlags = 131072 ; pub const GeometryFlags_DecimalValue : GeometryFlags = 262144 ; pub const GeometryFlags_SeparatorValue : GeometryFlags = 524288 ; pub const GeometryFlags_AspectRatioValue : GeometryFlags = 1048576 ; pub const GeometryFlags_AllValues : GeometryFlags = 2147483647 ; pub type GeometryFlags = libc :: c_uint ; pub const GravityType_UndefinedGravity : GravityType = 0 ; pub const GravityType_ForgetGravity : GravityType = 0 ; pub const GravityType_NorthWestGravity : GravityType = 1 ; pub const GravityType_NorthGravity : GravityType = 2 ; pub const GravityType_NorthEastGravity : GravityType = 3 ; pub const GravityType_WestGravity : GravityType = 4 ; pub const GravityType_CenterGravity : GravityType = 5 ; pub const GravityType_EastGravity : GravityType = 6 ; pub const GravityType_SouthWestGravity : GravityType = 7 ; pub const GravityType_SouthGravity : GravityType = 8 ; pub const GravityType_SouthEastGravity : GravityType = 9 ; pub type GravityType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _AffineMatrix { pub sx : f64 , pub rx : f64 , pub ry : f64 , pub sy : f64 , pub tx : f64 , pub ty : f64 , } # [ test ] fn bindgen_test_layout__AffineMatrix ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _AffineMatrix > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _AffineMatrix ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _AffineMatrix > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _AffineMatrix ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _AffineMatrix ) ) . sx as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _AffineMatrix ) , "::" , stringify ! ( sx ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _AffineMatrix ) ) . rx as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _AffineMatrix ) , "::" , stringify ! ( rx ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _AffineMatrix ) ) . ry as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _AffineMatrix ) , "::" , stringify ! ( ry ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _AffineMatrix ) ) . sy as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _AffineMatrix ) , "::" , stringify ! ( sy ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _AffineMatrix ) ) . tx as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _AffineMatrix ) , "::" , stringify ! ( tx ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _AffineMatrix ) ) . ty as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _AffineMatrix ) , "::" , stringify ! ( ty ) ) ) ; } pub type AffineMatrix = _AffineMatrix ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _GeometryInfo { pub rho : f64 , pub sigma : f64 , pub xi : f64 , pub psi : f64 , pub chi : f64 , } # [ test ] fn bindgen_test_layout__GeometryInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _GeometryInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _GeometryInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _GeometryInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _GeometryInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GeometryInfo ) ) . rho as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _GeometryInfo ) , "::" , stringify ! ( rho ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GeometryInfo ) ) . sigma as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _GeometryInfo ) , "::" , stringify ! ( sigma ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GeometryInfo ) ) . xi as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _GeometryInfo ) , "::" , stringify ! ( xi ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GeometryInfo ) ) . psi as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _GeometryInfo ) , "::" , stringify ! ( psi ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GeometryInfo ) ) . chi as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _GeometryInfo ) , "::" , stringify ! ( chi ) ) ) ; } pub type GeometryInfo = _GeometryInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _OffsetInfo { pub x : isize , pub y : isize , } # [ test ] fn bindgen_test_layout__OffsetInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _OffsetInfo > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _OffsetInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _OffsetInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _OffsetInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _OffsetInfo ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _OffsetInfo ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _OffsetInfo ) ) . y as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _OffsetInfo ) , "::" , stringify ! ( y ) ) ) ; } pub type OffsetInfo = _OffsetInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PointInfo { pub x : f64 , pub y : f64 , } # [ test ] fn bindgen_test_layout__PointInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _PointInfo > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _PointInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _PointInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _PointInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PointInfo ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _PointInfo ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PointInfo ) ) . y as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _PointInfo ) , "::" , stringify ! ( y ) ) ) ; } pub type PointInfo = _PointInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _RectangleInfo { pub width : usize , pub height : usize , pub x : isize , pub y : isize , } # [ test ] fn bindgen_test_layout__RectangleInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _RectangleInfo > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _RectangleInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _RectangleInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _RectangleInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _RectangleInfo ) ) . width as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _RectangleInfo ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _RectangleInfo ) ) . height as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _RectangleInfo ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _RectangleInfo ) ) . x as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _RectangleInfo ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _RectangleInfo ) ) . y as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _RectangleInfo ) , "::" , stringify ! ( y ) ) ) ; } pub type RectangleInfo = _RectangleInfo ; extern "C" {
 pub fn GetPageGeometry ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn IsGeometry ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsSceneGeometry ( arg1 : * const libc :: c_char , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetGeometry ( arg1 : * const libc :: c_char , arg2 : * mut isize , arg3 : * mut isize , arg4 : * mut usize , arg5 : * mut usize , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParseAbsoluteGeometry ( arg1 : * const libc :: c_char , arg2 : * mut RectangleInfo , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParseAffineGeometry ( arg1 : * const libc :: c_char , arg2 : * mut AffineMatrix , arg3 : * mut ExceptionInfo , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParseGeometry ( arg1 : * const libc :: c_char , arg2 : * mut GeometryInfo , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParseGravityGeometry ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut RectangleInfo , arg4 : * mut ExceptionInfo , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParseMetaGeometry ( arg1 : * const libc :: c_char , arg2 : * mut isize , arg3 : * mut isize , arg4 : * mut usize , arg5 : * mut usize , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParsePageGeometry ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut RectangleInfo , arg4 : * mut ExceptionInfo , ) -> MagickStatusType ; 
} extern "C" {
 pub fn ParseRegionGeometry ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut RectangleInfo , arg4 : * mut ExceptionInfo , ) -> MagickStatusType ; 
} extern "C" {
 pub fn GravityAdjustGeometry ( arg1 : usize , arg2 : usize , arg3 : GravityType , arg4 : * mut RectangleInfo , ) ; 
} extern "C" {
 pub fn SetGeometry ( arg1 : * const Image , arg2 : * mut RectangleInfo , ) ; 
} extern "C" {
 pub fn SetGeometryInfo ( arg1 : * mut GeometryInfo , ) ; 
} pub const AlphaChannelOption_UndefinedAlphaChannel : AlphaChannelOption = 0 ; pub const AlphaChannelOption_ActivateAlphaChannel : AlphaChannelOption = 1 ; pub const AlphaChannelOption_AssociateAlphaChannel : AlphaChannelOption = 2 ; pub const AlphaChannelOption_BackgroundAlphaChannel : AlphaChannelOption = 3 ; pub const AlphaChannelOption_CopyAlphaChannel : AlphaChannelOption = 4 ; pub const AlphaChannelOption_DeactivateAlphaChannel : AlphaChannelOption = 5 ; pub const AlphaChannelOption_DiscreteAlphaChannel : AlphaChannelOption = 6 ; pub const AlphaChannelOption_DisassociateAlphaChannel : AlphaChannelOption = 7 ; pub const AlphaChannelOption_ExtractAlphaChannel : AlphaChannelOption = 8 ; pub const AlphaChannelOption_OffAlphaChannel : AlphaChannelOption = 9 ; pub const AlphaChannelOption_OnAlphaChannel : AlphaChannelOption = 10 ; pub const AlphaChannelOption_OpaqueAlphaChannel : AlphaChannelOption = 11 ; pub const AlphaChannelOption_RemoveAlphaChannel : AlphaChannelOption = 12 ; pub const AlphaChannelOption_SetAlphaChannel : AlphaChannelOption = 13 ; pub const AlphaChannelOption_ShapeAlphaChannel : AlphaChannelOption = 14 ; pub const AlphaChannelOption_TransparentAlphaChannel : AlphaChannelOption = 15 ; pub type AlphaChannelOption = libc :: c_uint ; pub const ImageType_UndefinedType : ImageType = 0 ; pub const ImageType_BilevelType : ImageType = 1 ; pub const ImageType_GrayscaleType : ImageType = 2 ; pub const ImageType_GrayscaleAlphaType : ImageType = 3 ; pub const ImageType_PaletteType : ImageType = 4 ; pub const ImageType_PaletteAlphaType : ImageType = 5 ; pub const ImageType_TrueColorType : ImageType = 6 ; pub const ImageType_TrueColorAlphaType : ImageType = 7 ; pub const ImageType_ColorSeparationType : ImageType = 8 ; pub const ImageType_ColorSeparationAlphaType : ImageType = 9 ; pub const ImageType_OptimizeType : ImageType = 10 ; pub const ImageType_PaletteBilevelAlphaType : ImageType = 11 ; pub type ImageType = libc :: c_uint ; pub const InterlaceType_UndefinedInterlace : InterlaceType = 0 ; pub const InterlaceType_NoInterlace : InterlaceType = 1 ; pub const InterlaceType_LineInterlace : InterlaceType = 2 ; pub const InterlaceType_PlaneInterlace : InterlaceType = 3 ; pub const InterlaceType_PartitionInterlace : InterlaceType = 4 ; pub const InterlaceType_GIFInterlace : InterlaceType = 5 ; pub const InterlaceType_JPEGInterlace : InterlaceType = 6 ; pub const InterlaceType_PNGInterlace : InterlaceType = 7 ; pub type InterlaceType = libc :: c_uint ; pub const OrientationType_UndefinedOrientation : OrientationType = 0 ; pub const OrientationType_TopLeftOrientation : OrientationType = 1 ; pub const OrientationType_TopRightOrientation : OrientationType = 2 ; pub const OrientationType_BottomRightOrientation : OrientationType = 3 ; pub const OrientationType_BottomLeftOrientation : OrientationType = 4 ; pub const OrientationType_LeftTopOrientation : OrientationType = 5 ; pub const OrientationType_RightTopOrientation : OrientationType = 6 ; pub const OrientationType_RightBottomOrientation : OrientationType = 7 ; pub const OrientationType_LeftBottomOrientation : OrientationType = 8 ; pub type OrientationType = libc :: c_uint ; pub const ResolutionType_UndefinedResolution : ResolutionType = 0 ; pub const ResolutionType_PixelsPerInchResolution : ResolutionType = 1 ; pub const ResolutionType_PixelsPerCentimeterResolution : ResolutionType = 2 ; pub type ResolutionType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PrimaryInfo { pub x : f64 , pub y : f64 , pub z : f64 , } # [ test ] fn bindgen_test_layout__PrimaryInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _PrimaryInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _PrimaryInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _PrimaryInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _PrimaryInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimaryInfo ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimaryInfo ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimaryInfo ) ) . y as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimaryInfo ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimaryInfo ) ) . z as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimaryInfo ) , "::" , stringify ! ( z ) ) ) ; } pub type PrimaryInfo = _PrimaryInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _SegmentInfo { pub x1 : f64 , pub y1 : f64 , pub x2 : f64 , pub y2 : f64 , } # [ test ] fn bindgen_test_layout__SegmentInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _SegmentInfo > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _SegmentInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _SegmentInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _SegmentInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _SegmentInfo ) ) . x1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _SegmentInfo ) , "::" , stringify ! ( x1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _SegmentInfo ) ) . y1 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _SegmentInfo ) , "::" , stringify ! ( y1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _SegmentInfo ) ) . x2 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _SegmentInfo ) , "::" , stringify ! ( x2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _SegmentInfo ) ) . y2 as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _SegmentInfo ) , "::" , stringify ! ( y2 ) ) ) ; } pub type SegmentInfo = _SegmentInfo ; pub const TransmitType_UndefinedTransmitType : TransmitType = 0 ; pub const TransmitType_FileTransmitType : TransmitType = 1 ; pub const TransmitType_BlobTransmitType : TransmitType = 2 ; pub const TransmitType_StreamTransmitType : TransmitType = 3 ; pub const TransmitType_ImageTransmitType : TransmitType = 4 ; pub type TransmitType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ChromaticityInfo { pub red_primary : PrimaryInfo , pub green_primary : PrimaryInfo , pub blue_primary : PrimaryInfo , pub white_point : PrimaryInfo , } # [ test ] fn bindgen_test_layout__ChromaticityInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ChromaticityInfo > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( _ChromaticityInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ChromaticityInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ChromaticityInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChromaticityInfo ) ) . red_primary as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ChromaticityInfo ) , "::" , stringify ! ( red_primary ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChromaticityInfo ) ) . green_primary as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ChromaticityInfo ) , "::" , stringify ! ( green_primary ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChromaticityInfo ) ) . blue_primary as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _ChromaticityInfo ) , "::" , stringify ! ( blue_primary ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChromaticityInfo ) ) . white_point as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _ChromaticityInfo ) , "::" , stringify ! ( white_point ) ) ) ; } pub type ChromaticityInfo = _ChromaticityInfo ; pub const MapMode_ReadMode : MapMode = 0 ; pub const MapMode_WriteMode : MapMode = 1 ; pub const MapMode_IOMode : MapMode = 2 ; pub const MapMode_PersistMode : MapMode = 3 ; pub type MapMode = libc :: c_uint ; pub type CustomStreamHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_uchar , arg2 : usize , arg3 : * mut libc :: c_void ) -> isize > ; pub type CustomStreamSeeker = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MagickOffsetType , arg2 : libc :: c_int , arg3 : * mut libc :: c_void ) -> MagickOffsetType > ; pub type CustomStreamTeller = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> MagickOffsetType > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _CustomStreamInfo { _unused : [ u8 ; 0 ] } pub type CustomStreamInfo = _CustomStreamInfo ; pub const ColorspaceType_UndefinedColorspace : ColorspaceType = 0 ; pub const ColorspaceType_CMYColorspace : ColorspaceType = 1 ; pub const ColorspaceType_CMYKColorspace : ColorspaceType = 2 ; pub const ColorspaceType_GRAYColorspace : ColorspaceType = 3 ; pub const ColorspaceType_HCLColorspace : ColorspaceType = 4 ; pub const ColorspaceType_HCLpColorspace : ColorspaceType = 5 ; pub const ColorspaceType_HSBColorspace : ColorspaceType = 6 ; pub const ColorspaceType_HSIColorspace : ColorspaceType = 7 ; pub const ColorspaceType_HSLColorspace : ColorspaceType = 8 ; pub const ColorspaceType_HSVColorspace : ColorspaceType = 9 ; pub const ColorspaceType_HWBColorspace : ColorspaceType = 10 ; pub const ColorspaceType_LabColorspace : ColorspaceType = 11 ; pub const ColorspaceType_LCHColorspace : ColorspaceType = 12 ; pub const ColorspaceType_LCHabColorspace : ColorspaceType = 13 ; pub const ColorspaceType_LCHuvColorspace : ColorspaceType = 14 ; pub const ColorspaceType_LogColorspace : ColorspaceType = 15 ; pub const ColorspaceType_LMSColorspace : ColorspaceType = 16 ; pub const ColorspaceType_LuvColorspace : ColorspaceType = 17 ; pub const ColorspaceType_OHTAColorspace : ColorspaceType = 18 ; pub const ColorspaceType_Rec601YCbCrColorspace : ColorspaceType = 19 ; pub const ColorspaceType_Rec709YCbCrColorspace : ColorspaceType = 20 ; pub const ColorspaceType_RGBColorspace : ColorspaceType = 21 ; pub const ColorspaceType_scRGBColorspace : ColorspaceType = 22 ; pub const ColorspaceType_sRGBColorspace : ColorspaceType = 23 ; pub const ColorspaceType_TransparentColorspace : ColorspaceType = 24 ; pub const ColorspaceType_xyYColorspace : ColorspaceType = 25 ; pub const ColorspaceType_XYZColorspace : ColorspaceType = 26 ; pub const ColorspaceType_YCbCrColorspace : ColorspaceType = 27 ; pub const ColorspaceType_YCCColorspace : ColorspaceType = 28 ; pub const ColorspaceType_YDbDrColorspace : ColorspaceType = 29 ; pub const ColorspaceType_YIQColorspace : ColorspaceType = 30 ; pub const ColorspaceType_YPbPrColorspace : ColorspaceType = 31 ; pub const ColorspaceType_YUVColorspace : ColorspaceType = 32 ; pub const ColorspaceType_LinearGRAYColorspace : ColorspaceType = 33 ; pub const ColorspaceType_JzazbzColorspace : ColorspaceType = 34 ; pub type ColorspaceType = libc :: c_uint ; extern "C" {
 pub fn GetImageColorspaceType ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> ColorspaceType ; 
} extern "C" {
 pub fn SetImageColorspace ( arg1 : * mut Image , arg2 : ColorspaceType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageGray ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageMonochrome ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn TransformImageColorspace ( arg1 : * mut Image , arg2 : ColorspaceType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const ChannelType_UndefinedChannel : ChannelType = 0 ; pub const ChannelType_RedChannel : ChannelType = 1 ; pub const ChannelType_GrayChannel : ChannelType = 1 ; pub const ChannelType_CyanChannel : ChannelType = 1 ; pub const ChannelType_GreenChannel : ChannelType = 2 ; pub const ChannelType_MagentaChannel : ChannelType = 2 ; pub const ChannelType_BlueChannel : ChannelType = 4 ; pub const ChannelType_YellowChannel : ChannelType = 4 ; pub const ChannelType_BlackChannel : ChannelType = 8 ; pub const ChannelType_AlphaChannel : ChannelType = 16 ; pub const ChannelType_OpacityChannel : ChannelType = 16 ; pub const ChannelType_IndexChannel : ChannelType = 32 ; pub const ChannelType_ReadMaskChannel : ChannelType = 64 ; pub const ChannelType_WriteMaskChannel : ChannelType = 128 ; pub const ChannelType_MetaChannel : ChannelType = 256 ; pub const ChannelType_CompositeMaskChannel : ChannelType = 512 ; pub const ChannelType_CompositeChannels : ChannelType = 31 ; pub const ChannelType_AllChannels : ChannelType = 134217727 ; pub const ChannelType_TrueAlphaChannel : ChannelType = 256 ; pub const ChannelType_RGBChannels : ChannelType = 512 ; pub const ChannelType_GrayChannels : ChannelType = 1024 ; pub const ChannelType_SyncChannels : ChannelType = 131072 ; pub const ChannelType_DefaultChannels : ChannelType = 134217727 ; pub type ChannelType = libc :: c_uint ; pub const PixelChannel_UndefinedPixelChannel : PixelChannel = 0 ; pub const PixelChannel_RedPixelChannel : PixelChannel = 0 ; pub const PixelChannel_CyanPixelChannel : PixelChannel = 0 ; pub const PixelChannel_GrayPixelChannel : PixelChannel = 0 ; pub const PixelChannel_LPixelChannel : PixelChannel = 0 ; pub const PixelChannel_LabelPixelChannel : PixelChannel = 0 ; pub const PixelChannel_YPixelChannel : PixelChannel = 0 ; pub const PixelChannel_aPixelChannel : PixelChannel = 1 ; pub const PixelChannel_GreenPixelChannel : PixelChannel = 1 ; pub const PixelChannel_MagentaPixelChannel : PixelChannel = 1 ; pub const PixelChannel_CbPixelChannel : PixelChannel = 1 ; pub const PixelChannel_bPixelChannel : PixelChannel = 2 ; pub const PixelChannel_BluePixelChannel : PixelChannel = 2 ; pub const PixelChannel_YellowPixelChannel : PixelChannel = 2 ; pub const PixelChannel_CrPixelChannel : PixelChannel = 2 ; pub const PixelChannel_BlackPixelChannel : PixelChannel = 3 ; pub const PixelChannel_AlphaPixelChannel : PixelChannel = 4 ; pub const PixelChannel_IndexPixelChannel : PixelChannel = 5 ; pub const PixelChannel_ReadMaskPixelChannel : PixelChannel = 6 ; pub const PixelChannel_WriteMaskPixelChannel : PixelChannel = 7 ; pub const PixelChannel_MetaPixelChannel : PixelChannel = 8 ; pub const PixelChannel_CompositeMaskPixelChannel : PixelChannel = 9 ; pub const PixelChannel_IntensityPixelChannel : PixelChannel = 32 ; pub const PixelChannel_CompositePixelChannel : PixelChannel = 32 ; pub const PixelChannel_SyncPixelChannel : PixelChannel = 33 ; pub type PixelChannel = libc :: c_uint ; pub const PixelIntensityMethod_UndefinedPixelIntensityMethod : PixelIntensityMethod = 0 ; pub const PixelIntensityMethod_AveragePixelIntensityMethod : PixelIntensityMethod = 1 ; pub const PixelIntensityMethod_BrightnessPixelIntensityMethod : PixelIntensityMethod = 2 ; pub const PixelIntensityMethod_LightnessPixelIntensityMethod : PixelIntensityMethod = 3 ; pub const PixelIntensityMethod_MSPixelIntensityMethod : PixelIntensityMethod = 4 ; pub const PixelIntensityMethod_Rec601LumaPixelIntensityMethod : PixelIntensityMethod = 5 ; pub const PixelIntensityMethod_Rec601LuminancePixelIntensityMethod : PixelIntensityMethod = 6 ; pub const PixelIntensityMethod_Rec709LumaPixelIntensityMethod : PixelIntensityMethod = 7 ; pub const PixelIntensityMethod_Rec709LuminancePixelIntensityMethod : PixelIntensityMethod = 8 ; pub const PixelIntensityMethod_RMSPixelIntensityMethod : PixelIntensityMethod = 9 ; pub type PixelIntensityMethod = libc :: c_uint ; pub const PixelInterpolateMethod_UndefinedInterpolatePixel : PixelInterpolateMethod = 0 ; pub const PixelInterpolateMethod_AverageInterpolatePixel : PixelInterpolateMethod = 1 ; pub const PixelInterpolateMethod_Average9InterpolatePixel : PixelInterpolateMethod = 2 ; pub const PixelInterpolateMethod_Average16InterpolatePixel : PixelInterpolateMethod = 3 ; pub const PixelInterpolateMethod_BackgroundInterpolatePixel : PixelInterpolateMethod = 4 ; pub const PixelInterpolateMethod_BilinearInterpolatePixel : PixelInterpolateMethod = 5 ; pub const PixelInterpolateMethod_BlendInterpolatePixel : PixelInterpolateMethod = 6 ; pub const PixelInterpolateMethod_CatromInterpolatePixel : PixelInterpolateMethod = 7 ; pub const PixelInterpolateMethod_IntegerInterpolatePixel : PixelInterpolateMethod = 8 ; pub const PixelInterpolateMethod_MeshInterpolatePixel : PixelInterpolateMethod = 9 ; pub const PixelInterpolateMethod_NearestInterpolatePixel : PixelInterpolateMethod = 10 ; pub const PixelInterpolateMethod_SplineInterpolatePixel : PixelInterpolateMethod = 11 ; pub type PixelInterpolateMethod = libc :: c_uint ; pub const PixelMask_UndefinedPixelMask : PixelMask = 0 ; pub const PixelMask_ReadPixelMask : PixelMask = 1 ; pub const PixelMask_WritePixelMask : PixelMask = 2 ; pub const PixelMask_CompositePixelMask : PixelMask = 4 ; pub type PixelMask = libc :: c_uint ; pub const PixelTrait_UndefinedPixelTrait : PixelTrait = 0 ; pub const PixelTrait_CopyPixelTrait : PixelTrait = 1 ; pub const PixelTrait_UpdatePixelTrait : PixelTrait = 2 ; pub const PixelTrait_BlendPixelTrait : PixelTrait = 4 ; pub type PixelTrait = libc :: c_uint ; pub const StorageType_UndefinedPixel : StorageType = 0 ; pub const StorageType_CharPixel : StorageType = 1 ; pub const StorageType_DoublePixel : StorageType = 2 ; pub const StorageType_FloatPixel : StorageType = 3 ; pub const StorageType_LongPixel : StorageType = 4 ; pub const StorageType_LongLongPixel : StorageType = 5 ; pub const StorageType_QuantumPixel : StorageType = 6 ; pub const StorageType_ShortPixel : StorageType = 7 ; pub type StorageType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PixelChannelMap { pub channel : PixelChannel , pub traits : PixelTrait , pub offset : isize , } # [ test ] fn bindgen_test_layout__PixelChannelMap ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _PixelChannelMap > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _PixelChannelMap ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _PixelChannelMap > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _PixelChannelMap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelChannelMap ) ) . channel as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelChannelMap ) , "::" , stringify ! ( channel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelChannelMap ) ) . traits as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelChannelMap ) , "::" , stringify ! ( traits ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelChannelMap ) ) . offset as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelChannelMap ) , "::" , stringify ! ( offset ) ) ) ; } pub type PixelChannelMap = _PixelChannelMap ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PixelInfo { pub storage_class : ClassType , pub colorspace : ColorspaceType , pub alpha_trait : PixelTrait , pub fuzz : f64 , pub depth : usize , pub count : MagickSizeType , pub red : MagickRealType , pub green : MagickRealType , pub blue : MagickRealType , pub black : MagickRealType , pub alpha : MagickRealType , pub index : MagickRealType , } # [ test ] fn bindgen_test_layout__PixelInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _PixelInfo > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( _PixelInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _PixelInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _PixelInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . storage_class as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( storage_class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . colorspace as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( colorspace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . alpha_trait as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( alpha_trait ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . fuzz as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( fuzz ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . depth as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . count as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . red as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( red ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . green as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( green ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . blue as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( blue ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . black as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( black ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . alpha as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( alpha ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelInfo ) ) . index as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelInfo ) , "::" , stringify ! ( index ) ) ) ; } pub type PixelInfo = _PixelInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PixelPacket { pub red : libc :: c_uint , pub green : libc :: c_uint , pub blue : libc :: c_uint , pub alpha : libc :: c_uint , pub black : libc :: c_uint , } # [ test ] fn bindgen_test_layout__PixelPacket ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _PixelPacket > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( _PixelPacket ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _PixelPacket > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _PixelPacket ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelPacket ) ) . red as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelPacket ) , "::" , stringify ! ( red ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelPacket ) ) . green as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelPacket ) , "::" , stringify ! ( green ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelPacket ) ) . blue as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelPacket ) , "::" , stringify ! ( blue ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelPacket ) ) . alpha as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelPacket ) , "::" , stringify ! ( alpha ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PixelPacket ) ) . black as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _PixelPacket ) , "::" , stringify ! ( black ) ) ) ; } pub type PixelPacket = _PixelPacket ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _CacheView { _unused : [ u8 ; 0 ] } pub type CacheView_ = _CacheView ; extern "C" {
 pub fn SetPixelChannelMask ( arg1 : * mut Image , arg2 : ChannelType , ) -> ChannelType ; 
} extern "C" {
 pub fn ExportImagePixels ( arg1 : * const Image , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * const libc :: c_char , arg7 : StorageType , arg8 : * mut libc :: c_void , arg9 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ImportImagePixels ( arg1 : * mut Image , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * const libc :: c_char , arg7 : StorageType , arg8 : * const libc :: c_void , arg9 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InterpolatePixelChannel ( arg1 : * const Image , arg2 : * const CacheView_ , arg3 : PixelChannel , arg4 : PixelInterpolateMethod , arg5 : f64 , arg6 : f64 , arg7 : * mut f64 , arg8 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InterpolatePixelChannels ( arg1 : * const Image , arg2 : * const CacheView_ , arg3 : * const Image , arg4 : PixelInterpolateMethod , arg5 : f64 , arg6 : f64 , arg7 : * mut Quantum , arg8 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InterpolatePixelInfo ( arg1 : * const Image , arg2 : * const CacheView_ , arg3 : PixelInterpolateMethod , arg4 : f64 , arg5 : f64 , arg6 : * mut PixelInfo , arg7 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsFuzzyEquivalencePixel ( arg1 : * const Image , arg2 : * const Quantum , arg3 : * const Image , arg4 : * const Quantum , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsFuzzyEquivalencePixelInfo ( arg1 : * const PixelInfo , arg2 : * const PixelInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetPixelMetaChannels ( arg1 : * mut Image , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetPixelInfoIntensity ( arg1 : * const Image , arg2 : * const PixelInfo , ) -> MagickRealType ; 
} extern "C" {
 pub fn GetPixelIntensity ( arg1 : * const Image , arg2 : * const Quantum , ) -> MagickRealType ; 
} extern "C" {
 pub fn AcquirePixelChannelMap ( ) -> * mut PixelChannelMap ; 
} extern "C" {
 pub fn ClonePixelChannelMap ( arg1 : * mut PixelChannelMap , ) -> * mut PixelChannelMap ; 
} extern "C" {
 pub fn DestroyPixelChannelMap ( arg1 : * mut PixelChannelMap , ) -> * mut PixelChannelMap ; 
} extern "C" {
 pub fn ClonePixelInfo ( arg1 : * const PixelInfo , ) -> * mut PixelInfo ; 
} extern "C" {
 pub fn DecodePixelGamma ( arg1 : MagickRealType , ) -> MagickRealType ; 
} extern "C" {
 pub fn EncodePixelGamma ( arg1 : MagickRealType , ) -> MagickRealType ; 
} extern "C" {
 pub fn ConformPixelInfo ( arg1 : * mut Image , arg2 : * const PixelInfo , arg3 : * mut PixelInfo , arg4 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn GetPixelInfo ( arg1 : * const Image , arg2 : * mut PixelInfo , ) ; 
} extern "C" {
 pub fn InitializePixelChannelMap ( arg1 : * mut Image , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _StreamInfo { _unused : [ u8 ; 0 ] } pub type StreamInfo = _StreamInfo ; pub type StreamHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const Image , arg2 : * const libc :: c_void , arg3 : usize ) -> usize > ; extern "C" {
 pub fn ReadStream ( arg1 : * const ImageInfo , arg2 : StreamHandler , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn StreamImage ( arg1 : * const ImageInfo , arg2 : * mut StreamInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn OpenStream ( arg1 : * const ImageInfo , arg2 : * mut StreamInfo , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn WriteStream ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : StreamHandler , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AcquireStreamInfo ( arg1 : * const ImageInfo , arg2 : * mut ExceptionInfo , ) -> * mut StreamInfo ; 
} extern "C" {
 pub fn DestroyStreamInfo ( arg1 : * mut StreamInfo , ) -> * mut StreamInfo ; 
} extern "C" {
 pub fn SetStreamInfoMap ( arg1 : * mut StreamInfo , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn SetStreamInfoStorageType ( arg1 : * mut StreamInfo , arg2 : StorageType , ) ; 
} extern "C" {
 pub fn AcquireCustomStreamInfo ( arg1 : * mut ExceptionInfo , ) -> * mut CustomStreamInfo ; 
} extern "C" {
 pub fn DestroyCustomStreamInfo ( arg1 : * mut CustomStreamInfo , ) -> * mut CustomStreamInfo ; 
} extern "C" {
 pub fn GetBlobFileHandle ( arg1 : * const Image , ) -> * mut FILE ; 
} extern "C" {
 pub fn BlobToImage ( arg1 : * const ImageInfo , arg2 : * const libc :: c_void , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PingBlob ( arg1 : * const ImageInfo , arg2 : * const libc :: c_void , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CustomStreamToImage ( arg1 : * const ImageInfo , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn BlobToFile ( arg1 : * mut libc :: c_char , arg2 : * const libc :: c_void , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn FileToImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetBlobError ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ImageToFile ( arg1 : * mut Image , arg2 : * mut libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InjectImageBlob ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut Image , arg4 : * const libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsBlobExempt ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsBlobSeekable ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsBlobTemporary ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetBlobSize ( arg1 : * const Image , ) -> MagickSizeType ; 
} extern "C" {
 pub fn GetBlobStreamHandler ( arg1 : * const Image , ) -> StreamHandler ; 
} extern "C" {
 pub fn GetBlobStreamData ( arg1 : * const Image , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn DestroyBlob ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn DuplicateBlob ( arg1 : * mut Image , arg2 : * const Image , ) ; 
} extern "C" {
 pub fn FileToBlob ( arg1 : * const libc :: c_char , arg2 : usize , arg3 : * mut usize , arg4 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ImageToBlob ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut usize , arg4 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ImageToCustomStream ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn ImagesToBlob ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut usize , arg4 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ImagesToCustomStream ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn SetBlobExempt ( arg1 : * mut Image , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn SetCustomStreamData ( arg1 : * mut CustomStreamInfo , arg2 : * mut libc :: c_void , ) ; 
} extern "C" {
 pub fn SetCustomStreamReader ( arg1 : * mut CustomStreamInfo , arg2 : CustomStreamHandler , ) ; 
} extern "C" {
 pub fn SetCustomStreamSeeker ( arg1 : * mut CustomStreamInfo , arg2 : CustomStreamSeeker , ) ; 
} extern "C" {
 pub fn SetCustomStreamTeller ( arg1 : * mut CustomStreamInfo , arg2 : CustomStreamTeller , ) ; 
} extern "C" {
 pub fn SetCustomStreamWriter ( arg1 : * mut CustomStreamInfo , arg2 : CustomStreamHandler , ) ; 
} pub const VirtualPixelMethod_UndefinedVirtualPixelMethod : VirtualPixelMethod = 0 ; pub const VirtualPixelMethod_BackgroundVirtualPixelMethod : VirtualPixelMethod = 1 ; pub const VirtualPixelMethod_DitherVirtualPixelMethod : VirtualPixelMethod = 2 ; pub const VirtualPixelMethod_EdgeVirtualPixelMethod : VirtualPixelMethod = 3 ; pub const VirtualPixelMethod_MirrorVirtualPixelMethod : VirtualPixelMethod = 4 ; pub const VirtualPixelMethod_RandomVirtualPixelMethod : VirtualPixelMethod = 5 ; pub const VirtualPixelMethod_TileVirtualPixelMethod : VirtualPixelMethod = 6 ; pub const VirtualPixelMethod_TransparentVirtualPixelMethod : VirtualPixelMethod = 7 ; pub const VirtualPixelMethod_MaskVirtualPixelMethod : VirtualPixelMethod = 8 ; pub const VirtualPixelMethod_BlackVirtualPixelMethod : VirtualPixelMethod = 9 ; pub const VirtualPixelMethod_GrayVirtualPixelMethod : VirtualPixelMethod = 10 ; pub const VirtualPixelMethod_WhiteVirtualPixelMethod : VirtualPixelMethod = 11 ; pub const VirtualPixelMethod_HorizontalTileVirtualPixelMethod : VirtualPixelMethod = 12 ; pub const VirtualPixelMethod_VerticalTileVirtualPixelMethod : VirtualPixelMethod = 13 ; pub const VirtualPixelMethod_HorizontalTileEdgeVirtualPixelMethod : VirtualPixelMethod = 14 ; pub const VirtualPixelMethod_VerticalTileEdgeVirtualPixelMethod : VirtualPixelMethod = 15 ; pub const VirtualPixelMethod_CheckerTileVirtualPixelMethod : VirtualPixelMethod = 16 ; pub type VirtualPixelMethod = libc :: c_uint ; pub type CacheView = _CacheView ; extern "C" {
 pub fn AcquireAuthenticCacheView ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut CacheView ; 
} extern "C" {
 pub fn AcquireVirtualCacheView ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut CacheView ; 
} extern "C" {
 pub fn CloneCacheView ( arg1 : * const CacheView , ) -> * mut CacheView ; 
} extern "C" {
 pub fn DestroyCacheView ( arg1 : * mut CacheView , ) -> * mut CacheView ; 
} extern "C" {
 pub fn GetCacheViewStorageClass ( arg1 : * const CacheView , ) -> ClassType ; 
} extern "C" {
 pub fn GetCacheViewColorspace ( arg1 : * const CacheView , ) -> ColorspaceType ; 
} extern "C" {
 pub fn GetCacheViewImage ( arg1 : * const CacheView , ) -> * const Image ; 
} extern "C" {
 pub fn GetCacheViewVirtualPixels ( arg1 : * const CacheView , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * const Quantum ; 
} extern "C" {
 pub fn GetCacheViewVirtualPixelQueue ( arg1 : * const CacheView , ) -> * const Quantum ; 
} extern "C" {
 pub fn GetCacheViewVirtualMetacontent ( arg1 : * const CacheView , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn GetOneCacheViewAuthenticPixel ( arg1 : * const CacheView , arg2 : isize , arg3 : isize , arg4 : * mut Quantum , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetOneCacheViewVirtualMethodPixel ( arg1 : * const CacheView , arg2 : VirtualPixelMethod , arg3 : isize , arg4 : isize , arg5 : * mut Quantum , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetOneCacheViewVirtualPixel ( arg1 : * const CacheView , arg2 : isize , arg3 : isize , arg4 : * mut Quantum , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetOneCacheViewVirtualPixelInfo ( arg1 : * const CacheView , arg2 : isize , arg3 : isize , arg4 : * mut PixelInfo , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetCacheViewStorageClass ( arg1 : * mut CacheView , arg2 : ClassType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetCacheViewVirtualPixelMethod ( arg1 : * mut CacheView , arg2 : VirtualPixelMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SyncCacheViewAuthenticPixels ( arg1 : * mut CacheView , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetCacheViewExtent ( arg1 : * const CacheView , ) -> MagickSizeType ; 
} extern "C" {
 pub fn GetCacheViewAuthenticPixelQueue ( arg1 : * mut CacheView , ) -> * mut Quantum ; 
} extern "C" {
 pub fn GetCacheViewAuthenticPixels ( arg1 : * mut CacheView , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * mut Quantum ; 
} extern "C" {
 pub fn QueueCacheViewAuthenticPixels ( arg1 : * mut CacheView , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * mut Quantum ; 
} extern "C" {
 pub fn GetCacheViewAuthenticMetacontent ( arg1 : * mut CacheView , ) -> * mut libc :: c_void ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct SemaphoreInfo { _unused : [ u8 ; 0 ] } extern "C" {
 pub fn AcquireSemaphoreInfo ( ) -> * mut SemaphoreInfo ; 
} extern "C" {
 pub fn ActivateSemaphoreInfo ( arg1 : * mut * mut SemaphoreInfo , ) ; 
} extern "C" {
 pub fn LockSemaphoreInfo ( arg1 : * mut SemaphoreInfo , ) ; 
} extern "C" {
 pub fn RelinquishSemaphoreInfo ( arg1 : * mut * mut SemaphoreInfo , ) ; 
} extern "C" {
 pub fn UnlockSemaphoreInfo ( arg1 : * mut SemaphoreInfo , ) ; 
} pub const ExceptionType_UndefinedException : ExceptionType = 0 ; pub const ExceptionType_WarningException : ExceptionType = 300 ; pub const ExceptionType_ResourceLimitWarning : ExceptionType = 300 ; pub const ExceptionType_TypeWarning : ExceptionType = 305 ; pub const ExceptionType_OptionWarning : ExceptionType = 310 ; pub const ExceptionType_DelegateWarning : ExceptionType = 315 ; pub const ExceptionType_MissingDelegateWarning : ExceptionType = 320 ; pub const ExceptionType_CorruptImageWarning : ExceptionType = 325 ; pub const ExceptionType_FileOpenWarning : ExceptionType = 330 ; pub const ExceptionType_BlobWarning : ExceptionType = 335 ; pub const ExceptionType_StreamWarning : ExceptionType = 340 ; pub const ExceptionType_CacheWarning : ExceptionType = 345 ; pub const ExceptionType_CoderWarning : ExceptionType = 350 ; pub const ExceptionType_FilterWarning : ExceptionType = 352 ; pub const ExceptionType_ModuleWarning : ExceptionType = 355 ; pub const ExceptionType_DrawWarning : ExceptionType = 360 ; pub const ExceptionType_ImageWarning : ExceptionType = 365 ; pub const ExceptionType_WandWarning : ExceptionType = 370 ; pub const ExceptionType_RandomWarning : ExceptionType = 375 ; pub const ExceptionType_XServerWarning : ExceptionType = 380 ; pub const ExceptionType_MonitorWarning : ExceptionType = 385 ; pub const ExceptionType_RegistryWarning : ExceptionType = 390 ; pub const ExceptionType_ConfigureWarning : ExceptionType = 395 ; pub const ExceptionType_PolicyWarning : ExceptionType = 399 ; pub const ExceptionType_ErrorException : ExceptionType = 400 ; pub const ExceptionType_ResourceLimitError : ExceptionType = 400 ; pub const ExceptionType_TypeError : ExceptionType = 405 ; pub const ExceptionType_OptionError : ExceptionType = 410 ; pub const ExceptionType_DelegateError : ExceptionType = 415 ; pub const ExceptionType_MissingDelegateError : ExceptionType = 420 ; pub const ExceptionType_CorruptImageError : ExceptionType = 425 ; pub const ExceptionType_FileOpenError : ExceptionType = 430 ; pub const ExceptionType_BlobError : ExceptionType = 435 ; pub const ExceptionType_StreamError : ExceptionType = 440 ; pub const ExceptionType_CacheError : ExceptionType = 445 ; pub const ExceptionType_CoderError : ExceptionType = 450 ; pub const ExceptionType_FilterError : ExceptionType = 452 ; pub const ExceptionType_ModuleError : ExceptionType = 455 ; pub const ExceptionType_DrawError : ExceptionType = 460 ; pub const ExceptionType_ImageError : ExceptionType = 465 ; pub const ExceptionType_WandError : ExceptionType = 470 ; pub const ExceptionType_RandomError : ExceptionType = 475 ; pub const ExceptionType_XServerError : ExceptionType = 480 ; pub const ExceptionType_MonitorError : ExceptionType = 485 ; pub const ExceptionType_RegistryError : ExceptionType = 490 ; pub const ExceptionType_ConfigureError : ExceptionType = 495 ; pub const ExceptionType_PolicyError : ExceptionType = 499 ; pub const ExceptionType_FatalErrorException : ExceptionType = 700 ; pub const ExceptionType_ResourceLimitFatalError : ExceptionType = 700 ; pub const ExceptionType_TypeFatalError : ExceptionType = 705 ; pub const ExceptionType_OptionFatalError : ExceptionType = 710 ; pub const ExceptionType_DelegateFatalError : ExceptionType = 715 ; pub const ExceptionType_MissingDelegateFatalError : ExceptionType = 720 ; pub const ExceptionType_CorruptImageFatalError : ExceptionType = 725 ; pub const ExceptionType_FileOpenFatalError : ExceptionType = 730 ; pub const ExceptionType_BlobFatalError : ExceptionType = 735 ; pub const ExceptionType_StreamFatalError : ExceptionType = 740 ; pub const ExceptionType_CacheFatalError : ExceptionType = 745 ; pub const ExceptionType_CoderFatalError : ExceptionType = 750 ; pub const ExceptionType_FilterFatalError : ExceptionType = 752 ; pub const ExceptionType_ModuleFatalError : ExceptionType = 755 ; pub const ExceptionType_DrawFatalError : ExceptionType = 760 ; pub const ExceptionType_ImageFatalError : ExceptionType = 765 ; pub const ExceptionType_WandFatalError : ExceptionType = 770 ; pub const ExceptionType_RandomFatalError : ExceptionType = 775 ; pub const ExceptionType_XServerFatalError : ExceptionType = 780 ; pub const ExceptionType_MonitorFatalError : ExceptionType = 785 ; pub const ExceptionType_RegistryFatalError : ExceptionType = 790 ; pub const ExceptionType_ConfigureFatalError : ExceptionType = 795 ; pub const ExceptionType_PolicyFatalError : ExceptionType = 799 ; pub type ExceptionType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ExceptionInfo { pub severity : ExceptionType , pub error_number : libc :: c_int , pub reason : * mut libc :: c_char , pub description : * mut libc :: c_char , pub exceptions : * mut libc :: c_void , pub relinquish : MagickBooleanType , pub semaphore : * mut SemaphoreInfo , pub signature : usize , } # [ test ] fn bindgen_test_layout__ExceptionInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ExceptionInfo > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( _ExceptionInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ExceptionInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ExceptionInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . severity as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( severity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . error_number as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( error_number ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . reason as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( reason ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . description as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( description ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . exceptions as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( exceptions ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . relinquish as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( relinquish ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . semaphore as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( semaphore ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ExceptionInfo ) ) . signature as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _ExceptionInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type ErrorHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : ExceptionType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char ) > ; pub type FatalErrorHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : ExceptionType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char ) > ; pub type WarningHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : ExceptionType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char ) > ; extern "C" {
 pub fn GetExceptionMessage ( arg1 : libc :: c_int , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetLocaleExceptionMessage ( arg1 : ExceptionType , arg2 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn SetErrorHandler ( arg1 : ErrorHandler , ) -> ErrorHandler ; 
} extern "C" {
 pub fn AcquireExceptionInfo ( ) -> * mut ExceptionInfo ; 
} extern "C" {
 pub fn CloneExceptionInfo ( arg1 : * mut ExceptionInfo , ) -> * mut ExceptionInfo ; 
} extern "C" {
 pub fn DestroyExceptionInfo ( arg1 : * mut ExceptionInfo , ) -> * mut ExceptionInfo ; 
} extern "C" {
 pub fn SetFatalErrorHandler ( arg1 : FatalErrorHandler , ) -> FatalErrorHandler ; 
} extern "C" {
 pub fn ThrowException ( arg1 : * mut ExceptionInfo , arg2 : ExceptionType , arg3 : * const libc :: c_char , arg4 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ThrowMagickExceptionList ( arg1 : * mut ExceptionInfo , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : usize , arg5 : ExceptionType , arg6 : * const libc :: c_char , arg7 : * const libc :: c_char , arg8 : * mut __va_list_tag , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ThrowMagickException ( arg1 : * mut ExceptionInfo , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : usize , arg5 : ExceptionType , arg6 : * const libc :: c_char , arg7 : * const libc :: c_char , ... ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CatchException ( arg1 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn ClearMagickException ( arg1 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn InheritException ( arg1 : * mut ExceptionInfo , arg2 : * const ExceptionInfo , ) ; 
} extern "C" {
 pub fn MagickError ( arg1 : ExceptionType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn MagickFatalError ( arg1 : ExceptionType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn MagickWarning ( arg1 : ExceptionType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn SetWarningHandler ( arg1 : WarningHandler , ) -> WarningHandler ; 
} pub const ComplianceType_UndefinedCompliance : ComplianceType = 0 ; pub const ComplianceType_NoCompliance : ComplianceType = 0 ; pub const ComplianceType_CSSCompliance : ComplianceType = 1 ; pub const ComplianceType_SVGCompliance : ComplianceType = 1 ; pub const ComplianceType_X11Compliance : ComplianceType = 2 ; pub const ComplianceType_XPMCompliance : ComplianceType = 4 ; pub const ComplianceType_MVGCompliance : ComplianceType = 8 ; pub const ComplianceType_AllCompliance : ComplianceType = 2147483647 ; pub type ComplianceType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ColorInfo { pub path : * mut libc :: c_char , pub name : * mut libc :: c_char , pub compliance : ComplianceType , pub color : PixelInfo , pub exempt : MagickBooleanType , pub stealth : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__ColorInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ColorInfo > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( _ColorInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ColorInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ColorInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . name as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . compliance as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( compliance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . color as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . exempt as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( exempt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . stealth as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ColorInfo ) ) . signature as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _ColorInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type ColorInfo = _ColorInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ErrorInfo { pub mean_error_per_pixel : f64 , pub normalized_mean_error : f64 , pub normalized_maximum_error : f64 , } # [ test ] fn bindgen_test_layout__ErrorInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ErrorInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _ErrorInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ErrorInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ErrorInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ErrorInfo ) ) . mean_error_per_pixel as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ErrorInfo ) , "::" , stringify ! ( mean_error_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ErrorInfo ) ) . normalized_mean_error as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ErrorInfo ) , "::" , stringify ! ( normalized_mean_error ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ErrorInfo ) ) . normalized_maximum_error as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ErrorInfo ) , "::" , stringify ! ( normalized_maximum_error ) ) ) ; } pub type ErrorInfo = _ErrorInfo ; extern "C" {
 pub fn GetColorList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetColorInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * const ColorInfo ; 
} extern "C" {
 pub fn GetColorInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const ColorInfo ; 
} extern "C" {
 pub fn IsEquivalentImage ( arg1 : * const Image , arg2 : * const Image , x : * mut isize , y : * mut isize , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListColorInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn QueryColorCompliance ( arg1 : * const libc :: c_char , arg2 : ComplianceType , arg3 : * mut PixelInfo , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn QueryColorname ( arg1 : * const Image , arg2 : * const PixelInfo , arg3 : ComplianceType , arg4 : * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ConcatenateColorComponent ( arg1 : * const PixelInfo , arg2 : PixelChannel , arg3 : ComplianceType , arg4 : * mut libc :: c_char , ) ; 
} extern "C" {
 pub fn GetColorTuple ( arg1 : * const PixelInfo , arg2 : MagickBooleanType , arg3 : * mut libc :: c_char , ) ; 
} pub const CompositeOperator_UndefinedCompositeOp : CompositeOperator = 0 ; pub const CompositeOperator_AlphaCompositeOp : CompositeOperator = 1 ; pub const CompositeOperator_AtopCompositeOp : CompositeOperator = 2 ; pub const CompositeOperator_BlendCompositeOp : CompositeOperator = 3 ; pub const CompositeOperator_BlurCompositeOp : CompositeOperator = 4 ; pub const CompositeOperator_BumpmapCompositeOp : CompositeOperator = 5 ; pub const CompositeOperator_ChangeMaskCompositeOp : CompositeOperator = 6 ; pub const CompositeOperator_ClearCompositeOp : CompositeOperator = 7 ; pub const CompositeOperator_ColorBurnCompositeOp : CompositeOperator = 8 ; pub const CompositeOperator_ColorDodgeCompositeOp : CompositeOperator = 9 ; pub const CompositeOperator_ColorizeCompositeOp : CompositeOperator = 10 ; pub const CompositeOperator_CopyBlackCompositeOp : CompositeOperator = 11 ; pub const CompositeOperator_CopyBlueCompositeOp : CompositeOperator = 12 ; pub const CompositeOperator_CopyCompositeOp : CompositeOperator = 13 ; pub const CompositeOperator_CopyCyanCompositeOp : CompositeOperator = 14 ; pub const CompositeOperator_CopyGreenCompositeOp : CompositeOperator = 15 ; pub const CompositeOperator_CopyMagentaCompositeOp : CompositeOperator = 16 ; pub const CompositeOperator_CopyAlphaCompositeOp : CompositeOperator = 17 ; pub const CompositeOperator_CopyRedCompositeOp : CompositeOperator = 18 ; pub const CompositeOperator_CopyYellowCompositeOp : CompositeOperator = 19 ; pub const CompositeOperator_DarkenCompositeOp : CompositeOperator = 20 ; pub const CompositeOperator_DarkenIntensityCompositeOp : CompositeOperator = 21 ; pub const CompositeOperator_DifferenceCompositeOp : CompositeOperator = 22 ; pub const CompositeOperator_DisplaceCompositeOp : CompositeOperator = 23 ; pub const CompositeOperator_DissolveCompositeOp : CompositeOperator = 24 ; pub const CompositeOperator_DistortCompositeOp : CompositeOperator = 25 ; pub const CompositeOperator_DivideDstCompositeOp : CompositeOperator = 26 ; pub const CompositeOperator_DivideSrcCompositeOp : CompositeOperator = 27 ; pub const CompositeOperator_DstAtopCompositeOp : CompositeOperator = 28 ; pub const CompositeOperator_DstCompositeOp : CompositeOperator = 29 ; pub const CompositeOperator_DstInCompositeOp : CompositeOperator = 30 ; pub const CompositeOperator_DstOutCompositeOp : CompositeOperator = 31 ; pub const CompositeOperator_DstOverCompositeOp : CompositeOperator = 32 ; pub const CompositeOperator_ExclusionCompositeOp : CompositeOperator = 33 ; pub const CompositeOperator_HardLightCompositeOp : CompositeOperator = 34 ; pub const CompositeOperator_HardMixCompositeOp : CompositeOperator = 35 ; pub const CompositeOperator_HueCompositeOp : CompositeOperator = 36 ; pub const CompositeOperator_InCompositeOp : CompositeOperator = 37 ; pub const CompositeOperator_IntensityCompositeOp : CompositeOperator = 38 ; pub const CompositeOperator_LightenCompositeOp : CompositeOperator = 39 ; pub const CompositeOperator_LightenIntensityCompositeOp : CompositeOperator = 40 ; pub const CompositeOperator_LinearBurnCompositeOp : CompositeOperator = 41 ; pub const CompositeOperator_LinearDodgeCompositeOp : CompositeOperator = 42 ; pub const CompositeOperator_LinearLightCompositeOp : CompositeOperator = 43 ; pub const CompositeOperator_LuminizeCompositeOp : CompositeOperator = 44 ; pub const CompositeOperator_MathematicsCompositeOp : CompositeOperator = 45 ; pub const CompositeOperator_MinusDstCompositeOp : CompositeOperator = 46 ; pub const CompositeOperator_MinusSrcCompositeOp : CompositeOperator = 47 ; pub const CompositeOperator_ModulateCompositeOp : CompositeOperator = 48 ; pub const CompositeOperator_ModulusAddCompositeOp : CompositeOperator = 49 ; pub const CompositeOperator_ModulusSubtractCompositeOp : CompositeOperator = 50 ; pub const CompositeOperator_MultiplyCompositeOp : CompositeOperator = 51 ; pub const CompositeOperator_NoCompositeOp : CompositeOperator = 52 ; pub const CompositeOperator_OutCompositeOp : CompositeOperator = 53 ; pub const CompositeOperator_OverCompositeOp : CompositeOperator = 54 ; pub const CompositeOperator_OverlayCompositeOp : CompositeOperator = 55 ; pub const CompositeOperator_PegtopLightCompositeOp : CompositeOperator = 56 ; pub const CompositeOperator_PinLightCompositeOp : CompositeOperator = 57 ; pub const CompositeOperator_PlusCompositeOp : CompositeOperator = 58 ; pub const CompositeOperator_ReplaceCompositeOp : CompositeOperator = 59 ; pub const CompositeOperator_SaturateCompositeOp : CompositeOperator = 60 ; pub const CompositeOperator_ScreenCompositeOp : CompositeOperator = 61 ; pub const CompositeOperator_SoftLightCompositeOp : CompositeOperator = 62 ; pub const CompositeOperator_SrcAtopCompositeOp : CompositeOperator = 63 ; pub const CompositeOperator_SrcCompositeOp : CompositeOperator = 64 ; pub const CompositeOperator_SrcInCompositeOp : CompositeOperator = 65 ; pub const CompositeOperator_SrcOutCompositeOp : CompositeOperator = 66 ; pub const CompositeOperator_SrcOverCompositeOp : CompositeOperator = 67 ; pub const CompositeOperator_ThresholdCompositeOp : CompositeOperator = 68 ; pub const CompositeOperator_VividLightCompositeOp : CompositeOperator = 69 ; pub const CompositeOperator_XorCompositeOp : CompositeOperator = 70 ; pub const CompositeOperator_StereoCompositeOp : CompositeOperator = 71 ; pub type CompositeOperator = libc :: c_uint ; extern "C" {
 pub fn CompositeImage ( arg1 : * mut Image , arg2 : * const Image , arg3 : CompositeOperator , arg4 : MagickBooleanType , arg5 : isize , arg6 : isize , arg7 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn TextureImage ( arg1 : * mut Image , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const CompressionType_UndefinedCompression : CompressionType = 0 ; pub const CompressionType_B44ACompression : CompressionType = 1 ; pub const CompressionType_B44Compression : CompressionType = 2 ; pub const CompressionType_BZipCompression : CompressionType = 3 ; pub const CompressionType_DXT1Compression : CompressionType = 4 ; pub const CompressionType_DXT3Compression : CompressionType = 5 ; pub const CompressionType_DXT5Compression : CompressionType = 6 ; pub const CompressionType_FaxCompression : CompressionType = 7 ; pub const CompressionType_Group4Compression : CompressionType = 8 ; pub const CompressionType_JBIG1Compression : CompressionType = 9 ; pub const CompressionType_JBIG2Compression : CompressionType = 10 ; pub const CompressionType_JPEG2000Compression : CompressionType = 11 ; pub const CompressionType_JPEGCompression : CompressionType = 12 ; pub const CompressionType_LosslessJPEGCompression : CompressionType = 13 ; pub const CompressionType_LZMACompression : CompressionType = 14 ; pub const CompressionType_LZWCompression : CompressionType = 15 ; pub const CompressionType_NoCompression : CompressionType = 16 ; pub const CompressionType_PizCompression : CompressionType = 17 ; pub const CompressionType_Pxr24Compression : CompressionType = 18 ; pub const CompressionType_RLECompression : CompressionType = 19 ; pub const CompressionType_ZipCompression : CompressionType = 20 ; pub const CompressionType_ZipSCompression : CompressionType = 21 ; pub const CompressionType_ZstdCompression : CompressionType = 22 ; pub const CompressionType_WebPCompression : CompressionType = 23 ; pub const CompressionType_DWAACompression : CompressionType = 24 ; pub const CompressionType_DWABCompression : CompressionType = 25 ; pub type CompressionType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _Ascii85Info { _unused : [ u8 ; 0 ] } pub type Ascii85Info = _Ascii85Info ; extern "C" {
 pub fn HuffmanDecodeImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn HuffmanEncodeImage ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut Image , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LZWEncodeImage ( arg1 : * mut Image , arg2 : usize , arg3 : * mut libc :: c_uchar , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PackbitsEncodeImage ( arg1 : * mut Image , arg2 : usize , arg3 : * mut libc :: c_uchar , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ZLIBEncodeImage ( arg1 : * mut Image , arg2 : usize , arg3 : * mut libc :: c_uchar , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn Ascii85Encode ( arg1 : * mut Image , arg2 : libc :: c_uchar , ) ; 
} extern "C" {
 pub fn Ascii85Flush ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn Ascii85Initialize ( arg1 : * mut Image , ) ; 
} pub const KernelInfoType_UndefinedKernel : KernelInfoType = 0 ; pub const KernelInfoType_UnityKernel : KernelInfoType = 1 ; pub const KernelInfoType_GaussianKernel : KernelInfoType = 2 ; pub const KernelInfoType_DoGKernel : KernelInfoType = 3 ; pub const KernelInfoType_LoGKernel : KernelInfoType = 4 ; pub const KernelInfoType_BlurKernel : KernelInfoType = 5 ; pub const KernelInfoType_CometKernel : KernelInfoType = 6 ; pub const KernelInfoType_BinomialKernel : KernelInfoType = 7 ; pub const KernelInfoType_LaplacianKernel : KernelInfoType = 8 ; pub const KernelInfoType_SobelKernel : KernelInfoType = 9 ; pub const KernelInfoType_FreiChenKernel : KernelInfoType = 10 ; pub const KernelInfoType_RobertsKernel : KernelInfoType = 11 ; pub const KernelInfoType_PrewittKernel : KernelInfoType = 12 ; pub const KernelInfoType_CompassKernel : KernelInfoType = 13 ; pub const KernelInfoType_KirschKernel : KernelInfoType = 14 ; pub const KernelInfoType_DiamondKernel : KernelInfoType = 15 ; pub const KernelInfoType_SquareKernel : KernelInfoType = 16 ; pub const KernelInfoType_RectangleKernel : KernelInfoType = 17 ; pub const KernelInfoType_OctagonKernel : KernelInfoType = 18 ; pub const KernelInfoType_DiskKernel : KernelInfoType = 19 ; pub const KernelInfoType_PlusKernel : KernelInfoType = 20 ; pub const KernelInfoType_CrossKernel : KernelInfoType = 21 ; pub const KernelInfoType_RingKernel : KernelInfoType = 22 ; pub const KernelInfoType_PeaksKernel : KernelInfoType = 23 ; pub const KernelInfoType_EdgesKernel : KernelInfoType = 24 ; pub const KernelInfoType_CornersKernel : KernelInfoType = 25 ; pub const KernelInfoType_DiagonalsKernel : KernelInfoType = 26 ; pub const KernelInfoType_LineEndsKernel : KernelInfoType = 27 ; pub const KernelInfoType_LineJunctionsKernel : KernelInfoType = 28 ; pub const KernelInfoType_RidgesKernel : KernelInfoType = 29 ; pub const KernelInfoType_ConvexHullKernel : KernelInfoType = 30 ; pub const KernelInfoType_ThinSEKernel : KernelInfoType = 31 ; pub const KernelInfoType_SkeletonKernel : KernelInfoType = 32 ; pub const KernelInfoType_ChebyshevKernel : KernelInfoType = 33 ; pub const KernelInfoType_ManhattanKernel : KernelInfoType = 34 ; pub const KernelInfoType_OctagonalKernel : KernelInfoType = 35 ; pub const KernelInfoType_EuclideanKernel : KernelInfoType = 36 ; pub const KernelInfoType_UserDefinedKernel : KernelInfoType = 37 ; pub type KernelInfoType = libc :: c_uint ; pub const MorphologyMethod_UndefinedMorphology : MorphologyMethod = 0 ; pub const MorphologyMethod_ConvolveMorphology : MorphologyMethod = 1 ; pub const MorphologyMethod_CorrelateMorphology : MorphologyMethod = 2 ; pub const MorphologyMethod_ErodeMorphology : MorphologyMethod = 3 ; pub const MorphologyMethod_DilateMorphology : MorphologyMethod = 4 ; pub const MorphologyMethod_ErodeIntensityMorphology : MorphologyMethod = 5 ; pub const MorphologyMethod_DilateIntensityMorphology : MorphologyMethod = 6 ; pub const MorphologyMethod_IterativeDistanceMorphology : MorphologyMethod = 7 ; pub const MorphologyMethod_OpenMorphology : MorphologyMethod = 8 ; pub const MorphologyMethod_CloseMorphology : MorphologyMethod = 9 ; pub const MorphologyMethod_OpenIntensityMorphology : MorphologyMethod = 10 ; pub const MorphologyMethod_CloseIntensityMorphology : MorphologyMethod = 11 ; pub const MorphologyMethod_SmoothMorphology : MorphologyMethod = 12 ; pub const MorphologyMethod_EdgeInMorphology : MorphologyMethod = 13 ; pub const MorphologyMethod_EdgeOutMorphology : MorphologyMethod = 14 ; pub const MorphologyMethod_EdgeMorphology : MorphologyMethod = 15 ; pub const MorphologyMethod_TopHatMorphology : MorphologyMethod = 16 ; pub const MorphologyMethod_BottomHatMorphology : MorphologyMethod = 17 ; pub const MorphologyMethod_HitAndMissMorphology : MorphologyMethod = 18 ; pub const MorphologyMethod_ThinningMorphology : MorphologyMethod = 19 ; pub const MorphologyMethod_ThickenMorphology : MorphologyMethod = 20 ; pub const MorphologyMethod_DistanceMorphology : MorphologyMethod = 21 ; pub const MorphologyMethod_VoronoiMorphology : MorphologyMethod = 22 ; pub type MorphologyMethod = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _KernelInfo { pub type_ : KernelInfoType , pub width : usize , pub height : usize , pub x : isize , pub y : isize , pub values : * mut MagickRealType , pub minimum : f64 , pub maximum : f64 , pub negative_range : f64 , pub positive_range : f64 , pub angle : f64 , pub next : * mut _KernelInfo , pub signature : usize , } # [ test ] fn bindgen_test_layout__KernelInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _KernelInfo > ( ) , 104usize , concat ! ( "Size of: " , stringify ! ( _KernelInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _KernelInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _KernelInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . width as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . height as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . x as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . y as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . values as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( values ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . minimum as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( minimum ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . maximum as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( maximum ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . negative_range as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( negative_range ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . positive_range as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( positive_range ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . angle as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( angle ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . next as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( next ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelInfo ) ) . signature as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type KernelInfo = _KernelInfo ; extern "C" {
 pub fn AcquireKernelInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut KernelInfo ; 
} extern "C" {
 pub fn AcquireKernelBuiltIn ( arg1 : KernelInfoType , arg2 : * const GeometryInfo , arg3 : * mut ExceptionInfo , ) -> * mut KernelInfo ; 
} extern "C" {
 pub fn CloneKernelInfo ( arg1 : * const KernelInfo , ) -> * mut KernelInfo ; 
} extern "C" {
 pub fn DestroyKernelInfo ( arg1 : * mut KernelInfo , ) -> * mut KernelInfo ; 
} extern "C" {
 pub fn MorphologyImage ( arg1 : * const Image , arg2 : MorphologyMethod , arg3 : isize , arg4 : * const KernelInfo , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ScaleGeometryKernelInfo ( arg1 : * mut KernelInfo , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn ScaleKernelInfo ( arg1 : * mut KernelInfo , arg2 : f64 , arg3 : GeometryFlags , ) ; 
} extern "C" {
 pub fn UnityAddKernelInfo ( arg1 : * mut KernelInfo , arg2 : f64 , ) ; 
} pub const PreviewType_UndefinedPreview : PreviewType = 0 ; pub const PreviewType_RotatePreview : PreviewType = 1 ; pub const PreviewType_ShearPreview : PreviewType = 2 ; pub const PreviewType_RollPreview : PreviewType = 3 ; pub const PreviewType_HuePreview : PreviewType = 4 ; pub const PreviewType_SaturationPreview : PreviewType = 5 ; pub const PreviewType_BrightnessPreview : PreviewType = 6 ; pub const PreviewType_GammaPreview : PreviewType = 7 ; pub const PreviewType_SpiffPreview : PreviewType = 8 ; pub const PreviewType_DullPreview : PreviewType = 9 ; pub const PreviewType_GrayscalePreview : PreviewType = 10 ; pub const PreviewType_QuantizePreview : PreviewType = 11 ; pub const PreviewType_DespecklePreview : PreviewType = 12 ; pub const PreviewType_ReduceNoisePreview : PreviewType = 13 ; pub const PreviewType_AddNoisePreview : PreviewType = 14 ; pub const PreviewType_SharpenPreview : PreviewType = 15 ; pub const PreviewType_BlurPreview : PreviewType = 16 ; pub const PreviewType_ThresholdPreview : PreviewType = 17 ; pub const PreviewType_EdgeDetectPreview : PreviewType = 18 ; pub const PreviewType_SpreadPreview : PreviewType = 19 ; pub const PreviewType_SolarizePreview : PreviewType = 20 ; pub const PreviewType_ShadePreview : PreviewType = 21 ; pub const PreviewType_RaisePreview : PreviewType = 22 ; pub const PreviewType_SegmentPreview : PreviewType = 23 ; pub const PreviewType_SwirlPreview : PreviewType = 24 ; pub const PreviewType_ImplodePreview : PreviewType = 25 ; pub const PreviewType_WavePreview : PreviewType = 26 ; pub const PreviewType_OilPaintPreview : PreviewType = 27 ; pub const PreviewType_CharcoalDrawingPreview : PreviewType = 28 ; pub const PreviewType_JPEGPreview : PreviewType = 29 ; pub type PreviewType = libc :: c_uint ; extern "C" {
 pub fn AdaptiveBlurImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn AdaptiveSharpenImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn BlurImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ConvolveImage ( arg1 : * const Image , arg2 : * const KernelInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DespeckleImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn EdgeImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn EmbossImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn GaussianBlurImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn KuwaharaImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn LocalContrastImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MotionBlurImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PreviewImage ( arg1 : * const Image , arg2 : PreviewType , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn RotationalBlurImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SelectiveBlurImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ShadeImage ( arg1 : * const Image , arg2 : MagickBooleanType , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SharpenImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SpreadImage ( arg1 : * const Image , arg2 : PixelInterpolateMethod , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn UnsharpMaskImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} pub const DisposeType_UnrecognizedDispose : DisposeType = 0 ; pub const DisposeType_UndefinedDispose : DisposeType = 0 ; pub const DisposeType_NoneDispose : DisposeType = 1 ; pub const DisposeType_BackgroundDispose : DisposeType = 2 ; pub const DisposeType_PreviousDispose : DisposeType = 3 ; pub type DisposeType = libc :: c_uint ; pub const LayerMethod_UndefinedLayer : LayerMethod = 0 ; pub const LayerMethod_CoalesceLayer : LayerMethod = 1 ; pub const LayerMethod_CompareAnyLayer : LayerMethod = 2 ; pub const LayerMethod_CompareClearLayer : LayerMethod = 3 ; pub const LayerMethod_CompareOverlayLayer : LayerMethod = 4 ; pub const LayerMethod_DisposeLayer : LayerMethod = 5 ; pub const LayerMethod_OptimizeLayer : LayerMethod = 6 ; pub const LayerMethod_OptimizeImageLayer : LayerMethod = 7 ; pub const LayerMethod_OptimizePlusLayer : LayerMethod = 8 ; pub const LayerMethod_OptimizeTransLayer : LayerMethod = 9 ; pub const LayerMethod_RemoveDupsLayer : LayerMethod = 10 ; pub const LayerMethod_RemoveZeroLayer : LayerMethod = 11 ; pub const LayerMethod_CompositeLayer : LayerMethod = 12 ; pub const LayerMethod_MergeLayer : LayerMethod = 13 ; pub const LayerMethod_FlattenLayer : LayerMethod = 14 ; pub const LayerMethod_MosaicLayer : LayerMethod = 15 ; pub const LayerMethod_TrimBoundsLayer : LayerMethod = 16 ; pub type LayerMethod = libc :: c_uint ; extern "C" {
 pub fn CoalesceImages ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DisposeImages ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CompareImagesLayers ( arg1 : * const Image , arg2 : LayerMethod , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MergeImageLayers ( arg1 : * mut Image , arg2 : LayerMethod , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn OptimizeImageLayers ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn OptimizePlusImageLayers ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CompositeLayers ( arg1 : * mut Image , arg2 : CompositeOperator , arg3 : * mut Image , arg4 : isize , arg5 : isize , arg6 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn OptimizeImageTransparency ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn RemoveDuplicateLayers ( arg1 : * mut * mut Image , arg2 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn RemoveZeroDelayLayers ( arg1 : * mut * mut Image , arg2 : * mut ExceptionInfo , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _LinkedListInfo { _unused : [ u8 ; 0 ] } pub type LinkedListInfo = _LinkedListInfo ; extern "C" {
 pub fn DestroyLinkedList ( arg1 : * mut LinkedListInfo , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> * mut libc :: c_void > , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn NewLinkedList ( arg1 : usize , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn AppendValueToLinkedList ( arg1 : * mut LinkedListInfo , arg2 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InsertValueInLinkedList ( arg1 : * mut LinkedListInfo , arg2 : usize , arg3 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InsertValueInSortedLinkedList ( arg1 : * mut LinkedListInfo , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const libc :: c_void , arg2 : * const libc :: c_void ) -> libc :: c_int > , arg3 : * mut * mut libc :: c_void , arg4 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsLinkedListEmpty ( arg1 : * const LinkedListInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LinkedListToArray ( arg1 : * mut LinkedListInfo , arg2 : * mut * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetNumberOfElementsInLinkedList ( arg1 : * const LinkedListInfo , ) -> usize ; 
} extern "C" {
 pub fn ClearLinkedList ( arg1 : * mut LinkedListInfo , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> * mut libc :: c_void > , ) ; 
} extern "C" {
 pub fn GetLastValueInLinkedList ( arg1 : * mut LinkedListInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn GetNextValueInLinkedList ( arg1 : * mut LinkedListInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn GetValueFromLinkedList ( arg1 : * mut LinkedListInfo , arg2 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RemoveElementByValueFromLinkedList ( arg1 : * mut LinkedListInfo , arg2 : * const libc :: c_void , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RemoveElementFromLinkedList ( arg1 : * mut LinkedListInfo , arg2 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RemoveLastElementFromLinkedList ( arg1 : * mut LinkedListInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ResetLinkedListIterator ( arg1 : * mut LinkedListInfo , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _LocaleInfo { pub path : * mut libc :: c_char , pub tag : * mut libc :: c_char , pub message : * mut libc :: c_char , pub stealth : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__LocaleInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _LocaleInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _LocaleInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _LocaleInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _LocaleInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _LocaleInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _LocaleInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _LocaleInfo ) ) . tag as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _LocaleInfo ) , "::" , stringify ! ( tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _LocaleInfo ) ) . message as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _LocaleInfo ) , "::" , stringify ! ( message ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _LocaleInfo ) ) . stealth as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _LocaleInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _LocaleInfo ) ) . signature as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _LocaleInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type LocaleInfo = _LocaleInfo ; extern "C" {
 pub fn GetLocaleList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetLocaleMessage ( arg1 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetLocaleInfo_ ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * const LocaleInfo ; 
} extern "C" {
 pub fn GetLocaleInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const LocaleInfo ; 
} extern "C" {
 pub fn InterpretLocaleValue ( arg1 : * const libc :: c_char , arg2 : * mut * mut libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn LocaleCompare ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn LocaleLowercase ( arg1 : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn LocaleNCompare ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_char , arg3 : usize , ) -> libc :: c_int ; 
} extern "C" {
 pub fn LocaleUppercase ( arg1 : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn DestroyLocaleOptions ( arg1 : * mut LinkedListInfo , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn GetLocaleOptions ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn ListLocaleInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn FormatLocaleFile ( arg1 : * mut FILE , arg2 : * const libc :: c_char , ... ) -> isize ; 
} extern "C" {
 pub fn FormatLocaleString ( arg1 : * mut libc :: c_char , arg2 : usize , arg3 : * const libc :: c_char , ... ) -> isize ; 
} extern "C" {
 pub fn LocaleLower ( arg1 : * mut libc :: c_char , ) ; 
} extern "C" {
 pub fn LocaleUpper ( arg1 : * mut libc :: c_char , ) ; 
} pub type MagickProgressMonitor = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const libc :: c_char , arg2 : MagickOffsetType , arg3 : MagickSizeType , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; extern "C" {
 pub fn SetImageProgress ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : MagickOffsetType , arg4 : MagickSizeType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageProgressMonitor ( arg1 : * mut Image , arg2 : MagickProgressMonitor , arg3 : * mut libc :: c_void , ) -> MagickProgressMonitor ; 
} extern "C" {
 pub fn SetImageInfoProgressMonitor ( arg1 : * mut ImageInfo , arg2 : MagickProgressMonitor , arg3 : * mut libc :: c_void , ) -> MagickProgressMonitor ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _StringInfo { pub path : * mut libc :: c_char , pub datum : * mut libc :: c_uchar , pub length : usize , pub signature : usize , pub name : * mut libc :: c_char , } # [ test ] fn bindgen_test_layout__StringInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _StringInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _StringInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _StringInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _StringInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StringInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _StringInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StringInfo ) ) . datum as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _StringInfo ) , "::" , stringify ! ( datum ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StringInfo ) ) . length as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _StringInfo ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StringInfo ) ) . signature as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _StringInfo ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StringInfo ) ) . name as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _StringInfo ) , "::" , stringify ! ( name ) ) ) ; } pub type StringInfo = _StringInfo ; extern "C" {
 pub fn AcquireString ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn CloneString ( arg1 : * mut * mut libc :: c_char , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn ConstantString ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DestroyString ( arg1 : * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DestroyStringList ( arg1 : * mut * mut libc :: c_char , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn EscapeString ( arg1 : * const libc :: c_char , arg2 : libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn FileToString ( arg1 : * const libc :: c_char , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetEnvironmentValue ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn SanitizeString ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn StringInfoToHexString ( arg1 : * const StringInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn StringInfoToString ( arg1 : * const StringInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn StringToArgv ( arg1 : * const libc :: c_char , arg2 : * mut libc :: c_int , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn StringToken ( arg1 : * const libc :: c_char , arg2 : * mut * mut libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn StringToList ( arg1 : * const libc :: c_char , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn StringToStrings ( arg1 : * const libc :: c_char , arg2 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetStringInfoName ( arg1 : * const StringInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetStringInfoPath ( arg1 : * const StringInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn InterpretSiPrefixValue ( arg1 : * const libc :: c_char , arg2 : * mut * mut libc :: c_char , ) -> f64 ; 
} extern "C" {
 pub fn StringToArrayOfDoubles ( arg1 : * const libc :: c_char , arg2 : * mut isize , arg3 : * mut ExceptionInfo , ) -> * mut f64 ; 
} extern "C" {
 pub fn CompareStringInfo ( arg1 : * const StringInfo , arg2 : * const StringInfo , ) -> libc :: c_int ; 
} extern "C" {
 pub fn ConcatenateString ( arg1 : * mut * mut libc :: c_char , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsStringTrue ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsStringFalse ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SubstituteString ( arg1 : * mut * mut libc :: c_char , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ConcatenateMagickString ( arg1 : * mut libc :: c_char , arg2 : * const libc :: c_char , arg3 : usize , ) -> usize ; 
} extern "C" {
 pub fn CopyMagickString ( arg1 : * mut libc :: c_char , arg2 : * const libc :: c_char , arg3 : usize , ) -> usize ; 
} extern "C" {
 pub fn GetStringInfoLength ( arg1 : * const StringInfo , ) -> usize ; 
} extern "C" {
 pub fn FormatMagickSize ( arg1 : MagickSizeType , arg2 : MagickBooleanType , arg3 : * const libc :: c_char , arg4 : usize , arg5 : * mut libc :: c_char , ) -> isize ; 
} extern "C" {
 pub fn AcquireStringInfo ( arg1 : usize , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn BlobToStringInfo ( arg1 : * const libc :: c_void , arg2 : usize , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn CloneStringInfo ( arg1 : * const StringInfo , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn ConfigureFileToStringInfo ( arg1 : * const libc :: c_char , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn DestroyStringInfo ( arg1 : * mut StringInfo , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn FileToStringInfo ( arg1 : * const libc :: c_char , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn SplitStringInfo ( arg1 : * mut StringInfo , arg2 : usize , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn StringToStringInfo ( arg1 : * const libc :: c_char , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn GetStringInfoDatum ( arg1 : * const StringInfo , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn ConcatenateStringInfo ( arg1 : * mut StringInfo , arg2 : * const StringInfo , ) ; 
} extern "C" {
 pub fn PrintStringInfo ( file : * mut FILE , arg1 : * const libc :: c_char , arg2 : * const StringInfo , ) ; 
} extern "C" {
 pub fn ResetStringInfo ( arg1 : * mut StringInfo , ) ; 
} extern "C" {
 pub fn SetStringInfo ( arg1 : * mut StringInfo , arg2 : * const StringInfo , ) ; 
} extern "C" {
 pub fn SetStringInfoDatum ( arg1 : * mut StringInfo , arg2 : * const libc :: c_uchar , ) ; 
} extern "C" {
 pub fn SetStringInfoLength ( arg1 : * mut StringInfo , arg2 : usize , ) ; 
} extern "C" {
 pub fn SetStringInfoName ( arg1 : * mut StringInfo , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn SetStringInfoPath ( arg1 : * mut StringInfo , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn StripString ( arg1 : * mut libc :: c_char , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ProfileInfo { _unused : [ u8 ; 0 ] } pub type ProfileInfo = _ProfileInfo ; pub const RenderingIntent_UndefinedIntent : RenderingIntent = 0 ; pub const RenderingIntent_SaturationIntent : RenderingIntent = 1 ; pub const RenderingIntent_PerceptualIntent : RenderingIntent = 2 ; pub const RenderingIntent_AbsoluteIntent : RenderingIntent = 3 ; pub const RenderingIntent_RelativeIntent : RenderingIntent = 4 ; pub type RenderingIntent = libc :: c_uint ; extern "C" {
 pub fn GetNextImageProfile ( arg1 : * const Image , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetImageProfile ( arg1 : * const Image , arg2 : * const libc :: c_char , ) -> * const StringInfo ; 
} extern "C" {
 pub fn CloneImageProfiles ( arg1 : * mut Image , arg2 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteImageProfile ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ProfileImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * const libc :: c_void , arg4 : usize , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageProfile ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * const StringInfo , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RemoveImageProfile ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn DestroyImageProfiles ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn ResetImageProfileIterator ( arg1 : * const Image , ) ; 
} pub const EndianType_UndefinedEndian : EndianType = 0 ; pub const EndianType_LSBEndian : EndianType = 1 ; pub const EndianType_MSBEndian : EndianType = 2 ; pub type EndianType = libc :: c_uint ; pub const QuantumAlphaType_UndefinedQuantumAlpha : QuantumAlphaType = 0 ; pub const QuantumAlphaType_AssociatedQuantumAlpha : QuantumAlphaType = 1 ; pub const QuantumAlphaType_DisassociatedQuantumAlpha : QuantumAlphaType = 2 ; pub type QuantumAlphaType = libc :: c_uint ; pub const QuantumFormatType_UndefinedQuantumFormat : QuantumFormatType = 0 ; pub const QuantumFormatType_FloatingPointQuantumFormat : QuantumFormatType = 1 ; pub const QuantumFormatType_SignedQuantumFormat : QuantumFormatType = 2 ; pub const QuantumFormatType_UnsignedQuantumFormat : QuantumFormatType = 3 ; pub type QuantumFormatType = libc :: c_uint ; pub const QuantumType_UndefinedQuantum : QuantumType = 0 ; pub const QuantumType_AlphaQuantum : QuantumType = 1 ; pub const QuantumType_BGRAQuantum : QuantumType = 2 ; pub const QuantumType_BGROQuantum : QuantumType = 3 ; pub const QuantumType_BGRQuantum : QuantumType = 4 ; pub const QuantumType_BlackQuantum : QuantumType = 5 ; pub const QuantumType_BlueQuantum : QuantumType = 6 ; pub const QuantumType_CbYCrAQuantum : QuantumType = 7 ; pub const QuantumType_CbYCrQuantum : QuantumType = 8 ; pub const QuantumType_CbYCrYQuantum : QuantumType = 9 ; pub const QuantumType_CMYKAQuantum : QuantumType = 10 ; pub const QuantumType_CMYKOQuantum : QuantumType = 11 ; pub const QuantumType_CMYKQuantum : QuantumType = 12 ; pub const QuantumType_CyanQuantum : QuantumType = 13 ; pub const QuantumType_GrayAlphaQuantum : QuantumType = 14 ; pub const QuantumType_GrayQuantum : QuantumType = 15 ; pub const QuantumType_GreenQuantum : QuantumType = 16 ; pub const QuantumType_IndexAlphaQuantum : QuantumType = 17 ; pub const QuantumType_IndexQuantum : QuantumType = 18 ; pub const QuantumType_MagentaQuantum : QuantumType = 19 ; pub const QuantumType_OpacityQuantum : QuantumType = 20 ; pub const QuantumType_RedQuantum : QuantumType = 21 ; pub const QuantumType_RGBAQuantum : QuantumType = 22 ; pub const QuantumType_RGBOQuantum : QuantumType = 23 ; pub const QuantumType_RGBPadQuantum : QuantumType = 24 ; pub const QuantumType_RGBQuantum : QuantumType = 25 ; pub const QuantumType_YellowQuantum : QuantumType = 26 ; pub type QuantumType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _QuantumInfo { _unused : [ u8 ; 0 ] } pub type QuantumInfo = _QuantumInfo ; extern "C" {
 pub fn GetQuantumEndian ( arg1 : * const QuantumInfo , ) -> EndianType ; 
} extern "C" {
 pub fn SetQuantumDepth ( arg1 : * const Image , arg2 : * mut QuantumInfo , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetQuantumEndian ( arg1 : * const Image , arg2 : * mut QuantumInfo , arg3 : EndianType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetQuantumFormat ( arg1 : * const Image , arg2 : * mut QuantumInfo , arg3 : QuantumFormatType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetQuantumPad ( arg1 : * const Image , arg2 : * mut QuantumInfo , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetQuantumFormat ( arg1 : * const QuantumInfo , ) -> QuantumFormatType ; 
} extern "C" {
 pub fn AcquireQuantumInfo ( arg1 : * const ImageInfo , arg2 : * mut Image , ) -> * mut QuantumInfo ; 
} extern "C" {
 pub fn DestroyQuantumInfo ( arg1 : * mut QuantumInfo , ) -> * mut QuantumInfo ; 
} extern "C" {
 pub fn GetQuantumType ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> QuantumType ; 
} extern "C" {
 pub fn ExportQuantumPixels ( arg1 : * const Image , arg2 : * mut CacheView , arg3 : * mut QuantumInfo , arg4 : QuantumType , arg5 : * mut libc :: c_uchar , arg6 : * mut ExceptionInfo , ) -> usize ; 
} extern "C" {
 pub fn GetQuantumExtent ( arg1 : * const Image , arg2 : * const QuantumInfo , arg3 : QuantumType , ) -> usize ; 
} extern "C" {
 pub fn ImportQuantumPixels ( arg1 : * const Image , arg2 : * mut CacheView , arg3 : * mut QuantumInfo , arg4 : QuantumType , arg5 : * const libc :: c_uchar , arg6 : * mut ExceptionInfo , ) -> usize ; 
} extern "C" {
 pub fn GetQuantumPixels ( arg1 : * const QuantumInfo , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn GetQuantumInfo ( arg1 : * const ImageInfo , arg2 : * mut QuantumInfo , ) ; 
} extern "C" {
 pub fn SetQuantumAlphaType ( arg1 : * mut QuantumInfo , arg2 : QuantumAlphaType , ) ; 
} extern "C" {
 pub fn SetQuantumImageType ( arg1 : * mut Image , arg2 : QuantumType , ) ; 
} extern "C" {
 pub fn SetQuantumMinIsWhite ( arg1 : * mut QuantumInfo , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn SetQuantumPack ( arg1 : * mut QuantumInfo , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn SetQuantumQuantum ( arg1 : * mut QuantumInfo , arg2 : usize , ) ; 
} extern "C" {
 pub fn SetQuantumScale ( arg1 : * mut QuantumInfo , arg2 : f64 , ) ; 
} pub const FilterType_UndefinedFilter : FilterType = 0 ; pub const FilterType_PointFilter : FilterType = 1 ; pub const FilterType_BoxFilter : FilterType = 2 ; pub const FilterType_TriangleFilter : FilterType = 3 ; pub const FilterType_HermiteFilter : FilterType = 4 ; pub const FilterType_HannFilter : FilterType = 5 ; pub const FilterType_HammingFilter : FilterType = 6 ; pub const FilterType_BlackmanFilter : FilterType = 7 ; pub const FilterType_GaussianFilter : FilterType = 8 ; pub const FilterType_QuadraticFilter : FilterType = 9 ; pub const FilterType_CubicFilter : FilterType = 10 ; pub const FilterType_CatromFilter : FilterType = 11 ; pub const FilterType_MitchellFilter : FilterType = 12 ; pub const FilterType_JincFilter : FilterType = 13 ; pub const FilterType_SincFilter : FilterType = 14 ; pub const FilterType_SincFastFilter : FilterType = 15 ; pub const FilterType_KaiserFilter : FilterType = 16 ; pub const FilterType_WelchFilter : FilterType = 17 ; pub const FilterType_ParzenFilter : FilterType = 18 ; pub const FilterType_BohmanFilter : FilterType = 19 ; pub const FilterType_BartlettFilter : FilterType = 20 ; pub const FilterType_LagrangeFilter : FilterType = 21 ; pub const FilterType_LanczosFilter : FilterType = 22 ; pub const FilterType_LanczosSharpFilter : FilterType = 23 ; pub const FilterType_Lanczos2Filter : FilterType = 24 ; pub const FilterType_Lanczos2SharpFilter : FilterType = 25 ; pub const FilterType_RobidouxFilter : FilterType = 26 ; pub const FilterType_RobidouxSharpFilter : FilterType = 27 ; pub const FilterType_CosineFilter : FilterType = 28 ; pub const FilterType_SplineFilter : FilterType = 29 ; pub const FilterType_LanczosRadiusFilter : FilterType = 30 ; pub const FilterType_CubicSplineFilter : FilterType = 31 ; pub const FilterType_SentinelFilter : FilterType = 32 ; pub type FilterType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ResampleFilter { _unused : [ u8 ; 0 ] } pub type ResampleFilter = _ResampleFilter ; extern "C" {
 pub fn ResamplePixelColor ( arg1 : * mut ResampleFilter , arg2 : f64 , arg3 : f64 , arg4 : * mut PixelInfo , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetResampleFilterInterpolateMethod ( arg1 : * mut ResampleFilter , arg2 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetResampleFilterVirtualPixelMethod ( arg1 : * mut ResampleFilter , arg2 : VirtualPixelMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AcquireResampleFilter ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut ResampleFilter ; 
} extern "C" {
 pub fn DestroyResampleFilter ( arg1 : * mut ResampleFilter , ) -> * mut ResampleFilter ; 
} extern "C" {
 pub fn ScaleResampleFilter ( arg1 : * mut ResampleFilter , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn SetResampleFilter ( arg1 : * mut ResampleFilter , arg2 : FilterType , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ResizeFilter { _unused : [ u8 ; 0 ] } pub type ResizeFilter = _ResizeFilter ; extern "C" {
 pub fn AdaptiveResizeImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn InterpolativeResizeImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : PixelInterpolateMethod , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn LiquidRescaleImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : f64 , arg5 : f64 , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MagnifyImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MinifyImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ResampleImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : FilterType , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ResizeImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : FilterType , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SampleImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ScaleImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ThumbnailImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} pub const TimerState_UndefinedTimerState : TimerState = 0 ; pub const TimerState_StoppedTimerState : TimerState = 1 ; pub const TimerState_RunningTimerState : TimerState = 2 ; pub type TimerState = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _Timer { pub start : f64 , pub stop : f64 , pub total : f64 , } # [ test ] fn bindgen_test_layout__Timer ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _Timer > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _Timer ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _Timer > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _Timer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Timer ) ) . start as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _Timer ) , "::" , stringify ! ( start ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Timer ) ) . stop as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _Timer ) , "::" , stringify ! ( stop ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Timer ) ) . total as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _Timer ) , "::" , stringify ! ( total ) ) ) ; } pub type Timer = _Timer ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _TimerInfo { pub user : Timer , pub elapsed : Timer , pub state : TimerState , pub signature : usize , } # [ test ] fn bindgen_test_layout__TimerInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _TimerInfo > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _TimerInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _TimerInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _TimerInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TimerInfo ) ) . user as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _TimerInfo ) , "::" , stringify ! ( user ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TimerInfo ) ) . elapsed as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _TimerInfo ) , "::" , stringify ! ( elapsed ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TimerInfo ) ) . state as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _TimerInfo ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TimerInfo ) ) . signature as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _TimerInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type TimerInfo = _TimerInfo ; extern "C" {
 pub fn GetElapsedTime ( arg1 : * mut TimerInfo , ) -> f64 ; 
} extern "C" {
 pub fn GetUserTime ( arg1 : * mut TimerInfo , ) -> f64 ; 
} extern "C" {
 pub fn ContinueTimer ( arg1 : * mut TimerInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn FormatMagickTime ( arg1 : time_t , arg2 : usize , arg3 : * mut libc :: c_char , ) -> isize ; 
} extern "C" {
 pub fn AcquireTimerInfo ( ) -> * mut TimerInfo ; 
} extern "C" {
 pub fn DestroyTimerInfo ( arg1 : * mut TimerInfo , ) -> * mut TimerInfo ; 
} extern "C" {
 pub fn GetTimerInfo ( arg1 : * mut TimerInfo , ) ; 
} extern "C" {
 pub fn ResetTimer ( arg1 : * mut TimerInfo , ) ; 
} extern "C" {
 pub fn StartTimer ( arg1 : * mut TimerInfo , arg2 : MagickBooleanType , ) ; 
} # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _Image { pub storage_class : ClassType , pub colorspace : ColorspaceType , pub compression : CompressionType , pub quality : usize , pub orientation : OrientationType , pub taint : MagickBooleanType , pub columns : usize , pub rows : usize , pub depth : usize , pub colors : usize , pub colormap : * mut PixelInfo , pub alpha_color : PixelInfo , pub background_color : PixelInfo , pub border_color : PixelInfo , pub transparent_color : PixelInfo , pub gamma : f64 , pub chromaticity : ChromaticityInfo , pub rendering_intent : RenderingIntent , pub profiles : * mut libc :: c_void , pub units : ResolutionType , pub montage : * mut libc :: c_char , pub directory : * mut libc :: c_char , pub geometry : * mut libc :: c_char , pub offset : isize , pub resolution : PointInfo , pub page : RectangleInfo , pub extract_info : RectangleInfo , pub fuzz : f64 , pub filter : FilterType , pub intensity : PixelIntensityMethod , pub interlace : InterlaceType , pub endian : EndianType , pub gravity : GravityType , pub compose : CompositeOperator , pub dispose : DisposeType , pub scene : usize , pub delay : usize , pub duration : usize , pub ticks_per_second : isize , pub iterations : usize , pub total_colors : usize , pub start_loop : isize , pub interpolate : PixelInterpolateMethod , pub black_point_compensation : MagickBooleanType , pub tile_offset : RectangleInfo , pub type_ : ImageType , pub dither : MagickBooleanType , pub extent : MagickSizeType , pub ping : MagickBooleanType , pub read_mask : MagickBooleanType , pub write_mask : MagickBooleanType , pub alpha_trait : PixelTrait , pub number_channels : usize , pub number_meta_channels : usize , pub metacontent_extent : usize , pub channel_mask : ChannelType , pub channel_map : * mut PixelChannelMap , pub cache : * mut libc :: c_void , pub error : ErrorInfo , pub timer : TimerInfo , pub progress_monitor : MagickProgressMonitor , pub client_data : * mut libc :: c_void , pub ascii85 : * mut Ascii85Info , pub generic_profile : * mut ProfileInfo , pub properties : * mut libc :: c_void , pub artifacts : * mut libc :: c_void , pub filename : [ libc :: c_char ; 4096usize ] , pub magick_filename : [ libc :: c_char ; 4096usize ] , pub magick : [ libc :: c_char ; 4096usize ] , pub magick_columns : usize , pub magick_rows : usize , pub blob : * mut BlobInfo , pub timestamp : time_t , pub debug : MagickBooleanType , pub reference_count : isize , pub semaphore : * mut SemaphoreInfo , pub image_info : * mut _ImageInfo , pub list : * mut _Image , pub previous : * mut _Image , pub next : * mut _Image , pub signature : usize , pub matte_color : PixelInfo , pub composite_mask : MagickBooleanType , pub mask_trait : PixelTrait , pub channels : ChannelType , } # [ test ] fn bindgen_test_layout__Image ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _Image > ( ) , 13504usize , concat ! ( "Size of: " , stringify ! ( _Image ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _Image > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _Image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . storage_class as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( storage_class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . colorspace as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( colorspace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . compression as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( compression ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . quality as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( quality ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . orientation as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( orientation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . taint as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( taint ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . columns as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( columns ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . rows as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( rows ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . depth as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . colors as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( colors ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . colormap as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . alpha_color as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( alpha_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . background_color as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( background_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . border_color as * const _ as usize } , 248usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( border_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . transparent_color as * const _ as usize } , 336usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( transparent_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . gamma as * const _ as usize } , 424usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( gamma ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . chromaticity as * const _ as usize } , 432usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( chromaticity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . rendering_intent as * const _ as usize } , 528usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( rendering_intent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . profiles as * const _ as usize } , 536usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( profiles ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . units as * const _ as usize } , 544usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( units ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . montage as * const _ as usize } , 552usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( montage ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . directory as * const _ as usize } , 560usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( directory ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . geometry as * const _ as usize } , 568usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( geometry ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . offset as * const _ as usize } , 576usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . resolution as * const _ as usize } , 584usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( resolution ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . page as * const _ as usize } , 600usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( page ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . extract_info as * const _ as usize } , 632usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( extract_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . fuzz as * const _ as usize } , 664usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( fuzz ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . filter as * const _ as usize } , 672usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( filter ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . intensity as * const _ as usize } , 676usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( intensity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . interlace as * const _ as usize } , 680usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( interlace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . endian as * const _ as usize } , 684usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( endian ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . gravity as * const _ as usize } , 688usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . compose as * const _ as usize } , 692usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( compose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . dispose as * const _ as usize } , 696usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( dispose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . scene as * const _ as usize } , 704usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( scene ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . delay as * const _ as usize } , 712usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( delay ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . duration as * const _ as usize } , 720usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . ticks_per_second as * const _ as usize } , 728usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( ticks_per_second ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . iterations as * const _ as usize } , 736usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( iterations ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . total_colors as * const _ as usize } , 744usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( total_colors ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . start_loop as * const _ as usize } , 752usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( start_loop ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . interpolate as * const _ as usize } , 760usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( interpolate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . black_point_compensation as * const _ as usize } , 764usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( black_point_compensation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . tile_offset as * const _ as usize } , 768usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( tile_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . type_ as * const _ as usize } , 800usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . dither as * const _ as usize } , 804usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( dither ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . extent as * const _ as usize } , 808usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( extent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . ping as * const _ as usize } , 816usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( ping ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . read_mask as * const _ as usize } , 820usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( read_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . write_mask as * const _ as usize } , 824usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( write_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . alpha_trait as * const _ as usize } , 828usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( alpha_trait ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . number_channels as * const _ as usize } , 832usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( number_channels ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . number_meta_channels as * const _ as usize } , 840usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( number_meta_channels ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . metacontent_extent as * const _ as usize } , 848usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( metacontent_extent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . channel_mask as * const _ as usize } , 856usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( channel_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . channel_map as * const _ as usize } , 864usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( channel_map ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . cache as * const _ as usize } , 872usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( cache ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . error as * const _ as usize } , 880usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( error ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . timer as * const _ as usize } , 904usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( timer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . progress_monitor as * const _ as usize } , 968usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( progress_monitor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . client_data as * const _ as usize } , 976usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( client_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . ascii85 as * const _ as usize } , 984usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( ascii85 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . generic_profile as * const _ as usize } , 992usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( generic_profile ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . properties as * const _ as usize } , 1000usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( properties ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . artifacts as * const _ as usize } , 1008usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( artifacts ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . filename as * const _ as usize } , 1016usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( filename ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . magick_filename as * const _ as usize } , 5112usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( magick_filename ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . magick as * const _ as usize } , 9208usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( magick ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . magick_columns as * const _ as usize } , 13304usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( magick_columns ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . magick_rows as * const _ as usize } , 13312usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( magick_rows ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . blob as * const _ as usize } , 13320usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( blob ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . timestamp as * const _ as usize } , 13328usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( timestamp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . debug as * const _ as usize } , 13336usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( debug ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . reference_count as * const _ as usize } , 13344usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( reference_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . semaphore as * const _ as usize } , 13352usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( semaphore ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . image_info as * const _ as usize } , 13360usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( image_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . list as * const _ as usize } , 13368usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . previous as * const _ as usize } , 13376usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( previous ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . next as * const _ as usize } , 13384usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( next ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . signature as * const _ as usize } , 13392usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . matte_color as * const _ as usize } , 13400usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( matte_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . composite_mask as * const _ as usize } , 13488usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( composite_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . mask_trait as * const _ as usize } , 13492usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( mask_trait ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _Image ) ) . channels as * const _ as usize } , 13496usize , concat ! ( "Alignment of field: " , stringify ! ( _Image ) , "::" , stringify ! ( channels ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _ImageInfo { pub compression : CompressionType , pub orientation : OrientationType , pub temporary : MagickBooleanType , pub adjoin : MagickBooleanType , pub affirm : MagickBooleanType , pub antialias : MagickBooleanType , pub size : * mut libc :: c_char , pub extract : * mut libc :: c_char , pub page : * mut libc :: c_char , pub scenes : * mut libc :: c_char , pub scene : usize , pub number_scenes : usize , pub depth : usize , pub interlace : InterlaceType , pub endian : EndianType , pub units : ResolutionType , pub quality : usize , pub sampling_factor : * mut libc :: c_char , pub server_name : * mut libc :: c_char , pub font : * mut libc :: c_char , pub texture : * mut libc :: c_char , pub density : * mut libc :: c_char , pub pointsize : f64 , pub fuzz : f64 , pub alpha_color : PixelInfo , pub background_color : PixelInfo , pub border_color : PixelInfo , pub transparent_color : PixelInfo , pub dither : MagickBooleanType , pub monochrome : MagickBooleanType , pub colorspace : ColorspaceType , pub compose : CompositeOperator , pub type_ : ImageType , pub ping : MagickBooleanType , pub verbose : MagickBooleanType , pub channel : ChannelType , pub options : * mut libc :: c_void , pub profile : * mut libc :: c_void , pub synchronize : MagickBooleanType , pub progress_monitor : MagickProgressMonitor , pub client_data : * mut libc :: c_void , pub cache : * mut libc :: c_void , pub stream : StreamHandler , pub file : * mut FILE , pub blob : * mut libc :: c_void , pub length : usize , pub magick : [ libc :: c_char ; 4096usize ] , pub unique : [ libc :: c_char ; 4096usize ] , pub filename : [ libc :: c_char ; 4096usize ] , pub debug : MagickBooleanType , pub signature : usize , pub custom_stream : * mut CustomStreamInfo , pub matte_color : PixelInfo , } # [ test ] fn bindgen_test_layout__ImageInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ImageInfo > ( ) , 13024usize , concat ! ( "Size of: " , stringify ! ( _ImageInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ImageInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ImageInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . compression as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( compression ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . orientation as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( orientation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . temporary as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( temporary ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . adjoin as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( adjoin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . affirm as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( affirm ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . antialias as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( antialias ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . size as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . extract as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( extract ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . page as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( page ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . scenes as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( scenes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . scene as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( scene ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . number_scenes as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( number_scenes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . depth as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . interlace as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( interlace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . endian as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( endian ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . units as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( units ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . quality as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( quality ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . sampling_factor as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( sampling_factor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . server_name as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( server_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . font as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . texture as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( texture ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . density as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( density ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . pointsize as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( pointsize ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . fuzz as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( fuzz ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . alpha_color as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( alpha_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . background_color as * const _ as usize } , 248usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( background_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . border_color as * const _ as usize } , 336usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( border_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . transparent_color as * const _ as usize } , 424usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( transparent_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . dither as * const _ as usize } , 512usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( dither ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . monochrome as * const _ as usize } , 516usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( monochrome ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . colorspace as * const _ as usize } , 520usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( colorspace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . compose as * const _ as usize } , 524usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( compose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . type_ as * const _ as usize } , 528usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . ping as * const _ as usize } , 532usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( ping ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . verbose as * const _ as usize } , 536usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( verbose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . channel as * const _ as usize } , 540usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( channel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . options as * const _ as usize } , 544usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( options ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . profile as * const _ as usize } , 552usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( profile ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . synchronize as * const _ as usize } , 560usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( synchronize ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . progress_monitor as * const _ as usize } , 568usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( progress_monitor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . client_data as * const _ as usize } , 576usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( client_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . cache as * const _ as usize } , 584usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( cache ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . stream as * const _ as usize } , 592usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( stream ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . file as * const _ as usize } , 600usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( file ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . blob as * const _ as usize } , 608usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( blob ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . length as * const _ as usize } , 616usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . magick as * const _ as usize } , 624usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( magick ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . unique as * const _ as usize } , 4720usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( unique ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . filename as * const _ as usize } , 8816usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( filename ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . debug as * const _ as usize } , 12912usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( debug ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . signature as * const _ as usize } , 12920usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . custom_stream as * const _ as usize } , 12928usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( custom_stream ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ImageInfo ) ) . matte_color as * const _ as usize } , 12936usize , concat ! ( "Alignment of field: " , stringify ! ( _ImageInfo ) , "::" , stringify ! ( matte_color ) ) ) ; } extern "C" {
 pub fn SetImageChannelMask ( arg1 : * mut Image , arg2 : ChannelType , ) -> ChannelType ; 
} extern "C" {
 pub fn CatchImageException ( arg1 : * mut Image , ) -> ExceptionType ; 
} extern "C" {
 pub fn GetImageInfoFile ( arg1 : * const ImageInfo , ) -> * mut FILE ; 
} extern "C" {
 pub fn AcquireImage ( arg1 : * const ImageInfo , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn AppendImages ( arg1 : * const Image , arg2 : MagickBooleanType , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CloneImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : MagickBooleanType , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DestroyImage ( arg1 : * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn GetImageMask ( arg1 : * const Image , arg2 : PixelMask , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn NewMagickImage ( arg1 : * const ImageInfo , arg2 : usize , arg3 : usize , arg4 : * const PixelInfo , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ReferenceImage ( arg1 : * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn SmushImages ( arg1 : * const Image , arg2 : MagickBooleanType , arg3 : isize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn AcquireImageInfo ( ) -> * mut ImageInfo ; 
} extern "C" {
 pub fn CloneImageInfo ( arg1 : * const ImageInfo , ) -> * mut ImageInfo ; 
} extern "C" {
 pub fn DestroyImageInfo ( arg1 : * mut ImageInfo , ) -> * mut ImageInfo ; 
} extern "C" {
 pub fn ClipImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ClipImagePath ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : MagickBooleanType , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CopyImagePixels ( arg1 : * mut Image , arg2 : * const Image , arg3 : * const RectangleInfo , arg4 : * const OffsetInfo , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsTaintImage ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsHighDynamicRangeImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsImageObject ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListMagickInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ModifyImage ( arg1 : * mut * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ResetImagePage ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ResetImagePixels ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageAlpha ( arg1 : * mut Image , arg2 : Quantum , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageBackgroundColor ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageColor ( arg1 : * mut Image , arg2 : * const PixelInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageExtent ( arg1 : * mut Image , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageInfo ( arg1 : * mut ImageInfo , arg2 : libc :: c_uint , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageMask ( arg1 : * mut Image , type_ : PixelMask , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageRegionMask ( arg1 : * mut Image , type_ : PixelMask , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageStorageClass ( arg1 : * mut Image , arg2 : ClassType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn StripImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SyncImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SyncImageSettings ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SyncImagesSettings ( arg1 : * mut ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InterpretImageFilename ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * const libc :: c_char , arg4 : libc :: c_int , arg5 : * mut libc :: c_char , arg6 : * mut ExceptionInfo , ) -> usize ; 
} extern "C" {
 pub fn GetImageReferenceCount ( arg1 : * mut Image , ) -> isize ; 
} extern "C" {
 pub fn GetImageVirtualPixelMethod ( arg1 : * const Image , ) -> VirtualPixelMethod ; 
} extern "C" {
 pub fn SetImageVirtualPixelMethod ( arg1 : * mut Image , arg2 : VirtualPixelMethod , arg3 : * mut ExceptionInfo , ) -> VirtualPixelMethod ; 
} extern "C" {
 pub fn AcquireNextImage ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn DestroyImagePixels ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn DisassociateImageStream ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn GetImageInfo ( arg1 : * mut ImageInfo , ) ; 
} extern "C" {
 pub fn SetImageInfoBlob ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_void , arg3 : usize , ) ; 
} extern "C" {
 pub fn SetImageInfoFile ( arg1 : * mut ImageInfo , arg2 : * mut FILE , ) ; 
} extern "C" {
 pub fn SetImageInfoCustomStream ( arg1 : * mut ImageInfo , arg2 : * mut CustomStreamInfo , ) ; 
} pub const StretchType_UndefinedStretch : StretchType = 0 ; pub const StretchType_NormalStretch : StretchType = 1 ; pub const StretchType_UltraCondensedStretch : StretchType = 2 ; pub const StretchType_ExtraCondensedStretch : StretchType = 3 ; pub const StretchType_CondensedStretch : StretchType = 4 ; pub const StretchType_SemiCondensedStretch : StretchType = 5 ; pub const StretchType_SemiExpandedStretch : StretchType = 6 ; pub const StretchType_ExpandedStretch : StretchType = 7 ; pub const StretchType_ExtraExpandedStretch : StretchType = 8 ; pub const StretchType_UltraExpandedStretch : StretchType = 9 ; pub const StretchType_AnyStretch : StretchType = 10 ; pub type StretchType = libc :: c_uint ; pub const StyleType_UndefinedStyle : StyleType = 0 ; pub const StyleType_NormalStyle : StyleType = 1 ; pub const StyleType_ItalicStyle : StyleType = 2 ; pub const StyleType_ObliqueStyle : StyleType = 3 ; pub const StyleType_AnyStyle : StyleType = 4 ; pub const StyleType_BoldStyle : StyleType = 5 ; pub type StyleType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _TypeInfo { pub face : usize , pub path : * mut libc :: c_char , pub name : * mut libc :: c_char , pub description : * mut libc :: c_char , pub family : * mut libc :: c_char , pub style : StyleType , pub stretch : StretchType , pub weight : usize , pub encoding : * mut libc :: c_char , pub foundry : * mut libc :: c_char , pub format : * mut libc :: c_char , pub metrics : * mut libc :: c_char , pub glyphs : * mut libc :: c_char , pub stealth : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__TypeInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _TypeInfo > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( _TypeInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _TypeInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _TypeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . face as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( face ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . path as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . name as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . description as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( description ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . family as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( family ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . style as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . stretch as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( stretch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . weight as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( weight ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . encoding as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( encoding ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . foundry as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( foundry ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . format as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . metrics as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( metrics ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . glyphs as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( glyphs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . stealth as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeInfo ) ) . signature as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type TypeInfo = _TypeInfo ; extern "C" {
 pub fn GetTypeList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn ListTypeInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetTypeInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * const TypeInfo ; 
} extern "C" {
 pub fn GetTypeInfoByFamily ( arg1 : * const libc :: c_char , arg2 : StyleType , arg3 : StretchType , arg4 : usize , arg5 : * mut ExceptionInfo , ) -> * const TypeInfo ; 
} extern "C" {
 pub fn GetTypeInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const TypeInfo ; 
} pub const AlignType_UndefinedAlign : AlignType = 0 ; pub const AlignType_LeftAlign : AlignType = 1 ; pub const AlignType_CenterAlign : AlignType = 2 ; pub const AlignType_RightAlign : AlignType = 3 ; pub type AlignType = libc :: c_uint ; pub const ClipPathUnits_UndefinedPathUnits : ClipPathUnits = 0 ; pub const ClipPathUnits_UserSpace : ClipPathUnits = 1 ; pub const ClipPathUnits_UserSpaceOnUse : ClipPathUnits = 2 ; pub const ClipPathUnits_ObjectBoundingBox : ClipPathUnits = 3 ; pub type ClipPathUnits = libc :: c_uint ; pub const DecorationType_UndefinedDecoration : DecorationType = 0 ; pub const DecorationType_NoDecoration : DecorationType = 1 ; pub const DecorationType_UnderlineDecoration : DecorationType = 2 ; pub const DecorationType_OverlineDecoration : DecorationType = 3 ; pub const DecorationType_LineThroughDecoration : DecorationType = 4 ; pub type DecorationType = libc :: c_uint ; pub const DirectionType_UndefinedDirection : DirectionType = 0 ; pub const DirectionType_RightToLeftDirection : DirectionType = 1 ; pub const DirectionType_LeftToRightDirection : DirectionType = 2 ; pub type DirectionType = libc :: c_uint ; pub const FillRule_UndefinedRule : FillRule = 0 ; pub const FillRule_EvenOddRule : FillRule = 1 ; pub const FillRule_NonZeroRule : FillRule = 2 ; pub type FillRule = libc :: c_uint ; pub const GradientType_UndefinedGradient : GradientType = 0 ; pub const GradientType_LinearGradient : GradientType = 1 ; pub const GradientType_RadialGradient : GradientType = 2 ; pub type GradientType = libc :: c_uint ; pub const LineCap_UndefinedCap : LineCap = 0 ; pub const LineCap_ButtCap : LineCap = 1 ; pub const LineCap_RoundCap : LineCap = 2 ; pub const LineCap_SquareCap : LineCap = 3 ; pub type LineCap = libc :: c_uint ; pub const LineJoin_UndefinedJoin : LineJoin = 0 ; pub const LineJoin_MiterJoin : LineJoin = 1 ; pub const LineJoin_RoundJoin : LineJoin = 2 ; pub const LineJoin_BevelJoin : LineJoin = 3 ; pub type LineJoin = libc :: c_uint ; pub const PaintMethod_UndefinedMethod : PaintMethod = 0 ; pub const PaintMethod_PointMethod : PaintMethod = 1 ; pub const PaintMethod_ReplaceMethod : PaintMethod = 2 ; pub const PaintMethod_FloodfillMethod : PaintMethod = 3 ; pub const PaintMethod_FillToBorderMethod : PaintMethod = 4 ; pub const PaintMethod_ResetMethod : PaintMethod = 5 ; pub type PaintMethod = libc :: c_uint ; pub const PrimitiveType_UndefinedPrimitive : PrimitiveType = 0 ; pub const PrimitiveType_AlphaPrimitive : PrimitiveType = 1 ; pub const PrimitiveType_ArcPrimitive : PrimitiveType = 2 ; pub const PrimitiveType_BezierPrimitive : PrimitiveType = 3 ; pub const PrimitiveType_CirclePrimitive : PrimitiveType = 4 ; pub const PrimitiveType_ColorPrimitive : PrimitiveType = 5 ; pub const PrimitiveType_EllipsePrimitive : PrimitiveType = 6 ; pub const PrimitiveType_ImagePrimitive : PrimitiveType = 7 ; pub const PrimitiveType_LinePrimitive : PrimitiveType = 8 ; pub const PrimitiveType_PathPrimitive : PrimitiveType = 9 ; pub const PrimitiveType_PointPrimitive : PrimitiveType = 10 ; pub const PrimitiveType_PolygonPrimitive : PrimitiveType = 11 ; pub const PrimitiveType_PolylinePrimitive : PrimitiveType = 12 ; pub const PrimitiveType_RectanglePrimitive : PrimitiveType = 13 ; pub const PrimitiveType_RoundRectanglePrimitive : PrimitiveType = 14 ; pub const PrimitiveType_TextPrimitive : PrimitiveType = 15 ; pub type PrimitiveType = libc :: c_uint ; pub const ReferenceType_UndefinedReference : ReferenceType = 0 ; pub const ReferenceType_GradientReference : ReferenceType = 1 ; pub type ReferenceType = libc :: c_uint ; pub const SpreadMethod_UndefinedSpread : SpreadMethod = 0 ; pub const SpreadMethod_PadSpread : SpreadMethod = 1 ; pub const SpreadMethod_ReflectSpread : SpreadMethod = 2 ; pub const SpreadMethod_RepeatSpread : SpreadMethod = 3 ; pub type SpreadMethod = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _StopInfo { pub color : PixelInfo , pub offset : f64 , } # [ test ] fn bindgen_test_layout__StopInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _StopInfo > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( _StopInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _StopInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _StopInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StopInfo ) ) . color as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _StopInfo ) , "::" , stringify ! ( color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _StopInfo ) ) . offset as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _StopInfo ) , "::" , stringify ! ( offset ) ) ) ; } pub type StopInfo = _StopInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _GradientInfo { pub type_ : GradientType , pub bounding_box : RectangleInfo , pub gradient_vector : SegmentInfo , pub stops : * mut StopInfo , pub number_stops : usize , pub spread : SpreadMethod , pub debug : MagickBooleanType , pub center : PointInfo , pub radii : PointInfo , pub radius : f64 , pub angle : f64 , pub signature : usize , } # [ test ] fn bindgen_test_layout__GradientInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _GradientInfo > ( ) , 152usize , concat ! ( "Size of: " , stringify ! ( _GradientInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _GradientInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _GradientInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . bounding_box as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( bounding_box ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . gradient_vector as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( gradient_vector ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . stops as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( stops ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . number_stops as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( number_stops ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . spread as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( spread ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . debug as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( debug ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . center as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( center ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . radii as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( radii ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . radius as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( radius ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . angle as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( angle ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _GradientInfo ) ) . signature as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _GradientInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type GradientInfo = _GradientInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ElementReference { pub id : * mut libc :: c_char , pub type_ : ReferenceType , pub gradient : GradientInfo , pub previous : * mut _ElementReference , pub next : * mut _ElementReference , pub signature : usize , } # [ test ] fn bindgen_test_layout__ElementReference ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ElementReference > ( ) , 192usize , concat ! ( "Size of: " , stringify ! ( _ElementReference ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ElementReference > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ElementReference ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ElementReference ) ) . id as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ElementReference ) , "::" , stringify ! ( id ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ElementReference ) ) . type_ as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ElementReference ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ElementReference ) ) . gradient as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ElementReference ) , "::" , stringify ! ( gradient ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ElementReference ) ) . previous as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( _ElementReference ) , "::" , stringify ! ( previous ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ElementReference ) ) . next as * const _ as usize } , 176usize , concat ! ( "Alignment of field: " , stringify ! ( _ElementReference ) , "::" , stringify ! ( next ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ElementReference ) ) . signature as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _ElementReference ) , "::" , stringify ! ( signature ) ) ) ; } pub type ElementReference = _ElementReference ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _DrawInfo { pub primitive : * mut libc :: c_char , pub geometry : * mut libc :: c_char , pub viewbox : RectangleInfo , pub affine : AffineMatrix , pub fill : PixelInfo , pub stroke : PixelInfo , pub undercolor : PixelInfo , pub border_color : PixelInfo , pub fill_pattern : * mut Image , pub stroke_pattern : * mut Image , pub stroke_width : f64 , pub gradient : GradientInfo , pub stroke_antialias : MagickBooleanType , pub text_antialias : MagickBooleanType , pub fill_rule : FillRule , pub linecap : LineCap , pub linejoin : LineJoin , pub miterlimit : usize , pub dash_offset : f64 , pub decorate : DecorationType , pub compose : CompositeOperator , pub text : * mut libc :: c_char , pub font : * mut libc :: c_char , pub metrics : * mut libc :: c_char , pub family : * mut libc :: c_char , pub face : usize , pub style : StyleType , pub stretch : StretchType , pub weight : usize , pub encoding : * mut libc :: c_char , pub pointsize : f64 , pub density : * mut libc :: c_char , pub align : AlignType , pub gravity : GravityType , pub server_name : * mut libc :: c_char , pub dash_pattern : * mut f64 , pub clip_mask : * mut libc :: c_char , pub bounds : SegmentInfo , pub clip_units : ClipPathUnits , pub alpha : Quantum , pub render : MagickBooleanType , pub element_reference : ElementReference , pub kerning : f64 , pub interword_spacing : f64 , pub interline_spacing : f64 , pub direction : DirectionType , pub debug : MagickBooleanType , pub signature : usize , pub fill_alpha : f64 , pub stroke_alpha : f64 , pub clip_path : MagickBooleanType , pub clipping_mask : * mut Image , pub compliance : ComplianceType , pub composite_mask : * mut Image , pub id : * mut libc :: c_char , } # [ test ] fn bindgen_test_layout__DrawInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _DrawInfo > ( ) , 1120usize , concat ! ( "Size of: " , stringify ! ( _DrawInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _DrawInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _DrawInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . primitive as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( primitive ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . geometry as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( geometry ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . viewbox as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( viewbox ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . affine as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( affine ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . fill as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( fill ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . stroke as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( stroke ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . undercolor as * const _ as usize } , 272usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( undercolor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . border_color as * const _ as usize } , 360usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( border_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . fill_pattern as * const _ as usize } , 448usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( fill_pattern ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . stroke_pattern as * const _ as usize } , 456usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( stroke_pattern ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . stroke_width as * const _ as usize } , 464usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( stroke_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . gradient as * const _ as usize } , 472usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( gradient ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . stroke_antialias as * const _ as usize } , 624usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( stroke_antialias ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . text_antialias as * const _ as usize } , 628usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( text_antialias ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . fill_rule as * const _ as usize } , 632usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( fill_rule ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . linecap as * const _ as usize } , 636usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( linecap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . linejoin as * const _ as usize } , 640usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( linejoin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . miterlimit as * const _ as usize } , 648usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( miterlimit ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . dash_offset as * const _ as usize } , 656usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( dash_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . decorate as * const _ as usize } , 664usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( decorate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . compose as * const _ as usize } , 668usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( compose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . text as * const _ as usize } , 672usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( text ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . font as * const _ as usize } , 680usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . metrics as * const _ as usize } , 688usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( metrics ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . family as * const _ as usize } , 696usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( family ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . face as * const _ as usize } , 704usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( face ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . style as * const _ as usize } , 712usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . stretch as * const _ as usize } , 716usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( stretch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . weight as * const _ as usize } , 720usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( weight ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . encoding as * const _ as usize } , 728usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( encoding ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . pointsize as * const _ as usize } , 736usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( pointsize ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . density as * const _ as usize } , 744usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( density ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . align as * const _ as usize } , 752usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( align ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . gravity as * const _ as usize } , 756usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . server_name as * const _ as usize } , 760usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( server_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . dash_pattern as * const _ as usize } , 768usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( dash_pattern ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . clip_mask as * const _ as usize } , 776usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( clip_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . bounds as * const _ as usize } , 784usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( bounds ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . clip_units as * const _ as usize } , 816usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( clip_units ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . alpha as * const _ as usize } , 820usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( alpha ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . render as * const _ as usize } , 824usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( render ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . element_reference as * const _ as usize } , 832usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( element_reference ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . kerning as * const _ as usize } , 1024usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( kerning ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . interword_spacing as * const _ as usize } , 1032usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( interword_spacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . interline_spacing as * const _ as usize } , 1040usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( interline_spacing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . direction as * const _ as usize } , 1048usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . debug as * const _ as usize } , 1052usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( debug ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . signature as * const _ as usize } , 1056usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . fill_alpha as * const _ as usize } , 1064usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( fill_alpha ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . stroke_alpha as * const _ as usize } , 1072usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( stroke_alpha ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . clip_path as * const _ as usize } , 1080usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( clip_path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . clipping_mask as * const _ as usize } , 1088usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( clipping_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . compliance as * const _ as usize } , 1096usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( compliance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . composite_mask as * const _ as usize } , 1104usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( composite_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DrawInfo ) ) . id as * const _ as usize } , 1112usize , concat ! ( "Alignment of field: " , stringify ! ( _DrawInfo ) , "::" , stringify ! ( id ) ) ) ; } pub type DrawInfo = _DrawInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PrimitiveInfo { pub point : PointInfo , pub coordinates : usize , pub primitive : PrimitiveType , pub method : PaintMethod , pub text : * mut libc :: c_char , pub closed_subpath : MagickBooleanType , } # [ test ] fn bindgen_test_layout__PrimitiveInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _PrimitiveInfo > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _PrimitiveInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _PrimitiveInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _PrimitiveInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimitiveInfo ) ) . point as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimitiveInfo ) , "::" , stringify ! ( point ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimitiveInfo ) ) . coordinates as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimitiveInfo ) , "::" , stringify ! ( coordinates ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimitiveInfo ) ) . primitive as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimitiveInfo ) , "::" , stringify ! ( primitive ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimitiveInfo ) ) . method as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimitiveInfo ) , "::" , stringify ! ( method ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimitiveInfo ) ) . text as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimitiveInfo ) , "::" , stringify ! ( text ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _PrimitiveInfo ) ) . closed_subpath as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _PrimitiveInfo ) , "::" , stringify ! ( closed_subpath ) ) ) ; } pub type PrimitiveInfo = _PrimitiveInfo ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _TypeMetric { pub pixels_per_em : PointInfo , pub ascent : f64 , pub descent : f64 , pub width : f64 , pub height : f64 , pub max_advance : f64 , pub underline_position : f64 , pub underline_thickness : f64 , pub bounds : SegmentInfo , pub origin : PointInfo , } # [ test ] fn bindgen_test_layout__TypeMetric ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _TypeMetric > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( _TypeMetric ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _TypeMetric > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _TypeMetric ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . pixels_per_em as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( pixels_per_em ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . ascent as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( ascent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . descent as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( descent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . width as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . height as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . max_advance as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( max_advance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . underline_position as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( underline_position ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . underline_thickness as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( underline_thickness ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . bounds as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( bounds ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _TypeMetric ) ) . origin as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _TypeMetric ) , "::" , stringify ! ( origin ) ) ) ; } pub type TypeMetric = _TypeMetric ; extern "C" {
 pub fn AcquireDrawInfo ( ) -> * mut DrawInfo ; 
} extern "C" {
 pub fn CloneDrawInfo ( arg1 : * const ImageInfo , arg2 : * const DrawInfo , ) -> * mut DrawInfo ; 
} extern "C" {
 pub fn DestroyDrawInfo ( arg1 : * mut DrawInfo , ) -> * mut DrawInfo ; 
} extern "C" {
 pub fn DrawAffineImage ( arg1 : * mut Image , arg2 : * const Image , arg3 : * const AffineMatrix , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawClipPath ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawGradientImage ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawImage ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawPatternPath ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * const libc :: c_char , arg4 : * mut * mut Image , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawPrimitive ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * const PrimitiveInfo , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetAffineMatrix ( arg1 : * mut AffineMatrix , ) ; 
} extern "C" {
 pub fn GetDrawInfo ( arg1 : * const ImageInfo , arg2 : * mut DrawInfo , ) ; 
} extern "C" {
 pub fn AnnotateImage ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMultilineTypeMetrics ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * mut TypeMetric , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetTypeMetrics ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * mut TypeMetric , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn FormatMagickCaption ( arg1 : * mut Image , arg2 : * mut DrawInfo , arg3 : MagickBooleanType , arg4 : * mut TypeMetric , arg5 : * mut * mut libc :: c_char , arg6 : * mut ExceptionInfo , ) -> isize ; 
} extern "C" {
 pub fn RemoveImageArtifact ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetNextImageArtifact ( arg1 : * const Image , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetImageArtifact ( arg1 : * const Image , arg2 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn CloneImageArtifacts ( arg1 : * mut Image , arg2 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DefineImageArtifact ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteImageArtifact ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageArtifact ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DestroyImageArtifacts ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn ResetImageArtifactIterator ( arg1 : * const Image , ) ; 
} extern "C" {
 pub fn GetImageType ( arg1 : * const Image , ) -> ImageType ; 
} extern "C" {
 pub fn IdentifyImageGray ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> ImageType ; 
} extern "C" {
 pub fn IdentifyImageType ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> ImageType ; 
} extern "C" {
 pub fn IdentifyImageMonochrome ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsImageGray ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsImageMonochrome ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsImageOpaque ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageDepth ( arg1 : * mut Image , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageType ( arg1 : * mut Image , arg2 : ImageType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageBoundingBox ( arg1 : * const Image , exception : * mut ExceptionInfo , ) -> RectangleInfo ; 
} extern "C" {
 pub fn GetImageDepth ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> usize ; 
} extern "C" {
 pub fn GetImageQuantumDepth ( arg1 : * const Image , arg2 : MagickBooleanType , ) -> usize ; 
} pub const CacheType_UndefinedCache : CacheType = 0 ; pub const CacheType_DiskCache : CacheType = 1 ; pub const CacheType_DistributedCache : CacheType = 2 ; pub const CacheType_MapCache : CacheType = 3 ; pub const CacheType_MemoryCache : CacheType = 4 ; pub const CacheType_PingCache : CacheType = 5 ; pub type CacheType = libc :: c_uint ; extern "C" {
 pub fn GetImagePixelCacheType ( arg1 : * const Image , ) -> CacheType ; 
} extern "C" {
 pub fn GetPixelCacheFilename ( arg1 : * const Image , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetVirtualPixels ( arg1 : * const Image , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * const Quantum ; 
} extern "C" {
 pub fn GetVirtualPixelQueue ( arg1 : * const Image , ) -> * const Quantum ; 
} extern "C" {
 pub fn GetVirtualMetacontent ( arg1 : * const Image , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn GetOneAuthenticPixel ( arg1 : * mut Image , arg2 : isize , arg3 : isize , arg4 : * mut Quantum , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetOneVirtualPixel ( arg1 : * const Image , arg2 : isize , arg3 : isize , arg4 : * mut Quantum , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetOneVirtualPixelInfo ( arg1 : * const Image , arg2 : VirtualPixelMethod , arg3 : isize , arg4 : isize , arg5 : * mut PixelInfo , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PersistPixelCache ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : MagickBooleanType , arg4 : * mut MagickOffsetType , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SyncAuthenticPixels ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageExtent ( arg1 : * const Image , ) -> MagickSizeType ; 
} extern "C" {
 pub fn GetAuthenticPixels ( arg1 : * mut Image , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * mut Quantum ; 
} extern "C" {
 pub fn GetAuthenticPixelQueue ( arg1 : * const Image , ) -> * mut Quantum ; 
} extern "C" {
 pub fn QueueAuthenticPixels ( arg1 : * mut Image , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * mut Quantum ; 
} extern "C" {
 pub fn AcquirePixelCachePixels ( arg1 : * const Image , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn GetAuthenticMetacontent ( arg1 : * const Image , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn GetPixelCachePixels ( arg1 : * mut Image , arg2 : * mut MagickSizeType , arg3 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ChannelFxImage ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CombineImages ( arg1 : * const Image , arg2 : ColorspaceType , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SeparateImage ( arg1 : * const Image , arg2 : ChannelType , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SeparateImages ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn GetImageAlphaChannel ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageAlphaChannel ( arg1 : * mut Image , arg2 : AlphaChannelOption , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DecipherImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn EncipherImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PasskeyDecipherImage ( arg1 : * mut Image , arg2 : * const StringInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PasskeyEncipherImage ( arg1 : * mut Image , arg2 : * const StringInfo , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetClientPath ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetClientName ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn SetClientName ( arg1 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn SetClientPath ( arg1 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _CoderInfo { pub path : * mut libc :: c_char , pub magick : * mut libc :: c_char , pub name : * mut libc :: c_char , pub exempt : MagickBooleanType , pub stealth : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__CoderInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _CoderInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _CoderInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _CoderInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _CoderInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CoderInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _CoderInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CoderInfo ) ) . magick as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _CoderInfo ) , "::" , stringify ! ( magick ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CoderInfo ) ) . name as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _CoderInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CoderInfo ) ) . exempt as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _CoderInfo ) , "::" , stringify ! ( exempt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CoderInfo ) ) . stealth as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _CoderInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CoderInfo ) ) . signature as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _CoderInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type CoderInfo = _CoderInfo ; extern "C" {
 pub fn GetCoderList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetCoderInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * const CoderInfo ; 
} extern "C" {
 pub fn GetCoderInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const CoderInfo ; 
} extern "C" {
 pub fn ListCoderInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AcquireImageColormap ( arg1 : * mut Image , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CycleColormapImage ( arg1 : * mut Image , arg2 : isize , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SortColormapByIntensity ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const MetricType_UndefinedErrorMetric : MetricType = 0 ; pub const MetricType_AbsoluteErrorMetric : MetricType = 1 ; pub const MetricType_FuzzErrorMetric : MetricType = 2 ; pub const MetricType_MeanAbsoluteErrorMetric : MetricType = 3 ; pub const MetricType_MeanErrorPerPixelErrorMetric : MetricType = 4 ; pub const MetricType_MeanSquaredErrorMetric : MetricType = 5 ; pub const MetricType_NormalizedCrossCorrelationErrorMetric : MetricType = 6 ; pub const MetricType_PeakAbsoluteErrorMetric : MetricType = 7 ; pub const MetricType_PeakSignalToNoiseRatioErrorMetric : MetricType = 8 ; pub const MetricType_PerceptualHashErrorMetric : MetricType = 9 ; pub const MetricType_RootMeanSquaredErrorMetric : MetricType = 10 ; pub const MetricType_StructuralSimilarityErrorMetric : MetricType = 11 ; pub const MetricType_StructuralDissimilarityErrorMetric : MetricType = 12 ; pub type MetricType = libc :: c_uint ; extern "C" {
 pub fn GetImageDistortions ( arg1 : * mut Image , arg2 : * const Image , arg3 : MetricType , arg4 : * mut ExceptionInfo , ) -> * mut f64 ; 
} extern "C" {
 pub fn CompareImages ( arg1 : * mut Image , arg2 : * const Image , arg3 : MetricType , arg4 : * mut f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SimilarityImage ( arg1 : * const Image , arg2 : * const Image , arg3 : MetricType , arg4 : f64 , arg5 : * mut RectangleInfo , arg6 : * mut f64 , arg7 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn GetImageDistortion ( arg1 : * mut Image , arg2 : * const Image , arg3 : MetricType , arg4 : * mut f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsImagesEqual ( arg1 : * const Image , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageColorMetric ( arg1 : * mut Image , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ConfigureInfo { pub path : * mut libc :: c_char , pub name : * mut libc :: c_char , pub value : * mut libc :: c_char , pub exempt : MagickBooleanType , pub stealth : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__ConfigureInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ConfigureInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _ConfigureInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ConfigureInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ConfigureInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ConfigureInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ConfigureInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ConfigureInfo ) ) . name as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ConfigureInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ConfigureInfo ) ) . value as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ConfigureInfo ) , "::" , stringify ! ( value ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ConfigureInfo ) ) . exempt as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ConfigureInfo ) , "::" , stringify ! ( exempt ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ConfigureInfo ) ) . stealth as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _ConfigureInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ConfigureInfo ) ) . signature as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _ConfigureInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type ConfigureInfo = _ConfigureInfo ; extern "C" {
 pub fn GetConfigureList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetConfigureOption ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetConfigureValue ( arg1 : * const ConfigureInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetConfigureInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * const ConfigureInfo ; 
} extern "C" {
 pub fn GetConfigureInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const ConfigureInfo ; 
} extern "C" {
 pub fn DestroyConfigureOptions ( arg1 : * mut LinkedListInfo , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn GetConfigurePaths ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn GetConfigureOptions ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut LinkedListInfo ; 
} extern "C" {
 pub fn ListConfigureInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ConstituteImage ( arg1 : usize , arg2 : usize , arg3 : * const libc :: c_char , arg4 : StorageType , arg5 : * const libc :: c_void , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PingImage ( arg1 : * const ImageInfo , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PingImages ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ReadImage ( arg1 : * const ImageInfo , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ReadImages ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ReadInlineImage ( arg1 : * const ImageInfo , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn WriteImage ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn WriteImages ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _FrameInfo { pub width : usize , pub height : usize , pub x : isize , pub y : isize , pub inner_bevel : isize , pub outer_bevel : isize , } # [ test ] fn bindgen_test_layout__FrameInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _FrameInfo > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _FrameInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _FrameInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _FrameInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _FrameInfo ) ) . width as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _FrameInfo ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _FrameInfo ) ) . height as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _FrameInfo ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _FrameInfo ) ) . x as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _FrameInfo ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _FrameInfo ) ) . y as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _FrameInfo ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _FrameInfo ) ) . inner_bevel as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _FrameInfo ) , "::" , stringify ! ( inner_bevel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _FrameInfo ) ) . outer_bevel as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _FrameInfo ) , "::" , stringify ! ( outer_bevel ) ) ) ; } pub type FrameInfo = _FrameInfo ; extern "C" {
 pub fn BorderImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : CompositeOperator , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn FrameImage ( arg1 : * const Image , arg2 : * const FrameInfo , arg3 : CompositeOperator , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn RaiseImage ( arg1 : * mut Image , arg2 : * const RectangleInfo , arg3 : MagickBooleanType , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _DelegateInfo { pub path : * mut libc :: c_char , pub decode : * mut libc :: c_char , pub encode : * mut libc :: c_char , pub commands : * mut libc :: c_char , pub mode : isize , pub thread_support : MagickBooleanType , pub spawn : MagickBooleanType , pub stealth : MagickBooleanType , pub semaphore : * mut SemaphoreInfo , pub signature : usize , } # [ test ] fn bindgen_test_layout__DelegateInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _DelegateInfo > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( _DelegateInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _DelegateInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _DelegateInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . decode as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( decode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . encode as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( encode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . commands as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( commands ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . mode as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . thread_support as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( thread_support ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . spawn as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( spawn ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . stealth as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . semaphore as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( semaphore ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _DelegateInfo ) ) . signature as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _DelegateInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type DelegateInfo = _DelegateInfo ; extern "C" {
 pub fn GetDelegateCommand ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * const libc :: c_char , arg4 : * const libc :: c_char , arg5 : * mut ExceptionInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetDelegateList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetDelegateCommands ( arg1 : * const DelegateInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetDelegateInfo ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_char , exception : * mut ExceptionInfo , ) -> * const DelegateInfo ; 
} extern "C" {
 pub fn GetDelegateInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const DelegateInfo ; 
} extern "C" {
 pub fn ExternalDelegateCommand ( arg1 : MagickBooleanType , arg2 : MagickBooleanType , arg3 : * const libc :: c_char , arg4 : * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> libc :: c_int ; 
} extern "C" {
 pub fn GetDelegateMode ( arg1 : * const DelegateInfo , ) -> isize ; 
} extern "C" {
 pub fn GetDelegateThreadSupport ( arg1 : * const DelegateInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn InvokeDelegate ( arg1 : * mut ImageInfo , arg2 : * mut Image , arg3 : * const libc :: c_char , arg4 : * const libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListDelegateInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const MagickFormatType_UndefinedFormatType : MagickFormatType = 0 ; pub const MagickFormatType_ImplicitFormatType : MagickFormatType = 1 ; pub const MagickFormatType_ExplicitFormatType : MagickFormatType = 2 ; pub type MagickFormatType = libc :: c_uint ; pub const MagickInfoFlag_CoderNoFlag : MagickInfoFlag = 0 ; pub const MagickInfoFlag_CoderAdjoinFlag : MagickInfoFlag = 1 ; pub const MagickInfoFlag_CoderBlobSupportFlag : MagickInfoFlag = 2 ; pub const MagickInfoFlag_CoderDecoderThreadSupportFlag : MagickInfoFlag = 4 ; pub const MagickInfoFlag_CoderEncoderThreadSupportFlag : MagickInfoFlag = 8 ; pub const MagickInfoFlag_CoderEndianSupportFlag : MagickInfoFlag = 16 ; pub const MagickInfoFlag_CoderRawSupportFlag : MagickInfoFlag = 32 ; pub const MagickInfoFlag_CoderSeekableStreamFlag : MagickInfoFlag = 64 ; pub const MagickInfoFlag_CoderStealthFlag : MagickInfoFlag = 128 ; pub const MagickInfoFlag_CoderUseExtensionFlag : MagickInfoFlag = 256 ; pub const MagickInfoFlag_CoderDecoderSeekableStreamFlag : MagickInfoFlag = 512 ; pub const MagickInfoFlag_CoderEncoderSeekableStreamFlag : MagickInfoFlag = 1024 ; pub type MagickInfoFlag = libc :: c_uint ; pub type DecodeImageHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const ImageInfo , arg2 : * mut ExceptionInfo ) -> * mut Image > ; pub type EncodeImageHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo ) -> MagickBooleanType > ; pub type IsImageFormatHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const libc :: c_uchar , arg2 : usize ) -> MagickBooleanType > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MagickInfo { pub name : * mut libc :: c_char , pub description : * mut libc :: c_char , pub version : * mut libc :: c_char , pub mime_type : * mut libc :: c_char , pub note : * mut libc :: c_char , pub module : * mut libc :: c_char , pub decoder : DecodeImageHandler , pub encoder : EncodeImageHandler , pub image_info : * mut ImageInfo , pub magick : IsImageFormatHandler , pub format_type : MagickFormatType , pub flags : MagickStatusType , pub semaphore : * mut SemaphoreInfo , pub signature : usize , pub client_data : * mut libc :: c_void , } # [ test ] fn bindgen_test_layout__MagickInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MagickInfo > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( _MagickInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _MagickInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _MagickInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . description as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( description ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . version as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( version ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . mime_type as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( mime_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . note as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( note ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . module as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( module ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . decoder as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( decoder ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . encoder as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( encoder ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . image_info as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( image_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . magick as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( magick ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . format_type as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( format_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . flags as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . semaphore as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( semaphore ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . signature as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MagickInfo ) ) . client_data as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _MagickInfo ) , "::" , stringify ! ( client_data ) ) ) ; } pub type MagickInfo = _MagickInfo ; extern "C" {
 pub fn GetMagickList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetMagickDescription ( arg1 : * const MagickInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickMimeType ( arg1 : * const MagickInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickModuleName ( arg1 : * const MagickInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickName ( arg1 : * const MagickInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetImageDecoder ( arg1 : * const MagickInfo , ) -> DecodeImageHandler ; 
} extern "C" {
 pub fn GetImageEncoder ( arg1 : * const MagickInfo , ) -> EncodeImageHandler ; 
} extern "C" {
 pub fn GetMagickPrecision ( ) -> libc :: c_int ; 
} extern "C" {
 pub fn SetMagickPrecision ( arg1 : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn GetImageMagick ( arg1 : * const libc :: c_uchar , arg2 : usize , arg3 : * mut libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickAdjoin ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickBlobSupport ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickDecoderSeekableStream ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickDecoderThreadSupport ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickEncoderSeekableStream ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickEncoderThreadSupport ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickEndianSupport ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickRawSupport ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickStealth ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickUseExtension ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsMagickCoreInstantiated ( ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RegisterMagickInfo ( arg1 : * mut MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn UnregisterMagickInfo ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * const MagickInfo ; 
} extern "C" {
 pub fn GetMagickInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const MagickInfo ; 
} extern "C" {
 pub fn AcquireMagickInfo ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> * mut MagickInfo ; 
} extern "C" {
 pub fn MagickCoreGenesis ( arg1 : * const libc :: c_char , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn MagickCoreTerminus ( ) ; 
} pub type BlobFifo = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const Image , arg2 : * const libc :: c_void , arg3 : usize ) -> * mut libc :: c_int > ; extern "C" {
 pub fn GetMagickSeekableStream ( arg1 : * const MagickInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CropImageToHBITMAP ( arg1 : * mut Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ImageToHBITMAP ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn DisplayImages ( arg1 : * const ImageInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RemoteDisplayCommand ( arg1 : * const ImageInfo , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const DistortMethod_UndefinedDistortion : DistortMethod = 0 ; pub const DistortMethod_AffineDistortion : DistortMethod = 1 ; pub const DistortMethod_AffineProjectionDistortion : DistortMethod = 2 ; pub const DistortMethod_ScaleRotateTranslateDistortion : DistortMethod = 3 ; pub const DistortMethod_PerspectiveDistortion : DistortMethod = 4 ; pub const DistortMethod_PerspectiveProjectionDistortion : DistortMethod = 5 ; pub const DistortMethod_BilinearForwardDistortion : DistortMethod = 6 ; pub const DistortMethod_BilinearDistortion : DistortMethod = 6 ; pub const DistortMethod_BilinearReverseDistortion : DistortMethod = 7 ; pub const DistortMethod_PolynomialDistortion : DistortMethod = 8 ; pub const DistortMethod_ArcDistortion : DistortMethod = 9 ; pub const DistortMethod_PolarDistortion : DistortMethod = 10 ; pub const DistortMethod_DePolarDistortion : DistortMethod = 11 ; pub const DistortMethod_Cylinder2PlaneDistortion : DistortMethod = 12 ; pub const DistortMethod_Plane2CylinderDistortion : DistortMethod = 13 ; pub const DistortMethod_BarrelDistortion : DistortMethod = 14 ; pub const DistortMethod_BarrelInverseDistortion : DistortMethod = 15 ; pub const DistortMethod_ShepardsDistortion : DistortMethod = 16 ; pub const DistortMethod_ResizeDistortion : DistortMethod = 17 ; pub const DistortMethod_SentinelDistortion : DistortMethod = 18 ; pub type DistortMethod = libc :: c_uint ; pub const SparseColorMethod_UndefinedColorInterpolate : SparseColorMethod = 0 ; pub const SparseColorMethod_BarycentricColorInterpolate : SparseColorMethod = 1 ; pub const SparseColorMethod_BilinearColorInterpolate : SparseColorMethod = 7 ; pub const SparseColorMethod_PolynomialColorInterpolate : SparseColorMethod = 8 ; pub const SparseColorMethod_ShepardsColorInterpolate : SparseColorMethod = 16 ; pub const SparseColorMethod_VoronoiColorInterpolate : SparseColorMethod = 18 ; pub const SparseColorMethod_InverseColorInterpolate : SparseColorMethod = 19 ; pub const SparseColorMethod_ManhattanColorInterpolate : SparseColorMethod = 20 ; pub type SparseColorMethod = libc :: c_uint ; extern "C" {
 pub fn AffineTransformImage ( arg1 : * const Image , arg2 : * const AffineMatrix , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DistortImage ( arg1 : * const Image , arg2 : DistortMethod , arg3 : usize , arg4 : * const f64 , arg5 : MagickBooleanType , exception : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DistortResizeImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn RotateImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SparseColorImage ( arg1 : * const Image , arg2 : SparseColorMethod , arg3 : usize , arg4 : * const f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DistributePixelCacheServer ( arg1 : libc :: c_int , arg2 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn AutoGammaImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AutoLevelImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn BrightnessContrastImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CLAHEImage ( arg1 : * mut Image , arg2 : usize , arg3 : usize , arg4 : usize , arg5 : f64 , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ClutImage ( arg1 : * mut Image , arg2 : * const Image , arg3 : PixelInterpolateMethod , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ColorDecisionListImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ContrastImage ( arg1 : * mut Image , arg2 : MagickBooleanType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ContrastStretchImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn EqualizeImage ( image : * mut Image , arg1 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GammaImage ( arg1 : * mut Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GrayscaleImage ( arg1 : * mut Image , arg2 : PixelIntensityMethod , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn HaldClutImage ( arg1 : * mut Image , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LevelImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LevelizeImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LevelImageColors ( arg1 : * mut Image , arg2 : * const PixelInfo , arg3 : * const PixelInfo , arg4 : MagickBooleanType , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LinearStretchImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ModulateImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn NegateImage ( arg1 : * mut Image , arg2 : MagickBooleanType , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn NormalizeImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SigmoidalContrastImage ( arg1 : * mut Image , arg2 : MagickBooleanType , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn EnhanceImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ChannelFeatures { pub angular_second_moment : [ f64 ; 4usize ] , pub contrast : [ f64 ; 4usize ] , pub correlation : [ f64 ; 4usize ] , pub variance_sum_of_squares : [ f64 ; 4usize ] , pub inverse_difference_moment : [ f64 ; 4usize ] , pub sum_average : [ f64 ; 4usize ] , pub sum_variance : [ f64 ; 4usize ] , pub sum_entropy : [ f64 ; 4usize ] , pub entropy : [ f64 ; 4usize ] , pub difference_variance : [ f64 ; 4usize ] , pub difference_entropy : [ f64 ; 4usize ] , pub measure_of_correlation_1 : [ f64 ; 4usize ] , pub measure_of_correlation_2 : [ f64 ; 4usize ] , pub maximum_correlation_coefficient : [ f64 ; 4usize ] , } # [ test ] fn bindgen_test_layout__ChannelFeatures ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ChannelFeatures > ( ) , 448usize , concat ! ( "Size of: " , stringify ! ( _ChannelFeatures ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ChannelFeatures > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ChannelFeatures ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . angular_second_moment as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( angular_second_moment ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . contrast as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( contrast ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . correlation as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( correlation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . variance_sum_of_squares as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( variance_sum_of_squares ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . inverse_difference_moment as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( inverse_difference_moment ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . sum_average as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( sum_average ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . sum_variance as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( sum_variance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . sum_entropy as * const _ as usize } , 224usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( sum_entropy ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . entropy as * const _ as usize } , 256usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( entropy ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . difference_variance as * const _ as usize } , 288usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( difference_variance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . difference_entropy as * const _ as usize } , 320usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( difference_entropy ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . measure_of_correlation_1 as * const _ as usize } , 352usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( measure_of_correlation_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . measure_of_correlation_2 as * const _ as usize } , 384usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( measure_of_correlation_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelFeatures ) ) . maximum_correlation_coefficient as * const _ as usize } , 416usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelFeatures ) , "::" , stringify ! ( maximum_correlation_coefficient ) ) ) ; } pub type ChannelFeatures = _ChannelFeatures ; extern "C" {
 pub fn GetImageFeatures ( arg1 : * const Image , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> * mut ChannelFeatures ; 
} extern "C" {
 pub fn CannyEdgeImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn HoughLineImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : usize , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MeanShiftImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} pub const ComplexOperator_UndefinedComplexOperator : ComplexOperator = 0 ; pub const ComplexOperator_AddComplexOperator : ComplexOperator = 1 ; pub const ComplexOperator_ConjugateComplexOperator : ComplexOperator = 2 ; pub const ComplexOperator_DivideComplexOperator : ComplexOperator = 3 ; pub const ComplexOperator_MagnitudePhaseComplexOperator : ComplexOperator = 4 ; pub const ComplexOperator_MultiplyComplexOperator : ComplexOperator = 5 ; pub const ComplexOperator_RealImaginaryComplexOperator : ComplexOperator = 6 ; pub const ComplexOperator_SubtractComplexOperator : ComplexOperator = 7 ; pub type ComplexOperator = libc :: c_uint ; extern "C" {
 pub fn ComplexImages ( arg1 : * const Image , arg2 : ComplexOperator , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ForwardFourierTransformImage ( arg1 : * const Image , arg2 : MagickBooleanType , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn InverseFourierTransformImage ( arg1 : * const Image , arg2 : * const Image , arg3 : MagickBooleanType , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn FxImage ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _RandomInfo { _unused : [ u8 ; 0 ] } pub type RandomInfo = _RandomInfo ; extern "C" {
 pub fn GetRandomValue ( arg1 : * mut RandomInfo , ) -> f64 ; 
} extern "C" {
 pub fn GetPseudoRandomValue ( arg1 : * mut RandomInfo , ) -> f64 ; 
} extern "C" {
 pub fn AcquireRandomInfo ( ) -> * mut RandomInfo ; 
} extern "C" {
 pub fn DestroyRandomInfo ( arg1 : * mut RandomInfo , ) -> * mut RandomInfo ; 
} extern "C" {
 pub fn GetRandomKey ( arg1 : * mut RandomInfo , arg2 : usize , ) -> * mut StringInfo ; 
} extern "C" {
 pub fn GetRandomSecretKey ( arg1 : * const RandomInfo , ) -> libc :: c_ulong ; 
} extern "C" {
 pub fn SetRandomKey ( arg1 : * mut RandomInfo , arg2 : usize , arg3 : * mut libc :: c_uchar , ) ; 
} extern "C" {
 pub fn SetRandomSecretKey ( arg1 : libc :: c_ulong , ) ; 
} extern "C" {
 pub fn SetRandomTrueRandom ( arg1 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn ExpandAffine ( arg1 : * const AffineMatrix , ) -> f64 ; 
} extern "C" {
 pub fn ConvertHSLToRGB ( arg1 : f64 , arg2 : f64 , arg3 : f64 , arg4 : * mut f64 , arg5 : * mut f64 , arg6 : * mut f64 , ) ; 
} extern "C" {
 pub fn ConvertRGBToHSL ( arg1 : f64 , arg2 : f64 , arg3 : f64 , arg4 : * mut f64 , arg5 : * mut f64 , arg6 : * mut f64 , ) ; 
} extern "C" {
 pub fn GetImageHistogram ( arg1 : * const Image , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut PixelInfo ; 
} extern "C" {
 pub fn UniqueImageColors ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn IdentifyPaletteImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsHistogramImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsPaletteImage ( arg1 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MinMaxStretchImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetNumberColors ( arg1 : * const Image , arg2 : * mut FILE , arg3 : * mut ExceptionInfo , ) -> usize ; 
} extern "C" {
 pub fn IdentifyImage ( arg1 : * mut Image , arg2 : * mut FILE , arg3 : MagickBooleanType , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ImageView { _unused : [ u8 ; 0 ] } pub type ImageView = _ImageView ; pub type DuplexTransferImageViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const ImageView , arg2 : * const ImageView , arg3 : * mut ImageView , arg4 : isize , arg5 : libc :: c_int , arg6 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type GetImageViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const ImageView , arg2 : isize , arg3 : libc :: c_int , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type SetImageViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut ImageView , arg2 : isize , arg3 : libc :: c_int , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type TransferImageViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const ImageView , arg2 : * mut ImageView , arg3 : isize , arg4 : libc :: c_int , arg5 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type UpdateImageViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut ImageView , arg2 : isize , arg3 : libc :: c_int , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; extern "C" {
 pub fn GetImageViewException ( arg1 : * const ImageView , arg2 : * mut ExceptionType , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetImageViewVirtualPixels ( arg1 : * const ImageView , ) -> * const Quantum ; 
} extern "C" {
 pub fn GetImageViewVirtualMetacontent ( arg1 : * const ImageView , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn GetImageViewImage ( arg1 : * const ImageView , ) -> * mut Image ; 
} extern "C" {
 pub fn CloneImageView ( arg1 : * const ImageView , ) -> * mut ImageView ; 
} extern "C" {
 pub fn DestroyImageView ( arg1 : * mut ImageView , ) -> * mut ImageView ; 
} extern "C" {
 pub fn NewImageView ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> * mut ImageView ; 
} extern "C" {
 pub fn NewImageViewRegion ( arg1 : * mut Image , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> * mut ImageView ; 
} extern "C" {
 pub fn DuplexTransferImageViewIterator ( arg1 : * mut ImageView , arg2 : * mut ImageView , arg3 : * mut ImageView , arg4 : DuplexTransferImageViewMethod , arg5 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageViewIterator ( arg1 : * mut ImageView , arg2 : GetImageViewMethod , arg3 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsImageView ( arg1 : * const ImageView , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageViewIterator ( arg1 : * mut ImageView , arg2 : SetImageViewMethod , arg3 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn TransferImageViewIterator ( arg1 : * mut ImageView , arg2 : * mut ImageView , arg3 : TransferImageViewMethod , arg4 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn UpdateImageViewIterator ( arg1 : * mut ImageView , arg2 : UpdateImageViewMethod , arg3 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageViewAuthenticPixels ( arg1 : * const ImageView , ) -> * mut Quantum ; 
} extern "C" {
 pub fn GetImageViewExtent ( arg1 : * const ImageView , ) -> RectangleInfo ; 
} extern "C" {
 pub fn SetImageViewDescription ( arg1 : * mut ImageView , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn SetImageViewThreads ( arg1 : * mut ImageView , arg2 : usize , ) ; 
} extern "C" {
 pub fn GetImageViewAuthenticMetacontent ( arg1 : * const ImageView , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn CloneImageList ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CloneImages ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DestroyImageList ( arg1 : * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn DuplicateImages ( arg1 : * mut Image , arg2 : usize , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn GetFirstImageInList ( arg1 : * const Image , ) -> * mut Image ; 
} extern "C" {
 pub fn GetImageFromList ( arg1 : * const Image , arg2 : isize , ) -> * mut Image ; 
} extern "C" {
 pub fn GetLastImageInList ( arg1 : * const Image , ) -> * mut Image ; 
} extern "C" {
 pub fn GetNextImageInList ( arg1 : * const Image , ) -> * mut Image ; 
} extern "C" {
 pub fn GetPreviousImageInList ( arg1 : * const Image , ) -> * mut Image ; 
} extern "C" {
 pub fn ImageListToArray ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut * mut Image ; 
} extern "C" {
 pub fn NewImageList ( ) -> * mut Image ; 
} extern "C" {
 pub fn RemoveImageFromList ( arg1 : * mut * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn RemoveLastImageFromList ( arg1 : * mut * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn RemoveFirstImageFromList ( arg1 : * mut * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn SpliceImageIntoList ( arg1 : * mut * mut Image , arg2 : usize , arg3 : * const Image , ) -> * mut Image ; 
} extern "C" {
 pub fn SplitImageList ( arg1 : * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn SyncNextImageInList ( arg1 : * const Image , ) -> * mut Image ; 
} extern "C" {
 pub fn GetImageListLength ( arg1 : * const Image , ) -> usize ; 
} extern "C" {
 pub fn GetImageIndexInList ( arg1 : * const Image , ) -> isize ; 
} extern "C" {
 pub fn AppendImageToList ( arg1 : * mut * mut Image , arg2 : * const Image , ) ; 
} extern "C" {
 pub fn DeleteImageFromList ( arg1 : * mut * mut Image , ) ; 
} extern "C" {
 pub fn DeleteImages ( arg1 : * mut * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) ; 
} extern "C" {
 pub fn InsertImageInList ( arg1 : * mut * mut Image , arg2 : * mut Image , ) ; 
} extern "C" {
 pub fn PrependImageToList ( arg1 : * mut * mut Image , arg2 : * mut Image , ) ; 
} extern "C" {
 pub fn ReplaceImageInList ( arg1 : * mut * mut Image , arg2 : * mut Image , ) ; 
} extern "C" {
 pub fn ReplaceImageInListReturnLast ( arg1 : * mut * mut Image , arg2 : * mut Image , ) ; 
} extern "C" {
 pub fn ReverseImageList ( arg1 : * mut * mut Image , ) ; 
} extern "C" {
 pub fn SyncImageList ( arg1 : * mut Image , ) ; 
} pub const LogEventType_UndefinedEvents : LogEventType = 0 ; pub const LogEventType_NoEvents : LogEventType = 0 ; pub const LogEventType_AccelerateEvent : LogEventType = 1 ; pub const LogEventType_AnnotateEvent : LogEventType = 2 ; pub const LogEventType_BlobEvent : LogEventType = 4 ; pub const LogEventType_CacheEvent : LogEventType = 8 ; pub const LogEventType_CoderEvent : LogEventType = 16 ; pub const LogEventType_ConfigureEvent : LogEventType = 32 ; pub const LogEventType_DeprecateEvent : LogEventType = 64 ; pub const LogEventType_DrawEvent : LogEventType = 128 ; pub const LogEventType_ExceptionEvent : LogEventType = 256 ; pub const LogEventType_ImageEvent : LogEventType = 512 ; pub const LogEventType_LocaleEvent : LogEventType = 1024 ; pub const LogEventType_ModuleEvent : LogEventType = 2048 ; pub const LogEventType_PixelEvent : LogEventType = 4096 ; pub const LogEventType_PolicyEvent : LogEventType = 8192 ; pub const LogEventType_ResourceEvent : LogEventType = 16384 ; pub const LogEventType_TraceEvent : LogEventType = 32768 ; pub const LogEventType_TransformEvent : LogEventType = 65536 ; pub const LogEventType_UserEvent : LogEventType = 131072 ; pub const LogEventType_WandEvent : LogEventType = 262144 ; pub const LogEventType_X11Event : LogEventType = 524288 ; pub const LogEventType_CommandEvent : LogEventType = 1048576 ; pub const LogEventType_AllEvents : LogEventType = 2147483647 ; pub type LogEventType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _LogInfo { _unused : [ u8 ; 0 ] } pub type LogInfo = _LogInfo ; pub type MagickLogMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : LogEventType , arg2 : * const libc :: c_char ) > ; extern "C" {
 pub fn GetLogList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetLogName ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn SetLogName ( arg1 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetLogInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const LogInfo ; 
} extern "C" {
 pub fn SetLogEventMask ( arg1 : * const libc :: c_char , ) -> LogEventType ; 
} extern "C" {
 pub fn IsEventLogging ( ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListLogInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LogMagickEvent ( arg1 : LogEventType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : usize , arg5 : * const libc :: c_char , ... ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LogMagickEventList ( arg1 : LogEventType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : usize , arg5 : * const libc :: c_char , arg6 : * mut __va_list_tag , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CloseMagickLog ( ) ; 
} extern "C" {
 pub fn SetLogFormat ( arg1 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn SetLogMethod ( arg1 : MagickLogMethod , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MagicInfo { _unused : [ u8 ; 0 ] } pub type MagicInfo = _MagicInfo ; extern "C" {
 pub fn GetMagicList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetMagicName ( arg1 : * const MagicInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn ListMagicInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagicInfo ( arg1 : * const libc :: c_uchar , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> * const MagicInfo ; 
} extern "C" {
 pub fn GetMagicInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const MagicInfo ; 
} extern "C" {
 pub fn GetMagicPatternExtent ( arg1 : * mut ExceptionInfo , ) -> usize ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MatrixInfo { _unused : [ u8 ; 0 ] } pub type MatrixInfo = _MatrixInfo ; extern "C" {
 pub fn AcquireMagickMatrix ( arg1 : usize , arg2 : usize , ) -> * mut * mut f64 ; 
} extern "C" {
 pub fn RelinquishMagickMatrix ( arg1 : * mut * mut f64 , arg2 : usize , ) -> * mut * mut f64 ; 
} extern "C" {
 pub fn MatrixToImage ( arg1 : * const MatrixInfo , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn GetMatrixElement ( arg1 : * const MatrixInfo , arg2 : isize , arg3 : isize , arg4 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn NullMatrix ( arg1 : * mut MatrixInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetMatrixElement ( arg1 : * const MatrixInfo , arg2 : isize , arg3 : isize , arg4 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AcquireMatrixInfo ( arg1 : usize , arg2 : usize , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * mut MatrixInfo ; 
} extern "C" {
 pub fn DestroyMatrixInfo ( arg1 : * mut MatrixInfo , ) -> * mut MatrixInfo ; 
} extern "C" {
 pub fn GetMatrixColumns ( arg1 : * const MatrixInfo , ) -> usize ; 
} extern "C" {
 pub fn GetMatrixRows ( arg1 : * const MatrixInfo , ) -> usize ; 
} extern "C" {
 pub fn __errno_location ( ) -> * mut libc :: c_int ; 
} extern "C" {
 # [ link_name = "\u{1}program_invocation_name" ] 
 pub static mut  program_invocation_name  :  * mut libc :: c_char ;
} extern "C" {
 # [ link_name = "\u{1}program_invocation_short_name" ] 
 pub static mut  program_invocation_short_name  :  * mut libc :: c_char ;
} pub type error_t = libc :: c_int ; extern "C" {
 pub fn __assert_fail ( __assertion : * const libc :: c_char , __file : * const libc :: c_char , __line : libc :: c_uint , __function : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn __assert_perror_fail ( __errnum : libc :: c_int , __file : * const libc :: c_char , __line : libc :: c_uint , __function : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn __assert ( __assertion : * const libc :: c_char , __file : * const libc :: c_char , __line : libc :: c_int , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MemoryInfo { _unused : [ u8 ; 0 ] } pub type MemoryInfo = _MemoryInfo ; pub type AcquireMemoryHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : usize ) -> * mut libc :: c_void > ; pub type DestroyMemoryHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) > ; pub type ResizeMemoryHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void , arg2 : usize ) -> * mut libc :: c_void > ; pub type AcquireAlignedMemoryHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : usize , arg2 : usize ) -> * mut libc :: c_void > ; pub type RelinquishAlignedMemoryHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) > ; extern "C" {
 pub fn AcquireVirtualMemory ( arg1 : usize , arg2 : usize , ) -> * mut MemoryInfo ; 
} extern "C" {
 pub fn RelinquishVirtualMemory ( arg1 : * mut MemoryInfo , ) -> * mut MemoryInfo ; 
} extern "C" {
 pub fn GetMaxMemoryRequest ( ) -> usize ; 
} extern "C" {
 pub fn AcquireAlignedMemory ( arg1 : usize , arg2 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn AcquireMagickMemory ( arg1 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn AcquireCriticalMemory ( arg1 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn AcquireQuantumMemory ( arg1 : usize , arg2 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn CopyMagickMemory ( arg1 : * mut libc :: c_void , arg2 : * const libc :: c_void , arg3 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn DestroyMagickMemory ( ) ; 
} extern "C" {
 pub fn GetMagickMemoryMethods ( arg1 : * mut AcquireMemoryHandler , arg2 : * mut ResizeMemoryHandler , arg3 : * mut DestroyMemoryHandler , ) ; 
} extern "C" {
 pub fn GetVirtualMemoryBlob ( arg1 : * const MemoryInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RelinquishAlignedMemory ( arg1 : * mut libc :: c_void , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RelinquishMagickMemory ( arg1 : * mut libc :: c_void , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ResetMagickMemory ( arg1 : * mut libc :: c_void , arg2 : libc :: c_int , arg3 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ResizeMagickMemory ( arg1 : * mut libc :: c_void , arg2 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ResizeQuantumMemory ( arg1 : * mut libc :: c_void , arg2 : usize , arg3 : usize , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn SetMagickAlignedMemoryMethods ( arg1 : AcquireAlignedMemoryHandler , arg2 : RelinquishAlignedMemoryHandler , ) ; 
} extern "C" {
 pub fn SetMagickMemoryMethods ( arg1 : AcquireMemoryHandler , arg2 : ResizeMemoryHandler , arg3 : DestroyMemoryHandler , ) ; 
} extern "C" {
 pub fn GetMagickHomeURL ( ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetMagickCopyright ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickDelegates ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickFeatures ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickLicense ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickPackageName ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickQuantumDepth ( arg1 : * mut usize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickQuantumRange ( arg1 : * mut usize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickReleaseDate ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickVersion ( arg1 : * mut usize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn ListMagickVersion ( arg1 : * mut FILE , ) ; 
} pub const MagickModuleType_MagickImageCoderModule : MagickModuleType = 0 ; pub const MagickModuleType_MagickImageFilterModule : MagickModuleType = 1 ; pub type MagickModuleType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ModuleInfo { pub path : * mut libc :: c_char , pub tag : * mut libc :: c_char , pub handle : * mut libc :: c_void , pub unregister_module : :: std :: option :: Option < unsafe extern "C" fn ( ) > , pub register_module : :: std :: option :: Option < unsafe extern "C" fn ( ) -> usize > , pub timestamp : time_t , pub stealth : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__ModuleInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ModuleInfo > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _ModuleInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ModuleInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ModuleInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . path as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( path ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . tag as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . handle as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( handle ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . unregister_module as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( unregister_module ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . register_module as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( register_module ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . timestamp as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( timestamp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . stealth as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( stealth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ModuleInfo ) ) . signature as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _ModuleInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type ModuleInfo = _ModuleInfo ; pub type ImageFilterHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut * mut Image , arg2 : libc :: c_int , arg3 : * mut * const libc :: c_char , arg4 : * mut ExceptionInfo ) -> usize > ; extern "C" {
 pub fn GetModuleList ( arg1 : * const libc :: c_char , arg2 : MagickModuleType , arg3 : * mut usize , arg4 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetModuleInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const ModuleInfo ; 
} extern "C" {
 pub fn InvokeDynamicImageFilter ( arg1 : * const libc :: c_char , arg2 : * mut * mut Image , arg3 : libc :: c_int , arg4 : * mut * const libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListModuleInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetModuleInfo ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut ModuleInfo ; 
} extern "C" {
 pub fn DestroyModuleList ( ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MimeInfo { _unused : [ u8 ; 0 ] } pub type MimeInfo = _MimeInfo ; extern "C" {
 pub fn GetMimeList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickToMime ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetMimeDescription ( arg1 : * const MimeInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMimeType ( arg1 : * const MimeInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn ListMimeInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn LoadMimeLists ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMimeInfo ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_uchar , arg3 : usize , arg4 : * mut ExceptionInfo , ) -> * const MimeInfo ; 
} extern "C" {
 pub fn GetMimeInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const MimeInfo ; 
} pub const MontageMode_UndefinedMode : MontageMode = 0 ; pub const MontageMode_FrameMode : MontageMode = 1 ; pub const MontageMode_UnframeMode : MontageMode = 2 ; pub const MontageMode_ConcatenateMode : MontageMode = 3 ; pub type MontageMode = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _MontageInfo { pub geometry : * mut libc :: c_char , pub tile : * mut libc :: c_char , pub title : * mut libc :: c_char , pub frame : * mut libc :: c_char , pub texture : * mut libc :: c_char , pub font : * mut libc :: c_char , pub pointsize : f64 , pub border_width : usize , pub shadow : MagickBooleanType , pub alpha_color : PixelInfo , pub background_color : PixelInfo , pub border_color : PixelInfo , pub fill : PixelInfo , pub stroke : PixelInfo , pub gravity : GravityType , pub filename : [ libc :: c_char ; 4096usize ] , pub debug : MagickBooleanType , pub signature : usize , pub matte_color : PixelInfo , } # [ test ] fn bindgen_test_layout__MontageInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _MontageInfo > ( ) , 4712usize , concat ! ( "Size of: " , stringify ! ( _MontageInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _MontageInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _MontageInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . geometry as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( geometry ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . tile as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( tile ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . title as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( title ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . frame as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( frame ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . texture as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( texture ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . font as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . pointsize as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( pointsize ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . border_width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . shadow as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( shadow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . alpha_color as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( alpha_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . background_color as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( background_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . border_color as * const _ as usize } , 248usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( border_color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . fill as * const _ as usize } , 336usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( fill ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . stroke as * const _ as usize } , 424usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( stroke ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . gravity as * const _ as usize } , 512usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . filename as * const _ as usize } , 516usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( filename ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . debug as * const _ as usize } , 4612usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( debug ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . signature as * const _ as usize } , 4616usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( signature ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _MontageInfo ) ) . matte_color as * const _ as usize } , 4624usize , concat ! ( "Alignment of field: " , stringify ! ( _MontageInfo ) , "::" , stringify ! ( matte_color ) ) ) ; } pub type MontageInfo = _MontageInfo ; extern "C" {
 pub fn MontageImages ( arg1 : * const Image , arg2 : * const MontageInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MontageImageList ( arg1 : * const ImageInfo , arg2 : * const MontageInfo , arg3 : * const Image , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CloneMontageInfo ( arg1 : * const ImageInfo , arg2 : * const MontageInfo , ) -> * mut MontageInfo ; 
} extern "C" {
 pub fn DestroyMontageInfo ( arg1 : * mut MontageInfo , ) -> * mut MontageInfo ; 
} extern "C" {
 pub fn GetMontageInfo ( arg1 : * const ImageInfo , arg2 : * mut MontageInfo , ) ; 
} pub const MagickCLDeviceType_UndefinedCLDeviceType : MagickCLDeviceType = 0 ; pub const MagickCLDeviceType_CpuCLDeviceType : MagickCLDeviceType = 1 ; pub const MagickCLDeviceType_GpuCLDeviceType : MagickCLDeviceType = 2 ; pub type MagickCLDeviceType = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _KernelProfileRecord { pub kernel_name : * mut libc :: c_char , pub count : libc :: c_ulong , pub max : libc :: c_ulong , pub min : libc :: c_ulong , pub total : libc :: c_ulong , } # [ test ] fn bindgen_test_layout__KernelProfileRecord ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _KernelProfileRecord > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _KernelProfileRecord ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _KernelProfileRecord > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _KernelProfileRecord ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelProfileRecord ) ) . kernel_name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelProfileRecord ) , "::" , stringify ! ( kernel_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelProfileRecord ) ) . count as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelProfileRecord ) , "::" , stringify ! ( count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelProfileRecord ) ) . max as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelProfileRecord ) , "::" , stringify ! ( max ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelProfileRecord ) ) . min as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelProfileRecord ) , "::" , stringify ! ( min ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _KernelProfileRecord ) ) . total as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _KernelProfileRecord ) , "::" , stringify ! ( total ) ) ) ; } pub type KernelProfileRecord = * mut _KernelProfileRecord ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MagickCLDevice { _unused : [ u8 ; 0 ] } pub type MagickCLDevice = * mut _MagickCLDevice ; extern "C" {
 pub fn GetOpenCLDeviceName ( arg1 : MagickCLDevice , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetOpenCLDeviceVendorName ( arg1 : MagickCLDevice , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetOpenCLDeviceVersion ( arg1 : MagickCLDevice , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetOpenCLKernelProfileRecords ( arg1 : MagickCLDevice , arg2 : * mut usize , ) -> * const KernelProfileRecord ; 
} extern "C" {
 pub fn GetOpenCLDeviceBenchmarkScore ( arg1 : MagickCLDevice , ) -> f64 ; 
} extern "C" {
 pub fn GetOpenCLDevices ( arg1 : * mut usize , arg2 : * mut ExceptionInfo , ) -> * mut MagickCLDevice ; 
} extern "C" {
 pub fn GetOpenCLDeviceType ( arg1 : MagickCLDevice , ) -> MagickCLDeviceType ; 
} extern "C" {
 pub fn GetOpenCLDeviceEnabled ( arg1 : MagickCLDevice , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetOpenCLEnabled ( ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetOpenCLEnabled ( arg1 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetOpenCLDeviceEnabled ( arg1 : MagickCLDevice , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn SetOpenCLKernelProfileEnabled ( arg1 : MagickCLDevice , arg2 : MagickBooleanType , ) ; 
} pub const CommandOption_MagickUndefinedOptions : CommandOption = -1 ; pub const CommandOption_MagickAlignOptions : CommandOption = 0 ; pub const CommandOption_MagickAlphaChannelOptions : CommandOption = 1 ; pub const CommandOption_MagickBooleanOptions : CommandOption = 2 ; pub const CommandOption_MagickCacheOptions : CommandOption = 3 ; pub const CommandOption_MagickChannelOptions : CommandOption = 4 ; pub const CommandOption_MagickClassOptions : CommandOption = 5 ; pub const CommandOption_MagickClipPathOptions : CommandOption = 6 ; pub const CommandOption_MagickCoderOptions : CommandOption = 7 ; pub const CommandOption_MagickColorOptions : CommandOption = 8 ; pub const CommandOption_MagickColorspaceOptions : CommandOption = 9 ; pub const CommandOption_MagickCommandOptions : CommandOption = 10 ; pub const CommandOption_MagickComplexOptions : CommandOption = 11 ; pub const CommandOption_MagickComplianceOptions : CommandOption = 12 ; pub const CommandOption_MagickComposeOptions : CommandOption = 13 ; pub const CommandOption_MagickCompressOptions : CommandOption = 14 ; pub const CommandOption_MagickConfigureOptions : CommandOption = 15 ; pub const CommandOption_MagickDataTypeOptions : CommandOption = 16 ; pub const CommandOption_MagickDebugOptions : CommandOption = 17 ; pub const CommandOption_MagickDecorateOptions : CommandOption = 18 ; pub const CommandOption_MagickDelegateOptions : CommandOption = 19 ; pub const CommandOption_MagickDirectionOptions : CommandOption = 20 ; pub const CommandOption_MagickDisposeOptions : CommandOption = 21 ; pub const CommandOption_MagickDistortOptions : CommandOption = 22 ; pub const CommandOption_MagickDitherOptions : CommandOption = 23 ; pub const CommandOption_MagickEndianOptions : CommandOption = 24 ; pub const CommandOption_MagickEvaluateOptions : CommandOption = 25 ; pub const CommandOption_MagickFillRuleOptions : CommandOption = 26 ; pub const CommandOption_MagickFilterOptions : CommandOption = 27 ; pub const CommandOption_MagickFontOptions : CommandOption = 28 ; pub const CommandOption_MagickFontsOptions : CommandOption = 29 ; pub const CommandOption_MagickFormatOptions : CommandOption = 30 ; pub const CommandOption_MagickFunctionOptions : CommandOption = 31 ; pub const CommandOption_MagickGradientOptions : CommandOption = 32 ; pub const CommandOption_MagickGravityOptions : CommandOption = 33 ; pub const CommandOption_MagickIntensityOptions : CommandOption = 34 ; pub const CommandOption_MagickIntentOptions : CommandOption = 35 ; pub const CommandOption_MagickInterlaceOptions : CommandOption = 36 ; pub const CommandOption_MagickInterpolateOptions : CommandOption = 37 ; pub const CommandOption_MagickKernelOptions : CommandOption = 38 ; pub const CommandOption_MagickLayerOptions : CommandOption = 39 ; pub const CommandOption_MagickLineCapOptions : CommandOption = 40 ; pub const CommandOption_MagickLineJoinOptions : CommandOption = 41 ; pub const CommandOption_MagickListOptions : CommandOption = 42 ; pub const CommandOption_MagickLocaleOptions : CommandOption = 43 ; pub const CommandOption_MagickLogEventOptions : CommandOption = 44 ; pub const CommandOption_MagickLogOptions : CommandOption = 45 ; pub const CommandOption_MagickMagicOptions : CommandOption = 46 ; pub const CommandOption_MagickMethodOptions : CommandOption = 47 ; pub const CommandOption_MagickMetricOptions : CommandOption = 48 ; pub const CommandOption_MagickMimeOptions : CommandOption = 49 ; pub const CommandOption_MagickModeOptions : CommandOption = 50 ; pub const CommandOption_MagickModuleOptions : CommandOption = 51 ; pub const CommandOption_MagickMorphologyOptions : CommandOption = 52 ; pub const CommandOption_MagickNoiseOptions : CommandOption = 53 ; pub const CommandOption_MagickOrientationOptions : CommandOption = 54 ; pub const CommandOption_MagickPixelChannelOptions : CommandOption = 55 ; pub const CommandOption_MagickPixelIntensityOptions : CommandOption = 56 ; pub const CommandOption_MagickPixelMaskOptions : CommandOption = 57 ; pub const CommandOption_MagickPixelTraitOptions : CommandOption = 58 ; pub const CommandOption_MagickPolicyOptions : CommandOption = 59 ; pub const CommandOption_MagickPolicyDomainOptions : CommandOption = 60 ; pub const CommandOption_MagickPolicyRightsOptions : CommandOption = 61 ; pub const CommandOption_MagickPreviewOptions : CommandOption = 62 ; pub const CommandOption_MagickPrimitiveOptions : CommandOption = 63 ; pub const CommandOption_MagickQuantumFormatOptions : CommandOption = 64 ; pub const CommandOption_MagickResolutionOptions : CommandOption = 65 ; pub const CommandOption_MagickResourceOptions : CommandOption = 66 ; pub const CommandOption_MagickSparseColorOptions : CommandOption = 67 ; pub const CommandOption_MagickStatisticOptions : CommandOption = 68 ; pub const CommandOption_MagickStorageOptions : CommandOption = 69 ; pub const CommandOption_MagickStretchOptions : CommandOption = 70 ; pub const CommandOption_MagickStyleOptions : CommandOption = 71 ; pub const CommandOption_MagickThresholdOptions : CommandOption = 72 ; pub const CommandOption_MagickTypeOptions : CommandOption = 73 ; pub const CommandOption_MagickValidateOptions : CommandOption = 74 ; pub const CommandOption_MagickVirtualPixelOptions : CommandOption = 75 ; pub const CommandOption_MagickWeightOptions : CommandOption = 76 ; pub const CommandOption_MagickAutoThresholdOptions : CommandOption = 77 ; pub const CommandOption_MagickToolOptions : CommandOption = 78 ; pub const CommandOption_MagickCLIOptions : CommandOption = 79 ; pub type CommandOption = libc :: c_int ; pub const ValidateType_UndefinedValidate : ValidateType = 0 ; pub const ValidateType_NoValidate : ValidateType = 0 ; pub const ValidateType_ColorspaceValidate : ValidateType = 1 ; pub const ValidateType_CompareValidate : ValidateType = 2 ; pub const ValidateType_CompositeValidate : ValidateType = 4 ; pub const ValidateType_ConvertValidate : ValidateType = 8 ; pub const ValidateType_FormatsDiskValidate : ValidateType = 16 ; pub const ValidateType_FormatsMapValidate : ValidateType = 32 ; pub const ValidateType_FormatsMemoryValidate : ValidateType = 64 ; pub const ValidateType_IdentifyValidate : ValidateType = 128 ; pub const ValidateType_ImportExportValidate : ValidateType = 256 ; pub const ValidateType_MontageValidate : ValidateType = 512 ; pub const ValidateType_StreamValidate : ValidateType = 1024 ; pub const ValidateType_AllValidate : ValidateType = 2147483647 ; pub type ValidateType = libc :: c_uint ; pub const CommandOptionFlags_UndefinedOptionFlag : CommandOptionFlags = 0 ; pub const CommandOptionFlags_ImageInfoOptionFlag : CommandOptionFlags = 1 ; pub const CommandOptionFlags_DrawInfoOptionFlag : CommandOptionFlags = 2 ; pub const CommandOptionFlags_QuantizeInfoOptionFlag : CommandOptionFlags = 4 ; pub const CommandOptionFlags_GlobalOptionFlag : CommandOptionFlags = 8 ; pub const CommandOptionFlags_SettingOptionFlags : CommandOptionFlags = 15 ; pub const CommandOptionFlags_NoImageOperatorFlag : CommandOptionFlags = 16 ; pub const CommandOptionFlags_SimpleOperatorFlag : CommandOptionFlags = 32 ; pub const CommandOptionFlags_ListOperatorFlag : CommandOptionFlags = 64 ; pub const CommandOptionFlags_GenesisOptionFlag : CommandOptionFlags = 128 ; pub const CommandOptionFlags_SpecialOptionFlag : CommandOptionFlags = 256 ; pub const CommandOptionFlags_AlwaysInterpretArgsFlag : CommandOptionFlags = 1024 ; pub const CommandOptionFlags_NeverInterpretArgsFlag : CommandOptionFlags = 2048 ; pub const CommandOptionFlags_NonMagickOptionFlag : CommandOptionFlags = 4096 ; pub const CommandOptionFlags_FireOptionFlag : CommandOptionFlags = 8192 ; pub const CommandOptionFlags_DeprecateOptionFlag : CommandOptionFlags = 16384 ; pub const CommandOptionFlags_ReplacedOptionFlag : CommandOptionFlags = 34816 ; pub type CommandOptionFlags = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _OptionInfo { pub mnemonic : * const libc :: c_char , pub type_ : isize , pub flags : isize , pub stealth : MagickBooleanType , } # [ test ] fn bindgen_test_layout__OptionInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _OptionInfo > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _OptionInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _OptionInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _OptionInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _OptionInfo ) ) . mnemonic as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _OptionInfo ) , "::" , stringify ! ( mnemonic ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _OptionInfo ) ) . type_ as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _OptionInfo ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _OptionInfo ) ) . flags as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _OptionInfo ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _OptionInfo ) ) . stealth as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _OptionInfo ) , "::" , stringify ! ( stealth ) ) ) ; } pub type OptionInfo = _OptionInfo ; extern "C" {
 pub fn GetCommandOptions ( arg1 : CommandOption , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetNextImageOption ( arg1 : * const ImageInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn RemoveImageOption ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn CommandOptionToMnemonic ( arg1 : CommandOption , arg2 : isize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetImageOption ( arg1 : * const ImageInfo , arg2 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn CloneImageOptions ( arg1 : * mut ImageInfo , arg2 : * const ImageInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DefineImageOption ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteImageOption ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsCommandOption ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsOptionMember ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListCommandOptions ( arg1 : * mut FILE , arg2 : CommandOption , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageOption ( arg1 : * mut ImageInfo , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetCommandOptionFlags ( arg1 : CommandOption , arg2 : MagickBooleanType , arg3 : * const libc :: c_char , ) -> isize ; 
} extern "C" {
 pub fn ParseChannelOption ( arg1 : * const libc :: c_char , ) -> isize ; 
} extern "C" {
 pub fn ParsePixelChannelOption ( arg1 : * const libc :: c_char , ) -> isize ; 
} extern "C" {
 pub fn ParseCommandOption ( arg1 : CommandOption , arg2 : MagickBooleanType , arg3 : * const libc :: c_char , ) -> isize ; 
} extern "C" {
 pub fn DestroyImageOptions ( arg1 : * mut ImageInfo , ) ; 
} extern "C" {
 pub fn ResetImageOptions ( arg1 : * const ImageInfo , ) ; 
} extern "C" {
 pub fn ResetImageOptionIterator ( arg1 : * const ImageInfo , ) ; 
} extern "C" {
 pub fn GetCommandOptionInfo ( value : * const libc :: c_char , ) -> * const OptionInfo ; 
} extern "C" {
 pub fn OilPaintImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn FloodfillPaintImage ( arg1 : * mut Image , arg2 : * const DrawInfo , arg3 : * const PixelInfo , arg4 : isize , arg5 : isize , arg6 : MagickBooleanType , arg7 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GradientImage ( arg1 : * mut Image , arg2 : GradientType , arg3 : SpreadMethod , arg4 : * const StopInfo , arg5 : usize , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn OpaquePaintImage ( arg1 : * mut Image , arg2 : * const PixelInfo , arg3 : * const PixelInfo , arg4 : MagickBooleanType , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn TransparentPaintImage ( arg1 : * mut Image , arg2 : * const PixelInfo , arg3 : Quantum , arg4 : MagickBooleanType , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn TransparentPaintImageChroma ( arg1 : * mut Image , arg2 : * const PixelInfo , arg3 : * const PixelInfo , arg4 : Quantum , arg5 : MagickBooleanType , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const PolicyDomain_UndefinedPolicyDomain : PolicyDomain = 0 ; pub const PolicyDomain_CoderPolicyDomain : PolicyDomain = 1 ; pub const PolicyDomain_DelegatePolicyDomain : PolicyDomain = 2 ; pub const PolicyDomain_FilterPolicyDomain : PolicyDomain = 3 ; pub const PolicyDomain_PathPolicyDomain : PolicyDomain = 4 ; pub const PolicyDomain_ResourcePolicyDomain : PolicyDomain = 5 ; pub const PolicyDomain_SystemPolicyDomain : PolicyDomain = 6 ; pub const PolicyDomain_CachePolicyDomain : PolicyDomain = 7 ; pub const PolicyDomain_ModulePolicyDomain : PolicyDomain = 8 ; pub type PolicyDomain = libc :: c_uint ; pub const PolicyRights_UndefinedPolicyRights : PolicyRights = 0 ; pub const PolicyRights_NoPolicyRights : PolicyRights = 0 ; pub const PolicyRights_ReadPolicyRights : PolicyRights = 1 ; pub const PolicyRights_WritePolicyRights : PolicyRights = 2 ; pub const PolicyRights_ExecutePolicyRights : PolicyRights = 4 ; pub const PolicyRights_AllPolicyRights : PolicyRights = 255 ; pub type PolicyRights = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PolicyInfo { _unused : [ u8 ; 0 ] } pub type PolicyInfo = _PolicyInfo ; extern "C" {
 pub fn GetPolicyValue ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetPolicyList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn GetPolicyInfoList ( arg1 : * const libc :: c_char , arg2 : * mut usize , arg3 : * mut ExceptionInfo , ) -> * mut * const PolicyInfo ; 
} extern "C" {
 pub fn IsRightsAuthorized ( arg1 : PolicyDomain , arg2 : PolicyRights , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListPolicyInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetMagickSecurityPolicy ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetMagickSecurityPolicyValue ( arg1 : PolicyDomain , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageTotalInkDensity ( image : * mut Image , arg1 : * mut ExceptionInfo , ) -> f64 ; 
} extern "C" {
 pub fn InterpretImageProperties ( arg1 : * mut ImageInfo , arg2 : * mut Image , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn RemoveImageProperty ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetNextImageProperty ( arg1 : * const Image , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetImageProperty ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetMagickProperty ( arg1 : * mut ImageInfo , arg2 : * mut Image , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn CloneImageProperties ( arg1 : * mut Image , arg2 : * const Image , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DefineImageProperty ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteImageProperty ( arg1 : * mut Image , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn FormatImageProperty ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ... ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageProperty ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DestroyImageProperties ( arg1 : * mut Image , ) ; 
} extern "C" {
 pub fn ResetImagePropertyIterator ( arg1 : * const Image , ) ; 
} pub const DitherMethod_UndefinedDitherMethod : DitherMethod = 0 ; pub const DitherMethod_NoDitherMethod : DitherMethod = 1 ; pub const DitherMethod_RiemersmaDitherMethod : DitherMethod = 2 ; pub const DitherMethod_FloydSteinbergDitherMethod : DitherMethod = 3 ; pub type DitherMethod = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _QuantizeInfo { pub number_colors : usize , pub tree_depth : usize , pub colorspace : ColorspaceType , pub dither_method : DitherMethod , pub measure_error : MagickBooleanType , pub signature : usize , } # [ test ] fn bindgen_test_layout__QuantizeInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _QuantizeInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( _QuantizeInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _QuantizeInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _QuantizeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _QuantizeInfo ) ) . number_colors as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _QuantizeInfo ) , "::" , stringify ! ( number_colors ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _QuantizeInfo ) ) . tree_depth as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _QuantizeInfo ) , "::" , stringify ! ( tree_depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _QuantizeInfo ) ) . colorspace as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _QuantizeInfo ) , "::" , stringify ! ( colorspace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _QuantizeInfo ) ) . dither_method as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( _QuantizeInfo ) , "::" , stringify ! ( dither_method ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _QuantizeInfo ) ) . measure_error as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _QuantizeInfo ) , "::" , stringify ! ( measure_error ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _QuantizeInfo ) ) . signature as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _QuantizeInfo ) , "::" , stringify ! ( signature ) ) ) ; } pub type QuantizeInfo = _QuantizeInfo ; extern "C" {
 pub fn CompressImageColormap ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageQuantizeError ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn KmeansImage ( arg1 : * mut Image , arg2 : usize , arg3 : usize , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PosterizeImage ( arg1 : * mut Image , arg2 : usize , arg3 : DitherMethod , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn QuantizeImage ( arg1 : * const QuantizeInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn QuantizeImages ( arg1 : * const QuantizeInfo , arg2 : * mut Image , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RemapImage ( arg1 : * const QuantizeInfo , arg2 : * mut Image , arg3 : * const Image , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RemapImages ( arg1 : * const QuantizeInfo , arg2 : * mut Image , arg3 : * const Image , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AcquireQuantizeInfo ( arg1 : * const ImageInfo , ) -> * mut QuantizeInfo ; 
} extern "C" {
 pub fn CloneQuantizeInfo ( arg1 : * const QuantizeInfo , ) -> * mut QuantizeInfo ; 
} extern "C" {
 pub fn DestroyQuantizeInfo ( arg1 : * mut QuantizeInfo , ) -> * mut QuantizeInfo ; 
} extern "C" {
 pub fn GetQuantizeInfo ( arg1 : * mut QuantizeInfo , ) ; 
} pub const RegistryType_UndefinedRegistryType : RegistryType = 0 ; pub const RegistryType_ImageRegistryType : RegistryType = 1 ; pub const RegistryType_ImageInfoRegistryType : RegistryType = 2 ; pub const RegistryType_StringRegistryType : RegistryType = 3 ; pub type RegistryType = libc :: c_uint ; extern "C" {
 pub fn GetNextImageRegistry ( ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DefineImageRegistry ( arg1 : RegistryType , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteImageRegistry ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetImageRegistry ( arg1 : RegistryType , arg2 : * const libc :: c_char , arg3 : * const libc :: c_void , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageRegistry ( arg1 : RegistryType , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RemoveImageRegistry ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ResetImageRegistryIterator ( ) ; 
} pub const ResourceType_UndefinedResource : ResourceType = 0 ; pub const ResourceType_AreaResource : ResourceType = 1 ; pub const ResourceType_DiskResource : ResourceType = 2 ; pub const ResourceType_FileResource : ResourceType = 3 ; pub const ResourceType_HeightResource : ResourceType = 4 ; pub const ResourceType_MapResource : ResourceType = 5 ; pub const ResourceType_MemoryResource : ResourceType = 6 ; pub const ResourceType_ThreadResource : ResourceType = 7 ; pub const ResourceType_ThrottleResource : ResourceType = 8 ; pub const ResourceType_TimeResource : ResourceType = 9 ; pub const ResourceType_WidthResource : ResourceType = 10 ; pub const ResourceType_ListLengthResource : ResourceType = 11 ; pub type ResourceType = libc :: c_uint ; extern "C" {
 pub fn AcquireUniqueFileResource ( arg1 : * mut libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn AcquireMagickResource ( arg1 : ResourceType , arg2 : MagickSizeType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetPathTemplate ( arg1 : * mut libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListMagickResourceInfo ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RelinquishUniqueFileResource ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetMagickResourceLimit ( arg1 : ResourceType , arg2 : MagickSizeType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetMagickResource ( arg1 : ResourceType , ) -> MagickSizeType ; 
} extern "C" {
 pub fn GetMagickResourceLimit ( arg1 : ResourceType , ) -> MagickSizeType ; 
} extern "C" {
 pub fn RelinquishMagickResource ( arg1 : ResourceType , arg2 : MagickSizeType , ) ; 
} extern "C" {
 pub fn GetImageDynamicThreshold ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut PixelInfo , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SegmentImage ( arg1 : * mut Image , arg2 : ColorspaceType , arg3 : MagickBooleanType , arg4 : f64 , arg5 : f64 , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeskewImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn IntegralRotateImage ( arg1 : * const Image , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ShearImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ShearRotateImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SignatureImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _SplayTreeInfo { _unused : [ u8 ; 0 ] } pub type SplayTreeInfo = _SplayTreeInfo ; extern "C" {
 pub fn AddValueToSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : * const libc :: c_void , arg3 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteNodeByValueFromSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DeleteNodeFromSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetNextKeyInSplayTree ( arg1 : * mut SplayTreeInfo , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn GetNextValueInSplayTree ( arg1 : * mut SplayTreeInfo , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn GetRootValueFromSplayTree ( arg1 : * mut SplayTreeInfo , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn GetValueFromSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : * const libc :: c_void , ) -> * const libc :: c_void ; 
} extern "C" {
 pub fn CompareSplayTreeString ( arg1 : * const libc :: c_void , arg2 : * const libc :: c_void , ) -> libc :: c_int ; 
} extern "C" {
 pub fn CompareSplayTreeStringInfo ( arg1 : * const libc :: c_void , arg2 : * const libc :: c_void , ) -> libc :: c_int ; 
} extern "C" {
 pub fn CloneSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> * mut libc :: c_void > , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> * mut libc :: c_void > , ) -> * mut SplayTreeInfo ; 
} extern "C" {
 pub fn DestroySplayTree ( arg1 : * mut SplayTreeInfo , ) -> * mut SplayTreeInfo ; 
} extern "C" {
 pub fn NewSplayTree ( arg1 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const libc :: c_void , arg2 : * const libc :: c_void ) -> libc :: c_int > , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> * mut libc :: c_void > , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut libc :: c_void ) -> * mut libc :: c_void > , ) -> * mut SplayTreeInfo ; 
} extern "C" {
 pub fn GetNumberOfNodesInSplayTree ( arg1 : * const SplayTreeInfo , ) -> usize ; 
} extern "C" {
 pub fn RemoveNodeByValueFromSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : * const libc :: c_void , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn RemoveNodeFromSplayTree ( arg1 : * mut SplayTreeInfo , arg2 : * const libc :: c_void , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn ResetSplayTree ( arg1 : * mut SplayTreeInfo , ) ; 
} extern "C" {
 pub fn ResetSplayTreeIterator ( arg1 : * mut SplayTreeInfo , ) ; 
} extern "C" {
 pub fn InvokeStaticImageFilter ( arg1 : * const libc :: c_char , arg2 : * mut * mut Image , arg3 : libc :: c_int , arg4 : * mut * const libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RegisterStaticModule ( arg1 : * const libc :: c_char , exception : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn UnregisterStaticModule ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RegisterStaticModules ( ) ; 
} extern "C" {
 pub fn UnregisterStaticModules ( ) ; 
} extern "C" {
 pub fn RegisterAAIImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterARTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterAVIImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterAVSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterBIEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterBGRImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterBMPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterBRAILLEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCALSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCAPTIONImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCINImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCIPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCLIPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCLIPBOARDImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCMYKImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCUBEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterCUTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDCMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDCXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDDSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDEBUGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDIBImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDJVUImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDNGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDPSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterDPXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEMFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPDFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPIImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPS2Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPSFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPSIImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEPTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterEXRImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterFAXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterFITSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterFLIFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterFPXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterG3Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterGIFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterGIF87Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterGRADIENTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterGRANITEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterGRAYImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHALDImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHDRImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHEICImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHISTOGRAMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHRZImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterHTMLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterICBImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterICONImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterINFOImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterINLINEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterIPLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJBGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJBIGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJNXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJPEGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJSONImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJP2Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterJXLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterLABELImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMACImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMAGICKImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMAPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMASKImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMATImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMATTEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMETAImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMIFFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMNGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMONOImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMPCImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMPEGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMPRImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMSLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMTVImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterMVGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterNETSCAPEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterNULLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterP7Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPBMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterOTBImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPALMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPANGOImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPATTERNImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPCDImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPCDSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPCLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPCTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPCXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPDBImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPDFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPESImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPGXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPICImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPICTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPIXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPGMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPLASMAImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPNGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPNMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPPMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPS2Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPS3Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPSDImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPTIFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterPWPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRASImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRAWImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRGBImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRGBAImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRGFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRLAImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterRLEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSCRImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSCREENSHOTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSCTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSFWImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSGIImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSHTMLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSIXELImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSTEGANOImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSUNImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterSVGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTEXTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTGAImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTHUMBNAILImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTIFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTIFFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTILEImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTIMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTIM2Image ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTTFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterTXTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterUILImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterURLImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterUYVYImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterVDAImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterVICARImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterVIDImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterVIFFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterVIPSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterVSTImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterWBMPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterWEBPImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterWMFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterWPGImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXBMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXCImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXCFImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXPMImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXPSImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXTRNImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXVImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterXWDImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterYCBCRImage ( ) -> usize ; 
} extern "C" {
 pub fn RegisterYUVImage ( ) -> usize ; 
} extern "C" {
 pub fn UnregisterAAIImage ( ) ; 
} extern "C" {
 pub fn UnregisterARTImage ( ) ; 
} extern "C" {
 pub fn UnregisterAVIImage ( ) ; 
} extern "C" {
 pub fn UnregisterAVSImage ( ) ; 
} extern "C" {
 pub fn UnregisterBIEImage ( ) ; 
} extern "C" {
 pub fn UnregisterBGRImage ( ) ; 
} extern "C" {
 pub fn UnregisterBMPImage ( ) ; 
} extern "C" {
 pub fn UnregisterBRAILLEImage ( ) ; 
} extern "C" {
 pub fn UnregisterCALSImage ( ) ; 
} extern "C" {
 pub fn UnregisterCAPTIONImage ( ) ; 
} extern "C" {
 pub fn UnregisterCINImage ( ) ; 
} extern "C" {
 pub fn UnregisterCIPImage ( ) ; 
} extern "C" {
 pub fn UnregisterCLIPImage ( ) ; 
} extern "C" {
 pub fn UnregisterCLIPBOARDImage ( ) ; 
} extern "C" {
 pub fn UnregisterCMYKImage ( ) ; 
} extern "C" {
 pub fn UnregisterCUBEImage ( ) ; 
} extern "C" {
 pub fn UnregisterCUTImage ( ) ; 
} extern "C" {
 pub fn UnregisterDCMImage ( ) ; 
} extern "C" {
 pub fn UnregisterDCXImage ( ) ; 
} extern "C" {
 pub fn UnregisterDDSImage ( ) ; 
} extern "C" {
 pub fn UnregisterDEBUGImage ( ) ; 
} extern "C" {
 pub fn UnregisterDIBImage ( ) ; 
} extern "C" {
 pub fn UnregisterDJVUImage ( ) ; 
} extern "C" {
 pub fn UnregisterDNGImage ( ) ; 
} extern "C" {
 pub fn UnregisterDPSImage ( ) ; 
} extern "C" {
 pub fn UnregisterDPXImage ( ) ; 
} extern "C" {
 pub fn UnregisterEMFImage ( ) ; 
} extern "C" {
 pub fn UnregisterEPDFImage ( ) ; 
} extern "C" {
 pub fn UnregisterEPIImage ( ) ; 
} extern "C" {
 pub fn UnregisterEPSImage ( ) ; 
} extern "C" {
 pub fn UnregisterEPS2Image ( ) ; 
} extern "C" {
 pub fn UnregisterEPSFImage ( ) ; 
} extern "C" {
 pub fn UnregisterEPSIImage ( ) ; 
} extern "C" {
 pub fn UnregisterEPTImage ( ) ; 
} extern "C" {
 pub fn UnregisterEXRImage ( ) ; 
} extern "C" {
 pub fn UnregisterFAXImage ( ) ; 
} extern "C" {
 pub fn UnregisterFITSImage ( ) ; 
} extern "C" {
 pub fn UnregisterFLIFImage ( ) ; 
} extern "C" {
 pub fn UnregisterFPXImage ( ) ; 
} extern "C" {
 pub fn UnregisterG3Image ( ) ; 
} extern "C" {
 pub fn UnregisterGIFImage ( ) ; 
} extern "C" {
 pub fn UnregisterGIF87Image ( ) ; 
} extern "C" {
 pub fn UnregisterGRADIENTImage ( ) ; 
} extern "C" {
 pub fn UnregisterGRANITEImage ( ) ; 
} extern "C" {
 pub fn UnregisterGRAYImage ( ) ; 
} extern "C" {
 pub fn UnregisterHALDImage ( ) ; 
} extern "C" {
 pub fn UnregisterHDRImage ( ) ; 
} extern "C" {
 pub fn UnregisterHEICImage ( ) ; 
} extern "C" {
 pub fn UnregisterHImage ( ) ; 
} extern "C" {
 pub fn UnregisterHISTOGRAMImage ( ) ; 
} extern "C" {
 pub fn UnregisterHRZImage ( ) ; 
} extern "C" {
 pub fn UnregisterHTMLImage ( ) ; 
} extern "C" {
 pub fn UnregisterICBImage ( ) ; 
} extern "C" {
 pub fn UnregisterICONImage ( ) ; 
} extern "C" {
 pub fn UnregisterINFOImage ( ) ; 
} extern "C" {
 pub fn UnregisterINLINEImage ( ) ; 
} extern "C" {
 pub fn UnregisterIPLImage ( ) ; 
} extern "C" {
 pub fn UnregisterJBGImage ( ) ; 
} extern "C" {
 pub fn UnregisterJBIGImage ( ) ; 
} extern "C" {
 pub fn UnregisterJNXImage ( ) ; 
} extern "C" {
 pub fn UnregisterJPEGImage ( ) ; 
} extern "C" {
 pub fn UnregisterJP2Image ( ) ; 
} extern "C" {
 pub fn UnregisterJSONImage ( ) ; 
} extern "C" {
 pub fn UnregisterJXLImage ( ) ; 
} extern "C" {
 pub fn UnregisterLABELImage ( ) ; 
} extern "C" {
 pub fn UnregisterLOCALEImage ( ) ; 
} extern "C" {
 pub fn UnregisterMACImage ( ) ; 
} extern "C" {
 pub fn UnregisterMAGICKImage ( ) ; 
} extern "C" {
 pub fn UnregisterMAPImage ( ) ; 
} extern "C" {
 pub fn UnregisterMASKImage ( ) ; 
} extern "C" {
 pub fn UnregisterMATImage ( ) ; 
} extern "C" {
 pub fn UnregisterMATTEImage ( ) ; 
} extern "C" {
 pub fn UnregisterMETAImage ( ) ; 
} extern "C" {
 pub fn UnregisterMIFFImage ( ) ; 
} extern "C" {
 pub fn UnregisterMNGImage ( ) ; 
} extern "C" {
 pub fn UnregisterMONOImage ( ) ; 
} extern "C" {
 pub fn UnregisterMPCImage ( ) ; 
} extern "C" {
 pub fn UnregisterMPEGImage ( ) ; 
} extern "C" {
 pub fn UnregisterMPRImage ( ) ; 
} extern "C" {
 pub fn UnregisterMSLImage ( ) ; 
} extern "C" {
 pub fn UnregisterMTVImage ( ) ; 
} extern "C" {
 pub fn UnregisterMVGImage ( ) ; 
} extern "C" {
 pub fn UnregisterNETSCAPEImage ( ) ; 
} extern "C" {
 pub fn UnregisterNULLImage ( ) ; 
} extern "C" {
 pub fn UnregisterP7Image ( ) ; 
} extern "C" {
 pub fn UnregisterPBMImage ( ) ; 
} extern "C" {
 pub fn UnregisterOTBImage ( ) ; 
} extern "C" {
 pub fn UnregisterPALMImage ( ) ; 
} extern "C" {
 pub fn UnregisterPANGOImage ( ) ; 
} extern "C" {
 pub fn UnregisterPATTERNImage ( ) ; 
} extern "C" {
 pub fn UnregisterPCDImage ( ) ; 
} extern "C" {
 pub fn UnregisterPCDSImage ( ) ; 
} extern "C" {
 pub fn UnregisterPCLImage ( ) ; 
} extern "C" {
 pub fn UnregisterPCTImage ( ) ; 
} extern "C" {
 pub fn UnregisterPCXImage ( ) ; 
} extern "C" {
 pub fn UnregisterPDBImage ( ) ; 
} extern "C" {
 pub fn UnregisterPDFImage ( ) ; 
} extern "C" {
 pub fn UnregisterPESImage ( ) ; 
} extern "C" {
 pub fn UnregisterPGXImage ( ) ; 
} extern "C" {
 pub fn UnregisterPICImage ( ) ; 
} extern "C" {
 pub fn UnregisterPICTImage ( ) ; 
} extern "C" {
 pub fn UnregisterPIXImage ( ) ; 
} extern "C" {
 pub fn UnregisterPLASMAImage ( ) ; 
} extern "C" {
 pub fn UnregisterPGMImage ( ) ; 
} extern "C" {
 pub fn UnregisterPMImage ( ) ; 
} extern "C" {
 pub fn UnregisterPNGImage ( ) ; 
} extern "C" {
 pub fn UnregisterPNMImage ( ) ; 
} extern "C" {
 pub fn UnregisterPPMImage ( ) ; 
} extern "C" {
 pub fn UnregisterPSImage ( ) ; 
} extern "C" {
 pub fn UnregisterPS2Image ( ) ; 
} extern "C" {
 pub fn UnregisterPS3Image ( ) ; 
} extern "C" {
 pub fn UnregisterPSDImage ( ) ; 
} extern "C" {
 pub fn UnregisterPTIFImage ( ) ; 
} extern "C" {
 pub fn UnregisterPWPImage ( ) ; 
} extern "C" {
 pub fn UnregisterRASImage ( ) ; 
} extern "C" {
 pub fn UnregisterRAWImage ( ) ; 
} extern "C" {
 pub fn UnregisterRGBImage ( ) ; 
} extern "C" {
 pub fn UnregisterRGBAImage ( ) ; 
} extern "C" {
 pub fn UnregisterRGFImage ( ) ; 
} extern "C" {
 pub fn UnregisterRLAImage ( ) ; 
} extern "C" {
 pub fn UnregisterRLEImage ( ) ; 
} extern "C" {
 pub fn UnregisterSCRImage ( ) ; 
} extern "C" {
 pub fn UnregisterSCREENSHOTImage ( ) ; 
} extern "C" {
 pub fn UnregisterSCTImage ( ) ; 
} extern "C" {
 pub fn UnregisterSFWImage ( ) ; 
} extern "C" {
 pub fn UnregisterSGIImage ( ) ; 
} extern "C" {
 pub fn UnregisterSHTMLImage ( ) ; 
} extern "C" {
 pub fn UnregisterSIXELImage ( ) ; 
} extern "C" {
 pub fn UnregisterSTEGANOImage ( ) ; 
} extern "C" {
 pub fn UnregisterSUNImage ( ) ; 
} extern "C" {
 pub fn UnregisterSVGImage ( ) ; 
} extern "C" {
 pub fn UnregisterTEXTImage ( ) ; 
} extern "C" {
 pub fn UnregisterTGAImage ( ) ; 
} extern "C" {
 pub fn UnregisterTHUMBNAILImage ( ) ; 
} extern "C" {
 pub fn UnregisterTIFImage ( ) ; 
} extern "C" {
 pub fn UnregisterTIFFImage ( ) ; 
} extern "C" {
 pub fn UnregisterTILEImage ( ) ; 
} extern "C" {
 pub fn UnregisterTIMImage ( ) ; 
} extern "C" {
 pub fn UnregisterTIM2Image ( ) ; 
} extern "C" {
 pub fn UnregisterTTFImage ( ) ; 
} extern "C" {
 pub fn UnregisterTXTImage ( ) ; 
} extern "C" {
 pub fn UnregisterUILImage ( ) ; 
} extern "C" {
 pub fn UnregisterURLImage ( ) ; 
} extern "C" {
 pub fn UnregisterUYVYImage ( ) ; 
} extern "C" {
 pub fn UnregisterVDAImage ( ) ; 
} extern "C" {
 pub fn UnregisterVICARImage ( ) ; 
} extern "C" {
 pub fn UnregisterVIDImage ( ) ; 
} extern "C" {
 pub fn UnregisterVIFFImage ( ) ; 
} extern "C" {
 pub fn UnregisterVIPSImage ( ) ; 
} extern "C" {
 pub fn UnregisterVSTImage ( ) ; 
} extern "C" {
 pub fn UnregisterWBMPImage ( ) ; 
} extern "C" {
 pub fn UnregisterWEBPImage ( ) ; 
} extern "C" {
 pub fn UnregisterWMFImage ( ) ; 
} extern "C" {
 pub fn UnregisterWPGImage ( ) ; 
} extern "C" {
 pub fn UnregisterXImage ( ) ; 
} extern "C" {
 pub fn UnregisterXBMImage ( ) ; 
} extern "C" {
 pub fn UnregisterXCImage ( ) ; 
} extern "C" {
 pub fn UnregisterXCFImage ( ) ; 
} extern "C" {
 pub fn UnregisterXPMImage ( ) ; 
} extern "C" {
 pub fn UnregisterXPSImage ( ) ; 
} extern "C" {
 pub fn UnregisterXTRNImage ( ) ; 
} extern "C" {
 pub fn UnregisterXVImage ( ) ; 
} extern "C" {
 pub fn UnregisterXWDImage ( ) ; 
} extern "C" {
 pub fn UnregisterYCBCRImage ( ) ; 
} extern "C" {
 pub fn UnregisterYUVImage ( ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ChannelStatistics { pub depth : usize , pub area : f64 , pub minima : f64 , pub maxima : f64 , pub sum : f64 , pub sum_squared : f64 , pub sum_cubed : f64 , pub sum_fourth_power : f64 , pub mean : f64 , pub variance : f64 , pub standard_deviation : f64 , pub kurtosis : f64 , pub skewness : f64 , pub entropy : f64 , } # [ test ] fn bindgen_test_layout__ChannelStatistics ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ChannelStatistics > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( _ChannelStatistics ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ChannelStatistics > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ChannelStatistics ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . depth as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . area as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( area ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . minima as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( minima ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . maxima as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( maxima ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . sum as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( sum ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . sum_squared as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( sum_squared ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . sum_cubed as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( sum_cubed ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . sum_fourth_power as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( sum_fourth_power ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . mean as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( mean ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . variance as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( variance ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . standard_deviation as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( standard_deviation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . kurtosis as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( kurtosis ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . skewness as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( skewness ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelStatistics ) ) . entropy as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelStatistics ) , "::" , stringify ! ( entropy ) ) ) ; } pub type ChannelStatistics = _ChannelStatistics ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ChannelMoments { pub invariant : [ f64 ; 9usize ] , pub centroid : PointInfo , pub ellipse_axis : PointInfo , pub ellipse_angle : f64 , pub ellipse_eccentricity : f64 , pub ellipse_intensity : f64 , } # [ test ] fn bindgen_test_layout__ChannelMoments ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ChannelMoments > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( _ChannelMoments ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ChannelMoments > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ChannelMoments ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelMoments ) ) . invariant as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelMoments ) , "::" , stringify ! ( invariant ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelMoments ) ) . centroid as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelMoments ) , "::" , stringify ! ( centroid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelMoments ) ) . ellipse_axis as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelMoments ) , "::" , stringify ! ( ellipse_axis ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelMoments ) ) . ellipse_angle as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelMoments ) , "::" , stringify ! ( ellipse_angle ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelMoments ) ) . ellipse_eccentricity as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelMoments ) , "::" , stringify ! ( ellipse_eccentricity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelMoments ) ) . ellipse_intensity as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelMoments ) , "::" , stringify ! ( ellipse_intensity ) ) ) ; } pub type ChannelMoments = _ChannelMoments ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ChannelPerceptualHash { pub srgb_hu_phash : [ f64 ; 9usize ] , pub hclp_hu_phash : [ f64 ; 9usize ] , pub number_colorspaces : usize , pub colorspace : [ ColorspaceType ; 7usize ] , pub phash : [ [ f64 ; 9usize ] ; 7usize ] , pub number_channels : usize , } # [ test ] fn bindgen_test_layout__ChannelPerceptualHash ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _ChannelPerceptualHash > ( ) , 696usize , concat ! ( "Size of: " , stringify ! ( _ChannelPerceptualHash ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _ChannelPerceptualHash > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _ChannelPerceptualHash ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelPerceptualHash ) ) . srgb_hu_phash as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelPerceptualHash ) , "::" , stringify ! ( srgb_hu_phash ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelPerceptualHash ) ) . hclp_hu_phash as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelPerceptualHash ) , "::" , stringify ! ( hclp_hu_phash ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelPerceptualHash ) ) . number_colorspaces as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelPerceptualHash ) , "::" , stringify ! ( number_colorspaces ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelPerceptualHash ) ) . colorspace as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelPerceptualHash ) , "::" , stringify ! ( colorspace ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelPerceptualHash ) ) . phash as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelPerceptualHash ) , "::" , stringify ! ( phash ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _ChannelPerceptualHash ) ) . number_channels as * const _ as usize } , 688usize , concat ! ( "Alignment of field: " , stringify ! ( _ChannelPerceptualHash ) , "::" , stringify ! ( number_channels ) ) ) ; } pub type ChannelPerceptualHash = _ChannelPerceptualHash ; pub const MagickEvaluateOperator_UndefinedEvaluateOperator : MagickEvaluateOperator = 0 ; pub const MagickEvaluateOperator_AbsEvaluateOperator : MagickEvaluateOperator = 1 ; pub const MagickEvaluateOperator_AddEvaluateOperator : MagickEvaluateOperator = 2 ; pub const MagickEvaluateOperator_AddModulusEvaluateOperator : MagickEvaluateOperator = 3 ; pub const MagickEvaluateOperator_AndEvaluateOperator : MagickEvaluateOperator = 4 ; pub const MagickEvaluateOperator_CosineEvaluateOperator : MagickEvaluateOperator = 5 ; pub const MagickEvaluateOperator_DivideEvaluateOperator : MagickEvaluateOperator = 6 ; pub const MagickEvaluateOperator_ExponentialEvaluateOperator : MagickEvaluateOperator = 7 ; pub const MagickEvaluateOperator_GaussianNoiseEvaluateOperator : MagickEvaluateOperator = 8 ; pub const MagickEvaluateOperator_ImpulseNoiseEvaluateOperator : MagickEvaluateOperator = 9 ; pub const MagickEvaluateOperator_LaplacianNoiseEvaluateOperator : MagickEvaluateOperator = 10 ; pub const MagickEvaluateOperator_LeftShiftEvaluateOperator : MagickEvaluateOperator = 11 ; pub const MagickEvaluateOperator_LogEvaluateOperator : MagickEvaluateOperator = 12 ; pub const MagickEvaluateOperator_MaxEvaluateOperator : MagickEvaluateOperator = 13 ; pub const MagickEvaluateOperator_MeanEvaluateOperator : MagickEvaluateOperator = 14 ; pub const MagickEvaluateOperator_MedianEvaluateOperator : MagickEvaluateOperator = 15 ; pub const MagickEvaluateOperator_MinEvaluateOperator : MagickEvaluateOperator = 16 ; pub const MagickEvaluateOperator_MultiplicativeNoiseEvaluateOperator : MagickEvaluateOperator = 17 ; pub const MagickEvaluateOperator_MultiplyEvaluateOperator : MagickEvaluateOperator = 18 ; pub const MagickEvaluateOperator_OrEvaluateOperator : MagickEvaluateOperator = 19 ; pub const MagickEvaluateOperator_PoissonNoiseEvaluateOperator : MagickEvaluateOperator = 20 ; pub const MagickEvaluateOperator_PowEvaluateOperator : MagickEvaluateOperator = 21 ; pub const MagickEvaluateOperator_RightShiftEvaluateOperator : MagickEvaluateOperator = 22 ; pub const MagickEvaluateOperator_RootMeanSquareEvaluateOperator : MagickEvaluateOperator = 23 ; pub const MagickEvaluateOperator_SetEvaluateOperator : MagickEvaluateOperator = 24 ; pub const MagickEvaluateOperator_SineEvaluateOperator : MagickEvaluateOperator = 25 ; pub const MagickEvaluateOperator_SubtractEvaluateOperator : MagickEvaluateOperator = 26 ; pub const MagickEvaluateOperator_SumEvaluateOperator : MagickEvaluateOperator = 27 ; pub const MagickEvaluateOperator_ThresholdBlackEvaluateOperator : MagickEvaluateOperator = 28 ; pub const MagickEvaluateOperator_ThresholdEvaluateOperator : MagickEvaluateOperator = 29 ; pub const MagickEvaluateOperator_ThresholdWhiteEvaluateOperator : MagickEvaluateOperator = 30 ; pub const MagickEvaluateOperator_UniformNoiseEvaluateOperator : MagickEvaluateOperator = 31 ; pub const MagickEvaluateOperator_XorEvaluateOperator : MagickEvaluateOperator = 32 ; pub type MagickEvaluateOperator = libc :: c_uint ; pub const MagickFunction_UndefinedFunction : MagickFunction = 0 ; pub const MagickFunction_ArcsinFunction : MagickFunction = 1 ; pub const MagickFunction_ArctanFunction : MagickFunction = 2 ; pub const MagickFunction_PolynomialFunction : MagickFunction = 3 ; pub const MagickFunction_SinusoidFunction : MagickFunction = 4 ; pub type MagickFunction = libc :: c_uint ; pub const StatisticType_UndefinedStatistic : StatisticType = 0 ; pub const StatisticType_GradientStatistic : StatisticType = 1 ; pub const StatisticType_MaximumStatistic : StatisticType = 2 ; pub const StatisticType_MeanStatistic : StatisticType = 3 ; pub const StatisticType_MedianStatistic : StatisticType = 4 ; pub const StatisticType_MinimumStatistic : StatisticType = 5 ; pub const StatisticType_ModeStatistic : StatisticType = 6 ; pub const StatisticType_NonpeakStatistic : StatisticType = 7 ; pub const StatisticType_RootMeanSquareStatistic : StatisticType = 8 ; pub const StatisticType_StandardDeviationStatistic : StatisticType = 9 ; pub type StatisticType = libc :: c_uint ; extern "C" {
 pub fn GetImageStatistics ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut ChannelStatistics ; 
} extern "C" {
 pub fn GetImageMoments ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut ChannelMoments ; 
} extern "C" {
 pub fn GetImagePerceptualHash ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut ChannelPerceptualHash ; 
} extern "C" {
 pub fn EvaluateImages ( arg1 : * const Image , arg2 : MagickEvaluateOperator , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PolynomialImage ( arg1 : * const Image , arg2 : usize , arg3 : * const f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn StatisticImage ( arg1 : * const Image , arg2 : StatisticType , arg3 : usize , arg4 : usize , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn EvaluateImage ( arg1 : * mut Image , arg2 : MagickEvaluateOperator , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn FunctionImage ( arg1 : * mut Image , arg2 : MagickFunction , arg3 : usize , arg4 : * const f64 , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageEntropy ( arg1 : * const Image , arg2 : * mut f64 , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageExtrema ( arg1 : * const Image , arg2 : * mut usize , arg3 : * mut usize , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageMean ( arg1 : * const Image , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageKurtosis ( arg1 : * const Image , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetImageRange ( arg1 : * const Image , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _TokenInfo { _unused : [ u8 ; 0 ] } pub type TokenInfo = _TokenInfo ; extern "C" {
 pub fn Tokenizer ( arg1 : * mut TokenInfo , arg2 : libc :: c_uint , arg3 : * mut libc :: c_char , arg4 : usize , arg5 : * const libc :: c_char , arg6 : * const libc :: c_char , arg7 : * const libc :: c_char , arg8 : * const libc :: c_char , arg9 : libc :: c_char , arg10 : * mut libc :: c_char , arg11 : * mut libc :: c_int , arg12 : * mut libc :: c_char , ) -> libc :: c_int ; 
} extern "C" {
 pub fn GlobExpression ( arg1 : * const libc :: c_char , arg2 : * const libc :: c_char , arg3 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetNextToken ( arg1 : * const libc :: c_char , arg2 : * mut * const libc :: c_char , arg3 : usize , arg4 : * mut libc :: c_char , ) -> usize ; 
} extern "C" {
 pub fn AcquireTokenInfo ( ) -> * mut TokenInfo ; 
} extern "C" {
 pub fn DestroyTokenInfo ( arg1 : * mut TokenInfo , ) -> * mut TokenInfo ; 
} extern "C" {
 pub fn AutoOrientImage ( arg1 : * const Image , arg2 : OrientationType , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ChopImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ConsolidateCMYKImages ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CropImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CropImageToTiles ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ExcerptImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ExtentImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn FlipImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn FlopImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn RollImage ( arg1 : * const Image , arg2 : isize , arg3 : isize , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ShaveImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SpliceImage ( arg1 : * const Image , arg2 : * const RectangleInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn TransposeImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn TransverseImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn TrimImage ( arg1 : * const Image , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} pub const AutoThresholdMethod_UndefinedThresholdMethod : AutoThresholdMethod = 0 ; pub const AutoThresholdMethod_KapurThresholdMethod : AutoThresholdMethod = 1 ; pub const AutoThresholdMethod_OTSUThresholdMethod : AutoThresholdMethod = 2 ; pub const AutoThresholdMethod_TriangleThresholdMethod : AutoThresholdMethod = 3 ; pub type AutoThresholdMethod = libc :: c_uint ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _ThresholdMap { _unused : [ u8 ; 0 ] } pub type ThresholdMap = _ThresholdMap ; extern "C" {
 pub fn AdaptiveThresholdImage ( arg1 : * const Image , arg2 : usize , arg3 : usize , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn DestroyThresholdMap ( arg1 : * mut ThresholdMap , ) -> * mut ThresholdMap ; 
} extern "C" {
 pub fn GetThresholdMap ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut ThresholdMap ; 
} extern "C" {
 pub fn AutoThresholdImage ( arg1 : * mut Image , arg2 : AutoThresholdMethod , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn BilevelImage ( arg1 : * mut Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn BlackThresholdImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ClampImage ( arg1 : * mut Image , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ListThresholdMaps ( arg1 : * mut FILE , arg2 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn OrderedDitherImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PerceptibleImage ( arg1 : * mut Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RandomThresholdImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn RangeThresholdImage ( arg1 : * mut Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn WhiteThresholdImage ( arg1 : * mut Image , arg2 : * const libc :: c_char , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} pub const PathType_UndefinedPath : PathType = 0 ; pub const PathType_MagickPath : PathType = 1 ; pub const PathType_RootPath : PathType = 2 ; pub const PathType_HeadPath : PathType = 3 ; pub const PathType_TailPath : PathType = 4 ; pub const PathType_BasePath : PathType = 5 ; pub const PathType_ExtensionPath : PathType = 6 ; pub const PathType_SubimagePath : PathType = 7 ; pub const PathType_CanonicalPath : PathType = 8 ; pub const PathType_SubcanonicalPath : PathType = 9 ; pub type PathType = libc :: c_uint ; extern "C" {
 pub fn Base64Encode ( arg1 : * const libc :: c_uchar , arg2 : usize , arg3 : * mut usize , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn AcquireUniqueFilename ( arg1 : * mut libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn AcquireUniqueSymbolicLink ( arg1 : * const libc :: c_char , arg2 : * mut libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ExpandFilenames ( arg1 : * mut libc :: c_int , arg2 : * mut * mut * mut libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetPathAttributes ( arg1 : * const libc :: c_char , arg2 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsPathAccessible ( arg1 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MultilineCensus ( arg1 : * const libc :: c_char , ) -> usize ; 
} extern "C" {
 pub fn Base64Decode ( arg1 : * const libc :: c_char , arg2 : * mut usize , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn AppendImageFormat ( arg1 : * const libc :: c_char , arg2 : * mut libc :: c_char , ) ; 
} extern "C" {
 pub fn GetPathComponent ( arg1 : * const libc :: c_char , arg2 : PathType , arg3 : * mut libc :: c_char , ) ; 
} extern "C" {
 pub fn MagickDelay ( arg1 : MagickSizeType , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _CCObjectInfo { pub id : isize , pub bounding_box : RectangleInfo , pub color : PixelInfo , pub centroid : PointInfo , pub area : f64 , pub census : f64 , pub merge : MagickBooleanType , pub metric : [ f64 ; 16usize ] , } # [ test ] fn bindgen_test_layout__CCObjectInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _CCObjectInfo > ( ) , 296usize , concat ! ( "Size of: " , stringify ! ( _CCObjectInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _CCObjectInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _CCObjectInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . id as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( id ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . bounding_box as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( bounding_box ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . color as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( color ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . centroid as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( centroid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . area as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( area ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . census as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( census ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . merge as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( merge ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _CCObjectInfo ) ) . metric as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( _CCObjectInfo ) , "::" , stringify ! ( metric ) ) ) ; } pub type CCObjectInfo = _CCObjectInfo ; extern "C" {
 pub fn ConnectedComponentsImage ( arg1 : * const Image , arg2 : usize , arg3 : * mut * mut CCObjectInfo , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} pub const NoiseType_UndefinedNoise : NoiseType = 0 ; pub const NoiseType_UniformNoise : NoiseType = 1 ; pub const NoiseType_GaussianNoise : NoiseType = 2 ; pub const NoiseType_MultiplicativeGaussianNoise : NoiseType = 3 ; pub const NoiseType_ImpulseNoise : NoiseType = 4 ; pub const NoiseType_LaplacianNoise : NoiseType = 5 ; pub const NoiseType_PoissonNoise : NoiseType = 6 ; pub const NoiseType_RandomNoise : NoiseType = 7 ; pub type NoiseType = libc :: c_uint ; extern "C" {
 pub fn AddNoiseImage ( arg1 : * const Image , arg2 : NoiseType , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn BlueShiftImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn CharcoalImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ColorizeImage ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * const PixelInfo , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ColorMatrixImage ( arg1 : * const Image , kernel : * const KernelInfo , arg2 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ImplodeImage ( arg1 : * const Image , arg2 : f64 , arg3 : PixelInterpolateMethod , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn MorphImages ( arg1 : * const Image , arg2 : usize , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PolaroidImage ( arg1 : * const Image , arg2 : * const DrawInfo , arg3 : * const libc :: c_char , arg4 : f64 , arg5 : PixelInterpolateMethod , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SepiaToneImage ( arg1 : * const Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn ShadowImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : isize , arg5 : isize , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SketchImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SteganoImage ( arg1 : * const Image , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn StereoImage ( arg1 : * const Image , arg2 : * const Image , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn StereoAnaglyphImage ( arg1 : * const Image , arg2 : * const Image , arg3 : isize , arg4 : isize , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn SwirlImage ( arg1 : * const Image , arg2 : f64 , arg3 : PixelInterpolateMethod , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn TintImage ( arg1 : * const Image , arg2 : * const libc :: c_char , arg3 : * const PixelInfo , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn VignetteImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : isize , arg5 : isize , arg6 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn WaveImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : PixelInterpolateMethod , arg5 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn WaveletDenoiseImage ( arg1 : * const Image , arg2 : f64 , arg3 : f64 , arg4 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn PlasmaImage ( arg1 : * mut Image , arg2 : * const SegmentInfo , arg3 : usize , arg4 : usize , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SolarizeImage ( arg1 : * mut Image , arg2 : f64 , arg3 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XMLTreeInfo { _unused : [ u8 ; 0 ] } pub type XMLTreeInfo = _XMLTreeInfo ; extern "C" {
 pub fn XMLTreeInfoToXML ( arg1 : * mut XMLTreeInfo , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn GetXMLTreeAttribute ( arg1 : * mut XMLTreeInfo , arg2 : * const libc :: c_char , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetXMLTreeContent ( arg1 : * mut XMLTreeInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn GetXMLTreeTag ( arg1 : * mut XMLTreeInfo , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn AddChildToXMLTree ( arg1 : * mut XMLTreeInfo , arg2 : * const libc :: c_char , arg3 : usize , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn DestroyXMLTree ( arg1 : * mut XMLTreeInfo , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn GetNextXMLTreeTag ( arg1 : * mut XMLTreeInfo , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn GetXMLTreeChild ( arg1 : * mut XMLTreeInfo , arg2 : * const libc :: c_char , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn GetXMLTreeSibling ( arg1 : * mut XMLTreeInfo , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn NewXMLTree ( arg1 : * const libc :: c_char , arg2 : * mut ExceptionInfo , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn NewXMLTreeTag ( arg1 : * const libc :: c_char , ) -> * mut XMLTreeInfo ; 
} extern "C" {
 pub fn SetXMLTreeContent ( arg1 : * mut XMLTreeInfo , arg2 : * const libc :: c_char , ) -> * mut XMLTreeInfo ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XImportInfo { pub frame : MagickBooleanType , pub borders : MagickBooleanType , pub screen : MagickBooleanType , pub descend : MagickBooleanType , pub silent : MagickBooleanType , } # [ test ] fn bindgen_test_layout__XImportInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XImportInfo > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( _XImportInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XImportInfo > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _XImportInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImportInfo ) ) . frame as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XImportInfo ) , "::" , stringify ! ( frame ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImportInfo ) ) . borders as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XImportInfo ) , "::" , stringify ! ( borders ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImportInfo ) ) . screen as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XImportInfo ) , "::" , stringify ! ( screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImportInfo ) ) . descend as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _XImportInfo ) , "::" , stringify ! ( descend ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImportInfo ) ) . silent as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XImportInfo ) , "::" , stringify ! ( silent ) ) ) ; } pub type XImportInfo = _XImportInfo ; extern "C" {
 pub fn XImportImage ( arg1 : * const ImageInfo , arg2 : * mut XImportInfo , arg3 : * mut ExceptionInfo , ) -> * mut Image ; 
} extern "C" {
 pub fn XGetImportInfo ( arg1 : * mut XImportInfo , ) ; 
} extern "C" {
 pub fn AnimateImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CompareImagesCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CompositeImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ConjureImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ConvertImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PixelWand { _unused : [ u8 ; 0 ] } pub type PixelWand = _PixelWand ; extern "C" {
 pub fn PixelGetColorAsNormalizedString ( arg1 : * const PixelWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn PixelGetColorAsString ( arg1 : * const PixelWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn PixelGetException ( arg1 : * const PixelWand , arg2 : * mut ExceptionType , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn PixelGetAlpha ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetBlack ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetBlue ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetCyan ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetFuzz ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetGreen ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetMagenta ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetRed ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetYellow ( arg1 : * const PixelWand , ) -> f64 ; 
} extern "C" {
 pub fn PixelGetExceptionType ( arg1 : * const PixelWand , ) -> ExceptionType ; 
} extern "C" {
 pub fn IsPixelWand ( arg1 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsPixelWandSimilar ( arg1 : * mut PixelWand , arg2 : * mut PixelWand , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PixelClearException ( arg1 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PixelSetColor ( arg1 : * mut PixelWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PixelGetPixel ( arg1 : * const PixelWand , ) -> PixelInfo ; 
} extern "C" {
 pub fn ClonePixelWand ( arg1 : * const PixelWand , ) -> * mut PixelWand ; 
} extern "C" {
 pub fn ClonePixelWands ( arg1 : * mut * const PixelWand , arg2 : usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn DestroyPixelWand ( arg1 : * mut PixelWand , ) -> * mut PixelWand ; 
} extern "C" {
 pub fn DestroyPixelWands ( arg1 : * mut * mut PixelWand , arg2 : usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn NewPixelWand ( ) -> * mut PixelWand ; 
} extern "C" {
 pub fn NewPixelWands ( arg1 : usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn PixelGetAlphaQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetBlackQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetBlueQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetCyanQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetGreenQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetIndex ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetMagentaQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetRedQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetYellowQuantum ( arg1 : * const PixelWand , ) -> Quantum ; 
} extern "C" {
 pub fn PixelGetColorCount ( arg1 : * const PixelWand , ) -> usize ; 
} extern "C" {
 pub fn ClearPixelWand ( arg1 : * mut PixelWand , ) ; 
} extern "C" {
 pub fn PixelGetHSL ( arg1 : * const PixelWand , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut f64 , ) ; 
} extern "C" {
 pub fn PixelGetMagickColor ( arg1 : * const PixelWand , arg2 : * mut PixelInfo , ) ; 
} extern "C" {
 pub fn PixelGetQuantumPacket ( arg1 : * const PixelWand , arg2 : * mut PixelInfo , ) ; 
} extern "C" {
 pub fn PixelGetQuantumPixel ( arg1 : * const Image , arg2 : * const PixelWand , arg3 : * mut Quantum , ) ; 
} extern "C" {
 pub fn PixelSetAlpha ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetAlphaQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetBlack ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetBlackQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetBlue ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetBlueQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetColorFromWand ( arg1 : * mut PixelWand , arg2 : * const PixelWand , ) ; 
} extern "C" {
 pub fn PixelSetColorCount ( arg1 : * mut PixelWand , arg2 : usize , ) ; 
} extern "C" {
 pub fn PixelSetCyan ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetCyanQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetFuzz ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetGreen ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetGreenQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetHSL ( arg1 : * mut PixelWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetIndex ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetMagenta ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetMagentaQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetPixelColor ( arg1 : * mut PixelWand , arg2 : * const PixelInfo , ) ; 
} extern "C" {
 pub fn PixelSetQuantumPixel ( arg1 : * const Image , arg2 : * const Quantum , arg3 : * mut PixelWand , ) ; 
} extern "C" {
 pub fn PixelSetRed ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetRedQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn PixelSetYellow ( arg1 : * mut PixelWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn PixelSetYellowQuantum ( arg1 : * mut PixelWand , arg2 : Quantum , ) ; 
} extern "C" {
 pub fn MagickGetImageAlphaColor ( arg1 : * mut MagickWand , arg2 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageAlphaColor ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DisplayImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _DrawingWand { _unused : [ u8 ; 0 ] } pub type DrawingWand = _DrawingWand ; extern "C" {
 pub fn DrawGetTextAlignment ( arg1 : * const DrawingWand , ) -> AlignType ; 
} extern "C" {
 pub fn DrawGetClipPath ( arg1 : * const DrawingWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetDensity ( arg1 : * const DrawingWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetException ( arg1 : * const DrawingWand , arg2 : * mut ExceptionType , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetFont ( arg1 : * const DrawingWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetFontFamily ( arg1 : * const DrawingWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetTextEncoding ( arg1 : * const DrawingWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetVectorGraphics ( arg1 : * mut DrawingWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DrawGetClipUnits ( arg1 : * const DrawingWand , ) -> ClipPathUnits ; 
} extern "C" {
 pub fn DrawGetTextDecoration ( arg1 : * const DrawingWand , ) -> DecorationType ; 
} extern "C" {
 pub fn DrawGetTextDirection ( arg1 : * const DrawingWand , ) -> DirectionType ; 
} extern "C" {
 pub fn DrawGetFillOpacity ( arg1 : * const DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetFontSize ( arg1 : * const DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetOpacity ( arg1 : * const DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetStrokeDashArray ( arg1 : * const DrawingWand , arg2 : * mut usize , ) -> * mut f64 ; 
} extern "C" {
 pub fn DrawGetStrokeDashOffset ( arg1 : * const DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetStrokeOpacity ( arg1 : * const DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetStrokeWidth ( arg1 : * const DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetTextKerning ( arg1 : * mut DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetTextInterlineSpacing ( arg1 : * mut DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn DrawGetTextInterwordSpacing ( arg1 : * mut DrawingWand , ) -> f64 ; 
} extern "C" {
 pub fn PeekDrawingWand ( arg1 : * const DrawingWand , ) -> * mut DrawInfo ; 
} extern "C" {
 pub fn AcquireDrawingWand ( arg1 : * const DrawInfo , arg2 : * mut Image , ) -> * mut DrawingWand ; 
} extern "C" {
 pub fn CloneDrawingWand ( arg1 : * const DrawingWand , ) -> * mut DrawingWand ; 
} extern "C" {
 pub fn DestroyDrawingWand ( arg1 : * mut DrawingWand , ) -> * mut DrawingWand ; 
} extern "C" {
 pub fn NewDrawingWand ( ) -> * mut DrawingWand ; 
} extern "C" {
 pub fn DrawCloneExceptionInfo ( wand : * const DrawingWand , ) -> * mut ExceptionInfo ; 
} extern "C" {
 pub fn DrawGetExceptionType ( arg1 : * const DrawingWand , ) -> ExceptionType ; 
} extern "C" {
 pub fn DrawGetClipRule ( arg1 : * const DrawingWand , ) -> FillRule ; 
} extern "C" {
 pub fn DrawGetFillRule ( arg1 : * const DrawingWand , ) -> FillRule ; 
} extern "C" {
 pub fn DrawGetGravity ( arg1 : * const DrawingWand , ) -> GravityType ; 
} extern "C" {
 pub fn DrawGetStrokeLineCap ( arg1 : * const DrawingWand , ) -> LineCap ; 
} extern "C" {
 pub fn DrawGetStrokeLineJoin ( arg1 : * const DrawingWand , ) -> LineJoin ; 
} extern "C" {
 pub fn DrawClearException ( arg1 : * mut DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawComposite ( arg1 : * mut DrawingWand , arg2 : CompositeOperator , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawGetFontResolution ( arg1 : * const DrawingWand , arg2 : * mut f64 , arg3 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawGetStrokeAntialias ( arg1 : * const DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawGetTextAntialias ( arg1 : * const DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawGetTypeMetrics ( arg1 : * const DrawingWand , arg2 : * const libc :: c_char , arg3 : MagickBooleanType , arg4 : * mut TypeMetric , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawPopPattern ( arg1 : * mut DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawPushPattern ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawRender ( arg1 : * mut DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetClipPath ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetDensity ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetFillPatternURL ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetFont ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetFontFamily ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetFontResolution ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetStrokeDashArray ( arg1 : * mut DrawingWand , arg2 : usize , arg3 : * const f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetStrokePatternURL ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawSetVectorGraphics ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsDrawingWand ( arg1 : * const DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PopDrawingWand ( arg1 : * mut DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PushDrawingWand ( arg1 : * mut DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn DrawGetFontStretch ( arg1 : * const DrawingWand , ) -> StretchType ; 
} extern "C" {
 pub fn DrawGetFontStyle ( arg1 : * const DrawingWand , ) -> StyleType ; 
} extern "C" {
 pub fn DrawGetFontWeight ( arg1 : * const DrawingWand , ) -> usize ; 
} extern "C" {
 pub fn DrawGetStrokeMiterLimit ( arg1 : * const DrawingWand , ) -> usize ; 
} extern "C" {
 pub fn ClearDrawingWand ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawAffine ( arg1 : * mut DrawingWand , arg2 : * const AffineMatrix , ) ; 
} extern "C" {
 pub fn DrawAlpha ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : PaintMethod , ) ; 
} extern "C" {
 pub fn DrawAnnotation ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : * const libc :: c_uchar , ) ; 
} extern "C" {
 pub fn DrawArc ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : f64 , ) ; 
} extern "C" {
 pub fn DrawBezier ( arg1 : * mut DrawingWand , arg2 : usize , arg3 : * const PointInfo , ) ; 
} extern "C" {
 pub fn DrawGetBorderColor ( arg1 : * const DrawingWand , arg2 : * mut PixelWand , ) ; 
} extern "C" {
 pub fn DrawCircle ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawColor ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : PaintMethod , ) ; 
} extern "C" {
 pub fn DrawComment ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn DrawEllipse ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : f64 , ) ; 
} extern "C" {
 pub fn DrawGetFillColor ( arg1 : * const DrawingWand , arg2 : * mut PixelWand , ) ; 
} extern "C" {
 pub fn DrawGetStrokeColor ( arg1 : * const DrawingWand , arg2 : * mut PixelWand , ) ; 
} extern "C" {
 pub fn DrawSetTextKerning ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetTextInterlineSpacing ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetTextInterwordSpacing ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawGetTextUnderColor ( arg1 : * const DrawingWand , arg2 : * mut PixelWand , ) ; 
} extern "C" {
 pub fn DrawLine ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathClose ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawPathCurveToAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToQuadraticBezierAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToQuadraticBezierRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToQuadraticBezierSmoothAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToQuadraticBezierSmoothRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToSmoothAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathCurveToSmoothRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathEllipticArcAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : MagickBooleanType , arg6 : MagickBooleanType , arg7 : f64 , arg8 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathEllipticArcRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : MagickBooleanType , arg6 : MagickBooleanType , arg7 : f64 , arg8 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathFinish ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawPathLineToAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathLineToRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathLineToHorizontalAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathLineToHorizontalRelative ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathLineToVerticalAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathLineToVerticalRelative ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathMoveToAbsolute ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathMoveToRelative ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPathStart ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawPoint ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawPolygon ( arg1 : * mut DrawingWand , arg2 : usize , arg3 : * const PointInfo , ) ; 
} extern "C" {
 pub fn DrawPolyline ( arg1 : * mut DrawingWand , arg2 : usize , arg3 : * const PointInfo , ) ; 
} extern "C" {
 pub fn DrawPopClipPath ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawPopDefs ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawPushClipPath ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn DrawPushDefs ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawRectangle ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawResetVectorGraphics ( arg1 : * mut DrawingWand , ) ; 
} extern "C" {
 pub fn DrawRotate ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawRoundRectangle ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : f64 , arg7 : f64 , ) ; 
} extern "C" {
 pub fn DrawScale ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetBorderColor ( arg1 : * mut DrawingWand , arg2 : * const PixelWand , ) ; 
} extern "C" {
 pub fn DrawSetClipRule ( arg1 : * mut DrawingWand , arg2 : FillRule , ) ; 
} extern "C" {
 pub fn DrawSetClipUnits ( arg1 : * mut DrawingWand , arg2 : ClipPathUnits , ) ; 
} extern "C" {
 pub fn DrawSetFillColor ( arg1 : * mut DrawingWand , arg2 : * const PixelWand , ) ; 
} extern "C" {
 pub fn DrawSetFillOpacity ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetFillRule ( arg1 : * mut DrawingWand , arg2 : FillRule , ) ; 
} extern "C" {
 pub fn DrawSetFontSize ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetFontStretch ( arg1 : * mut DrawingWand , arg2 : StretchType , ) ; 
} extern "C" {
 pub fn DrawSetFontStyle ( arg1 : * mut DrawingWand , arg2 : StyleType , ) ; 
} extern "C" {
 pub fn DrawSetFontWeight ( arg1 : * mut DrawingWand , arg2 : usize , ) ; 
} extern "C" {
 pub fn DrawSetGravity ( arg1 : * mut DrawingWand , arg2 : GravityType , ) ; 
} extern "C" {
 pub fn DrawSetOpacity ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetStrokeAntialias ( arg1 : * mut DrawingWand , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn DrawSetStrokeColor ( arg1 : * mut DrawingWand , arg2 : * const PixelWand , ) ; 
} extern "C" {
 pub fn DrawSetStrokeDashOffset ( arg1 : * mut DrawingWand , dashoffset : f64 , ) ; 
} extern "C" {
 pub fn DrawSetStrokeLineCap ( arg1 : * mut DrawingWand , arg2 : LineCap , ) ; 
} extern "C" {
 pub fn DrawSetStrokeLineJoin ( arg1 : * mut DrawingWand , arg2 : LineJoin , ) ; 
} extern "C" {
 pub fn DrawSetStrokeMiterLimit ( arg1 : * mut DrawingWand , arg2 : usize , ) ; 
} extern "C" {
 pub fn DrawSetStrokeOpacity ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetStrokeWidth ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSetTextAlignment ( arg1 : * mut DrawingWand , arg2 : AlignType , ) ; 
} extern "C" {
 pub fn DrawSetTextAntialias ( arg1 : * mut DrawingWand , arg2 : MagickBooleanType , ) ; 
} extern "C" {
 pub fn DrawSetTextDecoration ( arg1 : * mut DrawingWand , arg2 : DecorationType , ) ; 
} extern "C" {
 pub fn DrawSetTextDirection ( arg1 : * mut DrawingWand , arg2 : DirectionType , ) ; 
} extern "C" {
 pub fn DrawSetTextEncoding ( arg1 : * mut DrawingWand , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn DrawSetTextUnderColor ( arg1 : * mut DrawingWand , arg2 : * const PixelWand , ) ; 
} extern "C" {
 pub fn DrawSetViewbox ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) ; 
} extern "C" {
 pub fn DrawSkewX ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawSkewY ( arg1 : * mut DrawingWand , arg2 : f64 , ) ; 
} extern "C" {
 pub fn DrawTranslate ( arg1 : * mut DrawingWand , arg2 : f64 , arg3 : f64 , ) ; 
} extern "C" {
 pub fn IdentifyImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ImportImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _MagickCLI { _unused : [ u8 ; 0 ] } pub type MagickCLI = _MagickCLI ; extern "C" {
 pub fn AcquireMagickCLI ( arg1 : * mut ImageInfo , arg2 : * mut ExceptionInfo , ) -> * mut MagickCLI ; 
} extern "C" {
 pub fn DestroyMagickCLI ( arg1 : * mut MagickCLI , ) -> * mut MagickCLI ; 
} extern "C" {
 pub fn CLICatchException ( arg1 : * mut MagickCLI , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CLILogEvent ( arg1 : * mut MagickCLI , arg2 : LogEventType , arg3 : * const libc :: c_char , arg4 : * const libc :: c_char , arg5 : usize , arg6 : * const libc :: c_char , ... ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CLIThrowException ( arg1 : * mut MagickCLI , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , arg4 : usize , arg5 : ExceptionType , arg6 : * const libc :: c_char , arg7 : * const libc :: c_char , ... ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CLIOption ( arg1 : * mut MagickCLI , arg2 : * const libc :: c_char , ... ) ; 
} extern "C" {
 pub fn ProcessScriptOptions ( arg1 : * mut MagickCLI , arg2 : * const libc :: c_char , arg3 : libc :: c_int , arg4 : * mut * mut libc :: c_char , arg5 : libc :: c_int , ) ; 
} extern "C" {
 pub fn ProcessCommandOptions ( arg1 : * mut MagickCLI , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : libc :: c_int , ) -> libc :: c_int ; 
} extern "C" {
 pub fn MagickImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetFilename ( arg1 : * const MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetFormat ( arg1 : * mut MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetFont ( arg1 : * mut MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetHomeURL ( ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageArtifact ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageArtifacts ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageProfiles ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageProperty ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageProperties ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetOption ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetOptions ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickQueryConfigureOption ( arg1 : * const libc :: c_char , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickQueryConfigureOptions ( arg1 : * const libc :: c_char , arg2 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickQueryFonts ( arg1 : * const libc :: c_char , arg2 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickQueryFormats ( arg1 : * const libc :: c_char , arg2 : * mut usize , ) -> * mut * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetColorspace ( arg1 : * mut MagickWand , ) -> ColorspaceType ; 
} extern "C" {
 pub fn MagickGetCompression ( arg1 : * mut MagickWand , ) -> CompressionType ; 
} extern "C" {
 pub fn MagickGetCopyright ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn MagickGetPackageName ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn MagickGetQuantumDepth ( arg1 : * mut usize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn MagickGetQuantumRange ( arg1 : * mut usize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn MagickGetReleaseDate ( ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn MagickGetVersion ( arg1 : * mut usize , ) -> * const libc :: c_char ; 
} extern "C" {
 pub fn MagickGetPointsize ( arg1 : * mut MagickWand , ) -> f64 ; 
} extern "C" {
 pub fn MagickGetSamplingFactors ( arg1 : * mut MagickWand , arg2 : * mut usize , ) -> * mut f64 ; 
} extern "C" {
 pub fn MagickQueryFontMetrics ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , arg3 : * const libc :: c_char , ) -> * mut f64 ; 
} extern "C" {
 pub fn MagickQueryMultilineFontMetrics ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , arg3 : * const libc :: c_char , ) -> * mut f64 ; 
} extern "C" {
 pub fn MagickGetGravity ( arg1 : * mut MagickWand , ) -> GravityType ; 
} extern "C" {
 pub fn MagickGetType ( arg1 : * mut MagickWand , ) -> ImageType ; 
} extern "C" {
 pub fn MagickGetInterlaceScheme ( arg1 : * mut MagickWand , ) -> InterlaceType ; 
} extern "C" {
 pub fn MagickGetInterpolateMethod ( arg1 : * mut MagickWand , ) -> PixelInterpolateMethod ; 
} extern "C" {
 pub fn MagickGetOrientation ( arg1 : * mut MagickWand , ) -> OrientationType ; 
} extern "C" {
 pub fn MagickDeleteImageArtifact ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDeleteImageProperty ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDeleteOption ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetAntialias ( arg1 : * const MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetPage ( arg1 : * const MagickWand , arg2 : * mut usize , arg3 : * mut usize , arg4 : * mut isize , arg5 : * mut isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetResolution ( arg1 : * const MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetSize ( arg1 : * const MagickWand , arg2 : * mut usize , arg3 : * mut usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetSizeOffset ( arg1 : * const MagickWand , arg2 : * mut isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickProfileImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * const libc :: c_void , arg4 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetAntialias ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetBackgroundColor ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetColorspace ( arg1 : * mut MagickWand , arg2 : ColorspaceType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetCompression ( arg1 : * mut MagickWand , arg2 : CompressionType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetCompressionQuality ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetDepth ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetExtract ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetFilename ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetFormat ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetFont ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetGravity ( arg1 : * mut MagickWand , arg2 : GravityType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageArtifact ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageProfile ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * const libc :: c_void , arg4 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageProperty ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetInterlaceScheme ( arg1 : * mut MagickWand , arg2 : InterlaceType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetInterpolateMethod ( arg1 : * mut MagickWand , arg2 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetOption ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetOrientation ( arg1 : * mut MagickWand , arg2 : OrientationType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetPage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetPassphrase ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetPointsize ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetResolution ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetResourceLimit ( type_ : ResourceType , limit : MagickSizeType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetSamplingFactors ( arg1 : * mut MagickWand , arg2 : usize , arg3 : * const f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetSecurityPolicy ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetSize ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetSizeOffset ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetType ( arg1 : * mut MagickWand , arg2 : ImageType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetProgressMonitor ( arg1 : * mut MagickWand , arg2 : MagickProgressMonitor , arg3 : * mut libc :: c_void , ) -> MagickProgressMonitor ; 
} extern "C" {
 pub fn MagickGetResource ( arg1 : ResourceType , ) -> MagickSizeType ; 
} extern "C" {
 pub fn MagickGetResourceLimit ( arg1 : ResourceType , ) -> MagickSizeType ; 
} extern "C" {
 pub fn MagickGetBackgroundColor ( arg1 : * mut MagickWand , ) -> * mut PixelWand ; 
} extern "C" {
 pub fn MagickGetOrientationType ( arg1 : * mut MagickWand , ) -> OrientationType ; 
} extern "C" {
 pub fn MagickGetCompressionQuality ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageProfile ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * mut usize , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn MagickRemoveImageProfile ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : * mut usize , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn MagickSetSeed ( arg1 : libc :: c_ulong , ) ; 
} extern "C" {
 pub fn MagickGetImageFeatures ( arg1 : * mut MagickWand , arg2 : usize , ) -> * mut ChannelFeatures ; 
} extern "C" {
 pub fn MagickSetImageChannelMask ( arg1 : * mut MagickWand , arg2 : ChannelType , ) -> ChannelType ; 
} extern "C" {
 pub fn MagickGetImageStatistics ( arg1 : * mut MagickWand , ) -> * mut ChannelStatistics ; 
} extern "C" {
 pub fn MagickGetImageFilename ( arg1 : * mut MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageFormat ( arg1 : * mut MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageSignature ( arg1 : * mut MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickIdentifyImage ( arg1 : * mut MagickWand , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetImageColorspace ( arg1 : * mut MagickWand , ) -> ColorspaceType ; 
} extern "C" {
 pub fn MagickGetImageCompose ( arg1 : * mut MagickWand , ) -> CompositeOperator ; 
} extern "C" {
 pub fn MagickGetImageCompression ( arg1 : * mut MagickWand , ) -> CompressionType ; 
} extern "C" {
 pub fn MagickGetImageDispose ( arg1 : * mut MagickWand , ) -> DisposeType ; 
} extern "C" {
 pub fn MagickGetImageDistortions ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : MetricType , ) -> * mut f64 ; 
} extern "C" {
 pub fn MagickGetImageFuzz ( arg1 : * mut MagickWand , ) -> f64 ; 
} extern "C" {
 pub fn MagickGetImageGamma ( arg1 : * mut MagickWand , ) -> f64 ; 
} extern "C" {
 pub fn MagickGetImageTotalInkDensity ( arg1 : * mut MagickWand , ) -> f64 ; 
} extern "C" {
 pub fn MagickGetImageEndian ( arg1 : * mut MagickWand , ) -> EndianType ; 
} extern "C" {
 pub fn MagickGetImageGravity ( arg1 : * mut MagickWand , ) -> GravityType ; 
} extern "C" {
 pub fn MagickDestroyImage ( arg1 : * mut Image , ) -> * mut Image ; 
} extern "C" {
 pub fn GetImageFromMagickWand ( arg1 : * const MagickWand , ) -> * mut Image ; 
} extern "C" {
 pub fn MagickGetImageType ( arg1 : * mut MagickWand , ) -> ImageType ; 
} extern "C" {
 pub fn MagickIdentifyImageType ( arg1 : * mut MagickWand , ) -> ImageType ; 
} extern "C" {
 pub fn MagickGetImageInterlaceScheme ( arg1 : * mut MagickWand , ) -> InterlaceType ; 
} extern "C" {
 pub fn MagickGetImageInterpolateMethod ( arg1 : * mut MagickWand , ) -> PixelInterpolateMethod ; 
} extern "C" {
 pub fn MagickAdaptiveBlurImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAdaptiveResizeImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAdaptiveSharpenImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAdaptiveThresholdImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAddImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAddNoiseImage ( arg1 : * mut MagickWand , arg2 : NoiseType , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAffineTransformImage ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAnnotateImage ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , arg3 : f64 , arg4 : f64 , arg5 : f64 , arg6 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAnimateImages ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAutoGammaImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAutoLevelImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAutoOrientImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickAutoThresholdImage ( arg1 : * mut MagickWand , arg2 : AutoThresholdMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickBlackThresholdImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickBlueShiftImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickBlurImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickBorderImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : usize , arg4 : usize , compose : CompositeOperator , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickBrightnessContrastImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCannyEdgeImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCharcoalImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickChopImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCLAHEImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : f64 , arg5 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickClampImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickClipImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickClipImagePath ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickClutImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickColorDecisionListImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickColorizeImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickColorMatrixImage ( arg1 : * mut MagickWand , arg2 : * const KernelInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCommentImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCompositeImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : CompositeOperator , arg4 : MagickBooleanType , arg5 : isize , arg6 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCompositeImageGravity ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : CompositeOperator , arg4 : GravityType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCompositeLayers ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : CompositeOperator , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickConnectedComponentsImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : * mut * mut CCObjectInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickConstituteImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : * const libc :: c_char , arg5 : StorageType , arg6 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickContrastImage ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickContrastStretchImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickConvolveImage ( arg1 : * mut MagickWand , arg2 : * const KernelInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCropImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickCycleColormapImage ( arg1 : * mut MagickWand , arg2 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDecipherImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDeskewImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDespeckleImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDisplayImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDisplayImages ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDistortImage ( arg1 : * mut MagickWand , arg2 : DistortMethod , arg3 : usize , arg4 : * const f64 , arg5 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickDrawImage ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickEdgeImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickEmbossImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickEncipherImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickEnhanceImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickEqualizeImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickEvaluateImage ( arg1 : * mut MagickWand , arg2 : MagickEvaluateOperator , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickExportImagePixels ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * const libc :: c_char , arg7 : StorageType , arg8 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickExtentImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickFlipImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickFloodfillPaintImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : f64 , arg4 : * const PixelWand , arg5 : isize , arg6 : isize , arg7 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickFlopImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickForwardFourierTransformImage ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickFrameImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : usize , arg4 : usize , arg5 : isize , arg6 : isize , arg7 : CompositeOperator , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickFunctionImage ( arg1 : * mut MagickWand , arg2 : MagickFunction , arg3 : usize , arg4 : * const f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGammaImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGaussianBlurImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageAlphaChannel ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageBackgroundColor ( arg1 : * mut MagickWand , arg2 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageBluePrimary ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageBorderColor ( arg1 : * mut MagickWand , arg2 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageKurtosis ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageMean ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageRange ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageColormapColor ( arg1 : * mut MagickWand , arg2 : usize , arg3 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageDistortion ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : MetricType , arg4 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageGreenPrimary ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageLength ( arg1 : * mut MagickWand , arg2 : * mut MagickSizeType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageMatteColor ( arg1 : * mut MagickWand , arg2 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImagePage ( arg1 : * mut MagickWand , arg2 : * mut usize , arg3 : * mut usize , arg4 : * mut isize , arg5 : * mut isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImagePixelColor ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , arg4 : * mut PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageRedPrimary ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageResolution ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickGetImageWhitePoint ( arg1 : * mut MagickWand , arg2 : * mut f64 , arg3 : * mut f64 , arg4 : * mut f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickHaldClutImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickHasNextImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickHasPreviousImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickHoughLineImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickImplodeImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickImportImagePixels ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , arg6 : * const libc :: c_char , arg7 : StorageType , arg8 : * const libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickInterpolativeResizeImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickInverseFourierTransformImage ( arg1 : * mut MagickWand , arg2 : * mut MagickWand , arg3 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickKuwaharaImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLabelImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLevelImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLevelImageColors ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : * const PixelWand , arg4 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLevelizeImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLinearStretchImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLiquidRescaleImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : f64 , arg5 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickLocalContrastImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickMagnifyImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickMeanShiftImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickMedianConvolveImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickMinifyImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickModeImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickModulateImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickMorphologyImage ( arg1 : * mut MagickWand , arg2 : MorphologyMethod , arg3 : isize , arg4 : * const KernelInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickMotionBlurImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickNegateImage ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickNewImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickNextImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickNormalizeImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickOilPaintImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickOpaquePaintImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : * const PixelWand , arg4 : f64 , arg5 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickOptimizeImageTransparency ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickOrderedDitherImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPolynomialImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : * const f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickTransparentPaintImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : f64 , arg4 : f64 , invert : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPingImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPingImageBlob ( arg1 : * mut MagickWand , arg2 : * const libc :: c_void , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPingImageFile ( arg1 : * mut MagickWand , arg2 : * mut FILE , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPolaroidImage ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , arg3 : * const libc :: c_char , arg4 : f64 , arg5 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPosterizeImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : DitherMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickPreviousImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickQuantizeImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : ColorspaceType , arg4 : usize , arg5 : DitherMethod , arg6 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickQuantizeImages ( arg1 : * mut MagickWand , arg2 : usize , arg3 : ColorspaceType , arg4 : usize , arg5 : DitherMethod , arg6 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRangeThresholdImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRotationalBlurImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRaiseImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , arg6 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRandomThresholdImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickReadImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickReadImageBlob ( arg1 : * mut MagickWand , arg2 : * const libc :: c_void , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickReadImageFile ( arg1 : * mut MagickWand , arg2 : * mut FILE , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickReduceNoiseImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRemapImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : DitherMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRemoveImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickResampleImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : FilterType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickResetImagePage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickResizeImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : FilterType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRollImage ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickRotateImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSampleImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickScaleImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSegmentImage ( arg1 : * mut MagickWand , arg2 : ColorspaceType , arg3 : MagickBooleanType , arg4 : f64 , arg5 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSelectiveBlurImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSeparateImage ( arg1 : * mut MagickWand , arg2 : ChannelType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSepiaToneImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageAlpha ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageAlphaChannel ( arg1 : * mut MagickWand , arg2 : AlphaChannelOption , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageBackgroundColor ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageBluePrimary ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageBorderColor ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageColor ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageColormapColor ( arg1 : * mut MagickWand , arg2 : usize , arg3 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageColorspace ( arg1 : * mut MagickWand , arg2 : ColorspaceType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageCompose ( arg1 : * mut MagickWand , arg2 : CompositeOperator , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageCompression ( arg1 : * mut MagickWand , arg2 : CompressionType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageDelay ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageDepth ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageDispose ( arg1 : * mut MagickWand , arg2 : DisposeType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageCompressionQuality ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageEndian ( arg1 : * mut MagickWand , arg2 : EndianType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageExtent ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageFilename ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageFormat ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageFuzz ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageGamma ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageGravity ( arg1 : * mut MagickWand , arg2 : GravityType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageGreenPrimary ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageInterlaceScheme ( arg1 : * mut MagickWand , arg2 : InterlaceType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageInterpolateMethod ( arg1 : * mut MagickWand , arg2 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageIterations ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageMatte ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageMatteColor ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageOrientation ( arg1 : * mut MagickWand , arg2 : OrientationType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImagePage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImagePixelColor ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , arg4 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageRedPrimary ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageRenderingIntent ( arg1 : * mut MagickWand , arg2 : RenderingIntent , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageResolution ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageScene ( arg1 : * mut MagickWand , arg2 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageTicksPerSecond ( arg1 : * mut MagickWand , arg2 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageType ( arg1 : * mut MagickWand , arg2 : ImageType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageUnits ( arg1 : * mut MagickWand , arg2 : ResolutionType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageWhitePoint ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickShadeImage ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickShadowImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSharpenImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickShaveImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickShearImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSigmoidalContrastImage ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSketchImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSolarizeImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSparseColorImage ( arg1 : * mut MagickWand , arg2 : SparseColorMethod , arg3 : usize , arg4 : * const f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSpliceImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSpreadImage ( arg1 : * mut MagickWand , arg2 : PixelInterpolateMethod , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickStatisticImage ( arg1 : * mut MagickWand , arg2 : StatisticType , arg3 : usize , arg4 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickStripImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSwirlImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickTintImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , arg3 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickTransformImageColorspace ( arg1 : * mut MagickWand , arg2 : ColorspaceType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickTransposeImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickTransverseImage ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickThresholdImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickThresholdImageChannel ( arg1 : * mut MagickWand , arg2 : ChannelType , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickThumbnailImage ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickTrimImage ( arg1 : * mut MagickWand , arg2 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickUniqueImageColors ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickUnsharpMaskImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : f64 , arg5 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickVignetteImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : isize , arg5 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWaveImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , arg4 : PixelInterpolateMethod , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWaveletDenoiseImage ( arg1 : * mut MagickWand , arg2 : f64 , arg3 : f64 , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWhiteThresholdImage ( arg1 : * mut MagickWand , arg2 : * const PixelWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWriteImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWriteImageFile ( arg1 : * mut MagickWand , arg2 : * mut FILE , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWriteImages ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , arg3 : MagickBooleanType , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickWriteImagesFile ( arg1 : * mut MagickWand , arg2 : * mut FILE , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetImageProgressMonitor ( arg1 : * mut MagickWand , arg2 : MagickProgressMonitor , arg3 : * mut libc :: c_void , ) -> MagickProgressMonitor ; 
} extern "C" {
 pub fn MagickAppendImages ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickChannelFxImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickCoalesceImages ( arg1 : * mut MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickCombineImages ( arg1 : * mut MagickWand , arg2 : ColorspaceType , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickCompareImages ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : MetricType , arg4 : * mut f64 , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickCompareImagesLayers ( arg1 : * mut MagickWand , arg2 : LayerMethod , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickComplexImages ( arg1 : * mut MagickWand , arg2 : ComplexOperator , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickDeconstructImages ( arg1 : * mut MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickEvaluateImages ( arg1 : * mut MagickWand , arg2 : MagickEvaluateOperator , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickFxImage ( arg1 : * mut MagickWand , arg2 : * const libc :: c_char , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickGetImage ( arg1 : * mut MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickGetImageMask ( arg1 : * mut MagickWand , arg2 : PixelMask , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickGetImageRegion ( arg1 : * mut MagickWand , arg2 : usize , arg3 : usize , arg4 : isize , arg5 : isize , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickMergeImageLayers ( arg1 : * mut MagickWand , arg2 : LayerMethod , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickMorphImages ( arg1 : * mut MagickWand , arg2 : usize , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickMontageImage ( arg1 : * mut MagickWand , arg2 : * const DrawingWand , arg3 : * const libc :: c_char , arg4 : * const libc :: c_char , arg5 : MontageMode , arg6 : * const libc :: c_char , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickOptimizeImageLayers ( arg1 : * mut MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickPreviewImages ( wand : * mut MagickWand , arg1 : PreviewType , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickSimilarityImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : MetricType , arg4 : f64 , arg5 : * mut RectangleInfo , arg6 : * mut f64 , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickSmushImages ( arg1 : * mut MagickWand , arg2 : MagickBooleanType , arg3 : isize , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickSteganoImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , arg3 : isize , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickStereoImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickTextureImage ( arg1 : * mut MagickWand , arg2 : * const MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickGetImageOrientation ( arg1 : * mut MagickWand , ) -> OrientationType ; 
} extern "C" {
 pub fn MagickGetImageHistogram ( arg1 : * mut MagickWand , arg2 : * mut usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn MagickGetImageRenderingIntent ( arg1 : * mut MagickWand , ) -> RenderingIntent ; 
} extern "C" {
 pub fn MagickGetImageUnits ( arg1 : * mut MagickWand , ) -> ResolutionType ; 
} extern "C" {
 pub fn MagickGetImageColors ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageCompressionQuality ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageDelay ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageDepth ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageHeight ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageIterations ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageScene ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageTicksPerSecond ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageWidth ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetNumberImages ( arg1 : * mut MagickWand , ) -> usize ; 
} extern "C" {
 pub fn MagickGetImageBlob ( arg1 : * mut MagickWand , arg2 : * mut usize , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn MagickGetImagesBlob ( arg1 : * mut MagickWand , arg2 : * mut usize , ) -> * mut libc :: c_uchar ; 
} extern "C" {
 pub fn MagickGetImageVirtualPixelMethod ( arg1 : * mut MagickWand , ) -> VirtualPixelMethod ; 
} extern "C" {
 pub fn MagickSetImageVirtualPixelMethod ( arg1 : * mut MagickWand , arg2 : VirtualPixelMethod , ) -> VirtualPixelMethod ; 
} pub type MagickCommand = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo ) -> MagickBooleanType > ; extern "C" {
 pub fn MagickCommandGenesis ( arg1 : * mut ImageInfo , arg2 : MagickCommand , arg3 : libc :: c_int , arg4 : * mut * mut libc :: c_char , arg5 : * mut * mut libc :: c_char , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MogrifyImage ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * const libc :: c_char , arg4 : * mut * mut Image , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MogrifyImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MogrifyImageInfo ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * const libc :: c_char , arg4 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MogrifyImageList ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * const libc :: c_char , arg4 : * mut * mut Image , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MogrifyImages ( arg1 : * mut ImageInfo , arg2 : MagickBooleanType , arg3 : libc :: c_int , arg4 : * mut * const libc :: c_char , arg5 : * mut * mut Image , arg6 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MontageImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _PixelIterator { _unused : [ u8 ; 0 ] } pub type PixelIterator = _PixelIterator ; extern "C" {
 pub fn PixelGetIteratorException ( arg1 : * const PixelIterator , arg2 : * mut ExceptionType , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn PixelGetIteratorExceptionType ( arg1 : * const PixelIterator , ) -> ExceptionType ; 
} extern "C" {
 pub fn IsPixelIterator ( arg1 : * const PixelIterator , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PixelClearIteratorException ( arg1 : * mut PixelIterator , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PixelSetIteratorRow ( arg1 : * mut PixelIterator , arg2 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn PixelSyncIterator ( arg1 : * mut PixelIterator , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn ClonePixelIterator ( arg1 : * const PixelIterator , ) -> * mut PixelIterator ; 
} extern "C" {
 pub fn DestroyPixelIterator ( arg1 : * mut PixelIterator , ) -> * mut PixelIterator ; 
} extern "C" {
 pub fn NewPixelIterator ( arg1 : * mut MagickWand , ) -> * mut PixelIterator ; 
} extern "C" {
 pub fn NewPixelRegionIterator ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , ) -> * mut PixelIterator ; 
} extern "C" {
 pub fn PixelGetCurrentIteratorRow ( arg1 : * mut PixelIterator , arg2 : * mut usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn PixelGetNextIteratorRow ( arg1 : * mut PixelIterator , arg2 : * mut usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn PixelGetPreviousIteratorRow ( arg1 : * mut PixelIterator , arg2 : * mut usize , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn PixelGetIteratorRow ( arg1 : * mut PixelIterator , ) -> isize ; 
} extern "C" {
 pub fn ClearPixelIterator ( arg1 : * mut PixelIterator , ) ; 
} extern "C" {
 pub fn PixelResetIterator ( arg1 : * mut PixelIterator , ) ; 
} extern "C" {
 pub fn PixelSetFirstIteratorRow ( arg1 : * mut PixelIterator , ) ; 
} extern "C" {
 pub fn PixelSetLastIteratorRow ( arg1 : * mut PixelIterator , ) ; 
} extern "C" {
 pub fn StreamImageCommand ( arg1 : * mut ImageInfo , arg2 : libc :: c_int , arg3 : * mut * mut libc :: c_char , arg4 : * mut * mut libc :: c_char , arg5 : * mut ExceptionInfo , ) -> MagickBooleanType ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _WandView { _unused : [ u8 ; 0 ] } pub type WandView = _WandView ; pub type DuplexTransferWandViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const WandView , arg2 : * const WandView , arg3 : * mut WandView , arg4 : isize , arg5 : libc :: c_int , arg6 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type GetWandViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const WandView , arg2 : isize , arg3 : libc :: c_int , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type SetWandViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut WandView , arg2 : isize , arg3 : libc :: c_int , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type TransferWandViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const WandView , arg2 : * mut WandView , arg3 : isize , arg4 : libc :: c_int , arg5 : * mut libc :: c_void ) -> MagickBooleanType > ; pub type UpdateWandViewMethod = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut WandView , arg2 : isize , arg3 : libc :: c_int , arg4 : * mut libc :: c_void ) -> MagickBooleanType > ; extern "C" {
 pub fn GetWandViewException ( arg1 : * const WandView , arg2 : * mut ExceptionType , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn DuplexTransferWandViewIterator ( arg1 : * mut WandView , arg2 : * mut WandView , arg3 : * mut WandView , arg4 : DuplexTransferWandViewMethod , arg5 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetWandViewIterator ( arg1 : * mut WandView , arg2 : GetWandViewMethod , arg3 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsWandView ( arg1 : * const WandView , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn SetWandViewIterator ( arg1 : * mut WandView , arg2 : SetWandViewMethod , arg3 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn TransferWandViewIterator ( arg1 : * mut WandView , arg2 : * mut WandView , arg3 : TransferWandViewMethod , arg4 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn UpdateWandViewIterator ( arg1 : * mut WandView , arg2 : UpdateWandViewMethod , arg3 : * mut libc :: c_void , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn GetWandViewWand ( arg1 : * const WandView , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn GetWandViewPixels ( arg1 : * const WandView , ) -> * mut * mut PixelWand ; 
} extern "C" {
 pub fn GetWandViewExtent ( arg1 : * const WandView , ) -> RectangleInfo ; 
} extern "C" {
 pub fn SetWandViewDescription ( arg1 : * mut WandView , arg2 : * const libc :: c_char , ) ; 
} extern "C" {
 pub fn SetWandViewThreads ( arg1 : * mut WandView , arg2 : usize , ) ; 
} extern "C" {
 pub fn CloneWandView ( arg1 : * const WandView , ) -> * mut WandView ; 
} extern "C" {
 pub fn DestroyWandView ( arg1 : * mut WandView , ) -> * mut WandView ; 
} extern "C" {
 pub fn NewWandView ( arg1 : * mut MagickWand , ) -> * mut WandView ; 
} extern "C" {
 pub fn NewWandViewExtent ( arg1 : * mut MagickWand , arg2 : isize , arg3 : isize , arg4 : usize , arg5 : usize , ) -> * mut WandView ; 
} extern "C" {
 pub fn MagickGetException ( arg1 : * const MagickWand , arg2 : * mut ExceptionType , ) -> * mut libc :: c_char ; 
} extern "C" {
 pub fn MagickGetExceptionType ( arg1 : * const MagickWand , ) -> ExceptionType ; 
} extern "C" {
 pub fn IsMagickWand ( arg1 : * const MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn IsMagickWandInstantiated ( ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickClearException ( arg1 : * mut MagickWand , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn MagickSetIteratorIndex ( arg1 : * mut MagickWand , arg2 : isize , ) -> MagickBooleanType ; 
} extern "C" {
 pub fn CloneMagickWand ( arg1 : * const MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn DestroyMagickWand ( arg1 : * mut MagickWand , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn NewMagickWand ( ) -> * mut MagickWand ; 
} extern "C" {
 pub fn NewMagickWandFromImage ( arg1 : * const Image , ) -> * mut MagickWand ; 
} extern "C" {
 pub fn MagickGetIteratorIndex ( arg1 : * mut MagickWand , ) -> isize ; 
} extern "C" {
 pub fn ClearMagickWand ( arg1 : * mut MagickWand , ) ; 
} extern "C" {
 pub fn MagickWandGenesis ( ) ; 
} extern "C" {
 pub fn MagickWandTerminus ( ) ; 
} extern "C" {
 pub fn MagickRelinquishMemory ( arg1 : * mut libc :: c_void , ) -> * mut libc :: c_void ; 
} extern "C" {
 pub fn MagickResetIterator ( arg1 : * mut MagickWand , ) ; 
} extern "C" {
 pub fn MagickSetFirstIterator ( arg1 : * mut MagickWand , ) ; 
} extern "C" {
 pub fn MagickSetLastIterator ( arg1 : * mut MagickWand , ) ; 
} pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : libc :: c_uint , pub fp_offset : libc :: c_uint , pub overflow_arg_area : * mut libc :: c_void , pub reg_save_area : * mut libc :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __locale_data { pub _address : u8 , }
}